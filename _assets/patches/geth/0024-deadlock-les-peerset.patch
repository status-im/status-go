diff --git c/les/peer.go w/les/peer.go
index caf568077..5eb41cff9 100644
--- c/les/peer.go
+++ w/les/peer.go
@@ -543,19 +543,24 @@ func (ps *peerSet) notify(n peerSetNotify) {
 // Register injects a new peer into the working set, or returns an error if the
 // peer is already known.
 func (ps *peerSet) Register(p *peer) error {
-	ps.lock.Lock()
-	if ps.closed {
-		return errClosed
+	peers, err := func() ([]peerSetNotify, error) {
+		ps.lock.Lock()
+		defer ps.lock.Unlock()
+		if ps.closed {
+			return nil, errClosed
+		}
+		if _, ok := ps.peers[p.id]; ok {
+			return nil, errAlreadyRegistered
+		}
+		ps.peers[p.id] = p
+		p.sendQueue = newExecQueue(100)
+		peers := make([]peerSetNotify, len(ps.notifyList))
+		copy(peers, ps.notifyList)
+		return peers, nil
+	}()
+	if err != nil {
+		return err
 	}
-	if _, ok := ps.peers[p.id]; ok {
-		return errAlreadyRegistered
-	}
-	ps.peers[p.id] = p
-	p.sendQueue = newExecQueue(100)
-	peers := make([]peerSetNotify, len(ps.notifyList))
-	copy(peers, ps.notifyList)
-	ps.lock.Unlock()
-
 	for _, n := range peers {
 		n.registerPeer(p)
 	}
