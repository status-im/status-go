pipeline {
  agent { label 'linux' }

  parameters {
    string(
      name: 'BRANCH',
      defaultValue: 'develop',
      description: 'Name of branch to build.'
    )
    booleanParam(
      name: 'RELEASE',
      defaultValue: false,
      description: 'Enable to create build for release.',
    )
  }

  options {
    timestamps()
    disableConcurrentBuilds()
    /* Go requires a certain directory structure */
    checkoutToSubdirectory('src/github.com/status-im/status-go')
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '30',
      daysToKeepStr: '30',
    ))
  }

  environment {
    STATUS_PATH = "${env.WORKSPACE}/src/github.com/status-im/status-go"
    CI_DIR      = "${env.STATUS_PATH}/_assets/ci"
    GOPATH      = "${env.WORKSPACE}"
    PATH        = "/usr/local/go/bin:${env.PATH}:${env.GOPATH}/bin"
    /* docker image settings */
    IMAGE_NAME  = "statusteam/status-go"
    IMAGE_TAG   = "deploy-test"
  }

  stages {
    stage('Prep') { steps { script {
      lib = load("${env.STATUS_PATH}/_assets/ci/lib.groovy")
      /* clarify what we're building */
      println("Version: ${lib.getVersion()}")
      println("Git Branch: ${lib.gitBranch()}")
      println("Git Commit: ${lib.gitCommit()}")
      /* save and create a dir for artifacts */
      dest = "${env.WORKSPACE}/pkg"
      sh "mkdir -p ${dest}"
    } } }

    stage('Build') { steps { dir(env.STATUS_PATH) { script {
      sh 'make docker-image'
      image = docker.image("${env.IMAGE_NAME}:${lib.getVersion()}")
    } } } }

    stage('Push') { steps { dir(env.STATUS_PATH) { script {
      withDockerRegistry([credentialsId: "dockerhub-statusteam-auto", url: ""]) {
        image.push()
      }
    } } } }

    stage('Deploy') {
      when { expression { params.RELEASE == true } }
      steps { dir(env.STATUS_PATH) { script {
        withDockerRegistry([credentialsId: "dockerhub-statusteam-auto", url: ""]) {
          image.push(env.IMAGE_TAG)
        }
    } } } }
  } // stages
  post {
    success { script { load("${CI_DIR}/ghcmgr.groovy").postBuild(true) } }
    failure { script { load("${CI_DIR}/ghcmgr.groovy").postBuild(false) } }
    always  { dir(env.STATUS_PATH) {
      sh 'make clean-docker-images'
    } }
  } // post
} // pipeline
