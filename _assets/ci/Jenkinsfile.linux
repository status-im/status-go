library 'status-jenkins-lib@v1.3.3'

pipeline {
  agent { label 'linux && x86_64 && go-1.18' }

  parameters {
    string(
      name: 'BRANCH',
      defaultValue: 'develop',
      description: 'Name of branch to build.'
    )
    booleanParam(
      name: 'RELEASE',
      defaultValue: false,
      description: 'Enable to create build for release.',
    )
  }

  options {
    timestamps()
    disableConcurrentBuilds()
    /* Go requires a certain directory structure */
    checkoutToSubdirectory('src/github.com/status-im/status-go')
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '5',
      daysToKeepStr: '30',
    ))
  }

  environment {
    TARGET = 'linux'
    REPO   = "${env.WORKSPACE}/src/github.com/status-im/status-go"
    GOPATH = "${env.WORKSPACE}"
    PATH   = "/usr/local/go/bin:${env.PATH}:${env.GOPATH}/bin"
  }

  stages {
    stage('Prep') { steps { dir(env.REPO) { script {
      env.ARTIFACT = "${env.WORKSPACE}/" + utils.pkgFilename(
        name: "status-go",
        type: "desktop",
        ext: "zip"
      )
      println("Output: ${env.ARTIFACT}")
    } } } }

    stage('Setup') { steps { dir(env.REPO) {
      sh 'make setup-build'
    } } }

    /* Sanity-check C bindings */
    stage('Sanity check bindings') { steps { dir(env.REPO) {
      sh 'make statusgo-library'
    } } }

    stage('Compress') { steps { dir(env.REPO) {
      sh "zip -q -r ${env.ARTIFACT} . -x *.git"
    } } }

    stage('Archive') { steps {
      archiveArtifacts(env.ARTIFACT.minus("${env.WORKSPACE}/"))
    } }

    stage('Upload') { steps { script {
      env.PKG_URL = s3.uploadArtifact(env.ARTIFACT)
    } } }
  } // stages
  post {
    success { script { github.notifyPR(true) } }
    failure { script { github.notifyPR(false) } }
    always { dir(env.REPO) { sh 'make clean' } }
  } // post
} // pipeline
