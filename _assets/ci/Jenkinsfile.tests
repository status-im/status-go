#!/usr/bin/env groovy
library 'status-jenkins-lib@v1.8.10'

pipeline {
  agent { label 'linux && x86_64' }

  parameters {
    string(
      name: 'BRANCH',
      defaultValue: 'develop',
      description: 'Name of branch to build.'
    )
    string(
      name: 'UNIT_TEST_COUNT',
      defaultValue: getDefaultUnitTestCount(),
      description: 'How many times to run tests?'
    )
    booleanParam(
      name: 'UNIT_TEST_FAILFAST',
      defaultValue: getDefaultUnitTestFailfast(),
      description: 'Should the job fail fast on first test failure?'
    )
    booleanParam(
      name: 'UNIT_TEST_RERUN_FAILS',
      defaultValue: getDefaultUnitTestRerunFails(),
      description: 'Should the job rerun failed tests?'
    )
    booleanParam(
      name: 'UNIT_TEST_USE_DEVELOPMENT_LOGGER',
      defaultValue: getDefaultUnitTestUseDevelopmentLogger(),
      description: 'Should the job use detailed logging for tests, potentially generating large logs?'
    )
    booleanParam(
      name: 'RUN_LINTER',
      defaultValue: false,
      description: 'Should we run the linter? At this point we should rather not bother with it for release branch'
    )
    booleanParam(
      name: 'RUN_UNIT_TESTS',
      defaultValue: false,
      description: 'Should we run unit-tests? At this point we should rather not bother with it for release branch'
    )
  }

  options {
    timestamps()
    /* Prevent Jenkins jobs from running forever */
    timeout(time: getDefaultTimeout(), unit: 'MINUTES')
    disableConcurrentBuilds()
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '5',
      daysToKeepStr: '30',
      artifactNumToKeepStr: '1',
    ))
  }

  environment {
    PLATFORM = 'tests'
    DB_CONT  = "status-go-test-db-${env.EXECUTOR_NUMBER.toInteger() + 1}"
    DB_PORT  = "${5432 + env.EXECUTOR_NUMBER.toInteger()}"
    TMPDIR   = "${WORKSPACE_TMP}"
    GOPATH   = "${WORKSPACE_TMP}/go"
    GOCACHE  = "${WORKSPACE_TMP}/gocache"
    PATH     = "${PATH}:${GOPATH}/bin"
    REPO_SRC = "${GOPATH}/src/github.com/status-im/status-go"
  }

  stages {
    stage('Prep') {
      steps { /* Go needs to find status-go in GOPATH. */
        sh "mkdir -p \$(dirname ${REPO_SRC})"
        sh "ln -s ${WORKSPACE} ${REPO_SRC}"
      }
    }

    stage('Vendor Check') {
      steps { script {
        nix.shell('make vendor', pure: false)
        /* fail build if vendoring hasn't been done */
        nix.shell('git diff --exit-code --no-color --stat vendor/')
      } }
    }

    stage('Migration') {
      when { // https://github.com/status-im/status-go/issues/4993#issuecomment-2022685544
        expression { !isTestNightlyJob() }
      }
      steps { script {
        nix.shell('make migration-check', pure: false)
      } }
    }

    stage('Lint') {
      when {
        expression { params.RUN_LINTER }
      }
      steps { script {
        nix.shell('make lint', pure: true)
      } }
    }

    stage('Canary') {
      steps { script {
        nix.shell('make canary-test', pure: true)
      } }
    }

    stage('Unit Tests') {
      when {
        expression { params.RUN_UNIT_TESTS }
      }
      environment {
        TEST_POSTGRES_PORT = "${env.DB_PORT}"
      }
      steps { script {
        db = docker.image('postgres:9.6-alpine').withRun([
          "--name=${DB_CONT}",
          "--env=POSTGRES_HOST_AUTH_METHOD=trust",
          "--publish=${DB_PORT}:${DB_PORT}",
        ].join(' '), "-p ${DB_PORT}") { c ->
          nix.shell('make generate-handlers', pure: true)
          nix.shell('make test-unit V=1', pure: false)
        }
      } }
      post { cleanup { /* Leftover DB containers. */
        sh "docker rm ${DB_CONT} || true"
      } }
    }
  } // stages
} // pipeline

def isTestNightlyJob() { env.JOB_BASE_NAME == 'tests-nightly' }

def getDefaultUnitTestCount() { isTestNightlyJob() ? '20' : '1' }

def getDefaultUnitTestRerunFails() { isTestNightlyJob() ? false : true }

def getDefaultUnitTestUseDevelopmentLogger() { isTestNightlyJob() ? false : true }

def getDefaultUnitTestFailfast() { isTestNightlyJob() ? false : true }

def getDefaultTimeout() { isTestNightlyJob() ? 5*60 : 50 }