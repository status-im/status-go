pipeline {
  agent { label 'linux' }

  parameters {
    string(
      name: 'BRANCH',
      defaultValue: 'develop',
      description: 'Name of branch to build.'
    )
  }

  options {
    timestamps()
    disableConcurrentBuilds()
    /* Go requires a certain directory structure */
    checkoutToSubdirectory('src/github.com/status-im/status-go')
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '30',
      daysToKeepStr: '30',
    ))
  }

  environment {
    BUILD_PLATFORM = 'linux'
    STATUS_PATH    = 'src/github.com/status-im/status-go'
    CI_DIR         = "${env.STATUS_PATH}/_assets/ci"
    GOPATH         = "${env.WORKSPACE}"
    PATH           = "${env.PATH}:${env.GOPATH}/bin"
  }

  stages {
    stage('Prep') { steps { script {
      lib = load("${env.STATUS_PATH}/_assets/ci/lib.groovy")
      /* clarify what we're building */
      println("Version: ${lib.getVersion()}")
      println("Git Branch: ${lib.gitBranch()}")
      println("Git Commit: ${lib.gitCommit()}")
    } } }

    stage('Setup') { steps { dir(env.STATUS_PATH) {
      sh 'make setup-build'
    } } }

    stage('Lint') { steps { dir(env.STATUS_PATH) {
      sh 'make lint'
    } } }

    stage('Mock') { steps { dir(env.STATUS_PATH) {
      sh 'make mock'
    } } }

    stage('Dep-Ensure') { steps { dir(env.STATUS_PATH) {
      sh 'make dep-ensure'
    } } }

    stage('Canary') { steps { dir(env.STATUS_PATH) {
      sh 'make canary-test'
    } } }

    stage('Unit Tests') { steps { dir(env.STATUS_PATH) {
      sh 'make test-unit'
    } } }

    stage('Race E2E Tests') { steps { dir(env.STATUS_PATH) {
      sh 'make test-e2e-race'
    } } }
  } // stages
} // pipeline
