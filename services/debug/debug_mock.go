// Code generated by MockGen. DO NOT EDIT.
// Source: services/debug/service.go

// Package debug is a generated GoMock package.
package debug

import (
	context "context"
	hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	event "github.com/ethereum/go-ethereum/event"
	whisperv6 "github.com/ethereum/go-ethereum/whisper/whisperv6"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWhisperService is a mock of WhisperService interface
type MockWhisperService struct {
	ctrl     *gomock.Controller
	recorder *MockWhisperServiceMockRecorder
}

// MockWhisperServiceMockRecorder is the mock recorder for MockWhisperService
type MockWhisperServiceMockRecorder struct {
	mock *MockWhisperService
}

// NewMockWhisperService creates a new mock instance
func NewMockWhisperService(ctrl *gomock.Controller) *MockWhisperService {
	mock := &MockWhisperService{ctrl: ctrl}
	mock.recorder = &MockWhisperServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWhisperService) EXPECT() *MockWhisperServiceMockRecorder {
	return m.recorder
}

// SubscribeEnvelopeEvents mocks base method
func (m *MockWhisperService) SubscribeEnvelopeEvents(events chan<- whisperv6.EnvelopeEvent) event.Subscription {
	ret := m.ctrl.Call(m, "SubscribeEnvelopeEvents", events)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeEnvelopeEvents indicates an expected call of SubscribeEnvelopeEvents
func (mr *MockWhisperServiceMockRecorder) SubscribeEnvelopeEvents(events interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEnvelopeEvents", reflect.TypeOf((*MockWhisperService)(nil).SubscribeEnvelopeEvents), events)
}

// MockPoster is a mock of Poster interface
type MockPoster struct {
	ctrl     *gomock.Controller
	recorder *MockPosterMockRecorder
}

// MockPosterMockRecorder is the mock recorder for MockPoster
type MockPosterMockRecorder struct {
	mock *MockPoster
}

// NewMockPoster creates a new mock instance
func NewMockPoster(ctrl *gomock.Controller) *MockPoster {
	mock := &MockPoster{ctrl: ctrl}
	mock.recorder = &MockPosterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoster) EXPECT() *MockPosterMockRecorder {
	return m.recorder
}

// Post mocks base method
func (m *MockPoster) Post(arg0 context.Context, arg1 whisperv6.NewMessage) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "Post", arg0, arg1)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockPosterMockRecorder) Post(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockPoster)(nil).Post), arg0, arg1)
}
