// Code generated by MockGen. DO NOT EDIT.
// Source: services/wallet/onramp/types.go
//
// Generated by this command:
//
//	mockgen -package=mock_onramp -destination=services/wallet/onramp/mock/types.go -source=services/wallet/onramp/types.go
//

// Package mock_onramp is a generated GoMock package.
package mock_onramp

import (
	context "context"
	reflect "reflect"

	onramp "github.com/status-im/status-go/services/wallet/onramp"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetCryptoOnRamp mocks base method.
func (m *MockProvider) GetCryptoOnRamp(ctx context.Context) (onramp.CryptoOnRamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCryptoOnRamp", ctx)
	ret0, _ := ret[0].(onramp.CryptoOnRamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCryptoOnRamp indicates an expected call of GetCryptoOnRamp.
func (mr *MockProviderMockRecorder) GetCryptoOnRamp(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCryptoOnRamp", reflect.TypeOf((*MockProvider)(nil).GetCryptoOnRamp), ctx)
}

// GetURL mocks base method.
func (m *MockProvider) GetURL(ctx context.Context, parameters onramp.Parameters) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, parameters)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockProviderMockRecorder) GetURL(ctx, parameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockProvider)(nil).GetURL), ctx, parameters)
}

// ID mocks base method.
func (m *MockProvider) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockProviderMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockProvider)(nil).ID))
}
