// Code generated by MockGen. DO NOT EDIT.
// Source: services/wallet/thirdparty/paraswap/types.go
//
// Generated by this command:
//
//	mockgen -package=mock_paraswap -destination=services/wallet/thirdparty/paraswap/mock/types.go -source=services/wallet/thirdparty/paraswap/types.go
//

// Package mock_paraswap is a generated GoMock package.
package mock_paraswap

import (
	context "context"
	json "encoding/json"
	big "math/big"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	paraswap "github.com/status-im/status-go/services/wallet/thirdparty/paraswap"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// BuildTransaction mocks base method.
func (m *MockClientInterface) BuildTransaction(ctx context.Context, srcTokenAddress common.Address, srcTokenDecimals uint, srcAmountWei *big.Int, destTokenAddress common.Address, destTokenDecimals uint, destAmountWei *big.Int, slippageBasisPoints uint, addressFrom, addressTo common.Address, priceRoute json.RawMessage, side paraswap.SwapSide) (paraswap.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildTransaction", ctx, srcTokenAddress, srcTokenDecimals, srcAmountWei, destTokenAddress, destTokenDecimals, destAmountWei, slippageBasisPoints, addressFrom, addressTo, priceRoute, side)
	ret0, _ := ret[0].(paraswap.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildTransaction indicates an expected call of BuildTransaction.
func (mr *MockClientInterfaceMockRecorder) BuildTransaction(ctx, srcTokenAddress, srcTokenDecimals, srcAmountWei, destTokenAddress, destTokenDecimals, destAmountWei, slippageBasisPoints, addressFrom, addressTo, priceRoute, side any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildTransaction", reflect.TypeOf((*MockClientInterface)(nil).BuildTransaction), ctx, srcTokenAddress, srcTokenDecimals, srcAmountWei, destTokenAddress, destTokenDecimals, destAmountWei, slippageBasisPoints, addressFrom, addressTo, priceRoute, side)
}

// FetchPriceRoute mocks base method.
func (m *MockClientInterface) FetchPriceRoute(ctx context.Context, srcTokenAddress common.Address, srcTokenDecimals uint, destTokenAddress common.Address, destTokenDecimals uint, amountWei *big.Int, addressFrom, addressTo common.Address, side paraswap.SwapSide) (paraswap.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPriceRoute", ctx, srcTokenAddress, srcTokenDecimals, destTokenAddress, destTokenDecimals, amountWei, addressFrom, addressTo, side)
	ret0, _ := ret[0].(paraswap.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPriceRoute indicates an expected call of FetchPriceRoute.
func (mr *MockClientInterfaceMockRecorder) FetchPriceRoute(ctx, srcTokenAddress, srcTokenDecimals, destTokenAddress, destTokenDecimals, amountWei, addressFrom, addressTo, side any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPriceRoute", reflect.TypeOf((*MockClientInterface)(nil).FetchPriceRoute), ctx, srcTokenAddress, srcTokenDecimals, destTokenAddress, destTokenDecimals, amountWei, addressFrom, addressTo, side)
}

// FetchTokensList mocks base method.
func (m *MockClientInterface) FetchTokensList(ctx context.Context) ([]paraswap.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTokensList", ctx)
	ret0, _ := ret[0].([]paraswap.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTokensList indicates an expected call of FetchTokensList.
func (mr *MockClientInterfaceMockRecorder) FetchTokensList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTokensList", reflect.TypeOf((*MockClientInterface)(nil).FetchTokensList), ctx)
}

// SetChainID mocks base method.
func (m *MockClientInterface) SetChainID(chainID uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetChainID", chainID)
}

// SetChainID indicates an expected call of SetChainID.
func (mr *MockClientInterfaceMockRecorder) SetChainID(chainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChainID", reflect.TypeOf((*MockClientInterface)(nil).SetChainID), chainID)
}

// SetPartnerAddress mocks base method.
func (m *MockClientInterface) SetPartnerAddress(partnerAddress common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPartnerAddress", partnerAddress)
}

// SetPartnerAddress indicates an expected call of SetPartnerAddress.
func (mr *MockClientInterfaceMockRecorder) SetPartnerAddress(partnerAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPartnerAddress", reflect.TypeOf((*MockClientInterface)(nil).SetPartnerAddress), partnerAddress)
}

// SetPartnerFeePcnt mocks base method.
func (m *MockClientInterface) SetPartnerFeePcnt(partnerFeePcnt float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPartnerFeePcnt", partnerFeePcnt)
}

// SetPartnerFeePcnt indicates an expected call of SetPartnerFeePcnt.
func (mr *MockClientInterfaceMockRecorder) SetPartnerFeePcnt(partnerFeePcnt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPartnerFeePcnt", reflect.TypeOf((*MockClientInterface)(nil).SetPartnerFeePcnt), partnerFeePcnt)
}
