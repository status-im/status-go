// Code generated by MockGen. DO NOT EDIT.
// Source: services/wallet/collectibles/collection_data_db.go
//
// Generated by this command:
//
//	mockgen -package=mock_collectibles -destination=services/wallet/collectibles/mock/collection_data_db.go -source=services/wallet/collectibles/collection_data_db.go
//

// Package mock_collectibles is a generated GoMock package.
package mock_collectibles

import (
	reflect "reflect"

	thirdparty "github.com/status-im/status-go/services/wallet/thirdparty"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectionDataStorage is a mock of CollectionDataStorage interface.
type MockCollectionDataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionDataStorageMockRecorder
}

// MockCollectionDataStorageMockRecorder is the mock recorder for MockCollectionDataStorage.
type MockCollectionDataStorageMockRecorder struct {
	mock *MockCollectionDataStorage
}

// NewMockCollectionDataStorage creates a new mock instance.
func NewMockCollectionDataStorage(ctrl *gomock.Controller) *MockCollectionDataStorage {
	mock := &MockCollectionDataStorage{ctrl: ctrl}
	mock.recorder = &MockCollectionDataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionDataStorage) EXPECT() *MockCollectionDataStorageMockRecorder {
	return m.recorder
}

// GetData mocks base method.
func (m *MockCollectionDataStorage) GetData(ids []thirdparty.ContractID) (map[string]thirdparty.CollectionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ids)
	ret0, _ := ret[0].(map[string]thirdparty.CollectionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockCollectionDataStorageMockRecorder) GetData(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockCollectionDataStorage)(nil).GetData), ids)
}

// GetIDsNotInDB mocks base method.
func (m *MockCollectionDataStorage) GetIDsNotInDB(ids []thirdparty.ContractID) ([]thirdparty.ContractID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDsNotInDB", ids)
	ret0, _ := ret[0].([]thirdparty.ContractID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDsNotInDB indicates an expected call of GetIDsNotInDB.
func (mr *MockCollectionDataStorageMockRecorder) GetIDsNotInDB(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDsNotInDB", reflect.TypeOf((*MockCollectionDataStorage)(nil).GetIDsNotInDB), ids)
}

// GetSocialsForID mocks base method.
func (m *MockCollectionDataStorage) GetSocialsForID(contractID thirdparty.ContractID) (*thirdparty.CollectionSocials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocialsForID", contractID)
	ret0, _ := ret[0].(*thirdparty.CollectionSocials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocialsForID indicates an expected call of GetSocialsForID.
func (mr *MockCollectionDataStorageMockRecorder) GetSocialsForID(contractID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocialsForID", reflect.TypeOf((*MockCollectionDataStorage)(nil).GetSocialsForID), contractID)
}

// SetCollectionSocialsData mocks base method.
func (m *MockCollectionDataStorage) SetCollectionSocialsData(id thirdparty.ContractID, collectionSocials *thirdparty.CollectionSocials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCollectionSocialsData", id, collectionSocials)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCollectionSocialsData indicates an expected call of SetCollectionSocialsData.
func (mr *MockCollectionDataStorageMockRecorder) SetCollectionSocialsData(id, collectionSocials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCollectionSocialsData", reflect.TypeOf((*MockCollectionDataStorage)(nil).SetCollectionSocialsData), id, collectionSocials)
}

// SetData mocks base method.
func (m *MockCollectionDataStorage) SetData(collections []thirdparty.CollectionData, allowUpdate bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetData", collections, allowUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetData indicates an expected call of SetData.
func (mr *MockCollectionDataStorageMockRecorder) SetData(collections, allowUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockCollectionDataStorage)(nil).SetData), collections, allowUpdate)
}
