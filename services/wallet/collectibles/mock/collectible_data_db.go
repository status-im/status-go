// Code generated by MockGen. DO NOT EDIT.
// Source: services/wallet/collectibles/collectible_data_db.go
//
// Generated by this command:
//
//	mockgen -package=mock_collectibles -destination=services/wallet/collectibles/mock/collectible_data_db.go -source=services/wallet/collectibles/collectible_data_db.go
//

// Package mock_collectibles is a generated GoMock package.
package mock_collectibles

import (
	reflect "reflect"

	thirdparty "github.com/status-im/status-go/services/wallet/thirdparty"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectibleDataStorage is a mock of CollectibleDataStorage interface.
type MockCollectibleDataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCollectibleDataStorageMockRecorder
}

// MockCollectibleDataStorageMockRecorder is the mock recorder for MockCollectibleDataStorage.
type MockCollectibleDataStorageMockRecorder struct {
	mock *MockCollectibleDataStorage
}

// NewMockCollectibleDataStorage creates a new mock instance.
func NewMockCollectibleDataStorage(ctrl *gomock.Controller) *MockCollectibleDataStorage {
	mock := &MockCollectibleDataStorage{ctrl: ctrl}
	mock.recorder = &MockCollectibleDataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectibleDataStorage) EXPECT() *MockCollectibleDataStorageMockRecorder {
	return m.recorder
}

// GetCommunityInfo mocks base method.
func (m *MockCollectibleDataStorage) GetCommunityInfo(id thirdparty.CollectibleUniqueID) (*thirdparty.CollectibleCommunityInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityInfo", id)
	ret0, _ := ret[0].(*thirdparty.CollectibleCommunityInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityInfo indicates an expected call of GetCommunityInfo.
func (mr *MockCollectibleDataStorageMockRecorder) GetCommunityInfo(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityInfo", reflect.TypeOf((*MockCollectibleDataStorage)(nil).GetCommunityInfo), id)
}

// GetData mocks base method.
func (m *MockCollectibleDataStorage) GetData(ids []thirdparty.CollectibleUniqueID) (map[string]thirdparty.CollectibleData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ids)
	ret0, _ := ret[0].(map[string]thirdparty.CollectibleData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockCollectibleDataStorageMockRecorder) GetData(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockCollectibleDataStorage)(nil).GetData), ids)
}

// GetIDsNotInDB mocks base method.
func (m *MockCollectibleDataStorage) GetIDsNotInDB(ids []thirdparty.CollectibleUniqueID) ([]thirdparty.CollectibleUniqueID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDsNotInDB", ids)
	ret0, _ := ret[0].([]thirdparty.CollectibleUniqueID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDsNotInDB indicates an expected call of GetIDsNotInDB.
func (mr *MockCollectibleDataStorageMockRecorder) GetIDsNotInDB(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDsNotInDB", reflect.TypeOf((*MockCollectibleDataStorage)(nil).GetIDsNotInDB), ids)
}

// SetCommunityInfo mocks base method.
func (m *MockCollectibleDataStorage) SetCommunityInfo(id thirdparty.CollectibleUniqueID, communityInfo thirdparty.CollectibleCommunityInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommunityInfo", id, communityInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCommunityInfo indicates an expected call of SetCommunityInfo.
func (mr *MockCollectibleDataStorageMockRecorder) SetCommunityInfo(id, communityInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommunityInfo", reflect.TypeOf((*MockCollectibleDataStorage)(nil).SetCommunityInfo), id, communityInfo)
}

// SetData mocks base method.
func (m *MockCollectibleDataStorage) SetData(collectibles []thirdparty.CollectibleData, allowUpdate bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetData", collectibles, allowUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetData indicates an expected call of SetData.
func (mr *MockCollectibleDataStorageMockRecorder) SetData(collectibles, allowUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockCollectibleDataStorage)(nil).SetData), collectibles, allowUpdate)
}
