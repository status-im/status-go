// Code generated by MockGen. DO NOT EDIT.
// Source: services/wallet/router/fees.go

// Package router is a generated GoMock package.
package router

import (
	context "context"
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFeeManagerInterface is a mock of FeeManagerInterface interface.
type MockFeeManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFeeManagerInterfaceMockRecorder
}

// MockFeeManagerInterfaceMockRecorder is the mock recorder for MockFeeManagerInterface.
type MockFeeManagerInterfaceMockRecorder struct {
	mock *MockFeeManagerInterface
}

// NewMockFeeManagerInterface creates a new mock instance.
func NewMockFeeManagerInterface(ctrl *gomock.Controller) *MockFeeManagerInterface {
	mock := &MockFeeManagerInterface{ctrl: ctrl}
	mock.recorder = &MockFeeManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeeManagerInterface) EXPECT() *MockFeeManagerInterfaceMockRecorder {
	return m.recorder
}

// GetL1Fee mocks base method.
func (m *MockFeeManagerInterface) GetL1Fee(ctx context.Context, chainID uint64, input []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetL1Fee", ctx, chainID, input)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetL1Fee indicates an expected call of GetL1Fee.
func (mr *MockFeeManagerInterfaceMockRecorder) GetL1Fee(ctx, chainID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetL1Fee", reflect.TypeOf((*MockFeeManagerInterface)(nil).GetL1Fee), ctx, chainID, input)
}

// SuggestedFees mocks base method.
func (m *MockFeeManagerInterface) SuggestedFees(ctx context.Context, chainID uint64) (*SuggestedFees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestedFees", ctx, chainID)
	ret0, _ := ret[0].(*SuggestedFees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestedFees indicates an expected call of SuggestedFees.
func (mr *MockFeeManagerInterfaceMockRecorder) SuggestedFees(ctx, chainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestedFees", reflect.TypeOf((*MockFeeManagerInterface)(nil).SuggestedFees), ctx, chainID)
}

// TransactionEstimatedTime mocks base method.
func (m *MockFeeManagerInterface) TransactionEstimatedTime(ctx context.Context, chainID uint64, maxFeePerGas *big.Int) TransactionEstimation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionEstimatedTime", ctx, chainID, maxFeePerGas)
	ret0, _ := ret[0].(TransactionEstimation)
	return ret0
}

// TransactionEstimatedTime indicates an expected call of TransactionEstimatedTime.
func (mr *MockFeeManagerInterfaceMockRecorder) TransactionEstimatedTime(ctx, chainID, maxFeePerGas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionEstimatedTime", reflect.TypeOf((*MockFeeManagerInterface)(nil).TransactionEstimatedTime), ctx, chainID, maxFeePerGas)
}
