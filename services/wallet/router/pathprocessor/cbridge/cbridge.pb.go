// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: cbridge.proto

package cbridge

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ========== x/cbridge kv value types
// for src transfer id
// normal status flow: after sgn applied user's Send event, status is OK_TO_RELAY. then after apply Relay event
// status is SUCCESS
// can't relay flow: after apply send, status will be BAD_xxx, and there'll be no relay. so user need to InitWithdraw, status becomes
// refund_requested when sgn apply withdrawDone event, status becomes REFUND_DONE
type XferStatus int32

const (
	XferStatus_UNKNOWN XferStatus = 0 // use as default for unknown xfer
	// normal flow only has ok then success
	XferStatus_OK_TO_RELAY XferStatus = 1 // x/cbridge emit relay, waiting for sgn nodes to send sig, then sgn will submit relay tx onchain
	XferStatus_SUCCESS     XferStatus = 2 // applied onchain relay event
	// can't relay flow status
	XferStatus_BAD_LIQUIDITY XferStatus = 3 // can't complete xfer due to low dst chain liquidity or equal value dest amount is 0
	XferStatus_BAD_SLIPPAGE  XferStatus = 4 // slippage larger than user specified max
	XferStatus_BAD_TOKEN     XferStatus = 5 // src or dest token are not supported
	// refund, using withdraw flow
	XferStatus_REFUND_REQUESTED  XferStatus = 6 // user/gateway called InitWithdraw, XferRefundKey has withdraw seq num
	XferStatus_REFUND_DONE       XferStatus = 7 // applied onchain WithdrawDown event
	XferStatus_BAD_XFER_DISABLED XferStatus = 8 // asset is in config, but it is xfer_disabled, so this asset should not be used for transfer. If any transfer
	// come, we should go to refund flow.
	XferStatus_BAD_DEST_CHAIN        XferStatus = 9  // dest chain is same to src chain, relayer will ignore it.
	XferStatus_EXCEED_MAX_OUT_AMOUNT XferStatus = 10 // amount larger than max out allowance
	XferStatus_XFER_DELAYED          XferStatus = 11 // relayer has successfully called onchain relay() but the onchain contract decides that the amt is greater than its
	// delayThreshold
	XferStatus_BAD_ADDRESS XferStatus = 12
)

// Enum value maps for XferStatus.
var (
	XferStatus_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "OK_TO_RELAY",
		2:  "SUCCESS",
		3:  "BAD_LIQUIDITY",
		4:  "BAD_SLIPPAGE",
		5:  "BAD_TOKEN",
		6:  "REFUND_REQUESTED",
		7:  "REFUND_DONE",
		8:  "BAD_XFER_DISABLED",
		9:  "BAD_DEST_CHAIN",
		10: "EXCEED_MAX_OUT_AMOUNT",
		11: "XFER_DELAYED",
		12: "BAD_ADDRESS",
	}
	XferStatus_value = map[string]int32{
		"UNKNOWN":               0,
		"OK_TO_RELAY":           1,
		"SUCCESS":               2,
		"BAD_LIQUIDITY":         3,
		"BAD_SLIPPAGE":          4,
		"BAD_TOKEN":             5,
		"REFUND_REQUESTED":      6,
		"REFUND_DONE":           7,
		"BAD_XFER_DISABLED":     8,
		"BAD_DEST_CHAIN":        9,
		"EXCEED_MAX_OUT_AMOUNT": 10,
		"XFER_DELAYED":          11,
		"BAD_ADDRESS":           12,
	}
)

func (x XferStatus) Enum() *XferStatus {
	p := new(XferStatus)
	*p = x
	return p
}

func (x XferStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XferStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cbridge_proto_enumTypes[0].Descriptor()
}

func (XferStatus) Type() protoreflect.EnumType {
	return &file_cbridge_proto_enumTypes[0]
}

func (x XferStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XferStatus.Descriptor instead.
func (XferStatus) EnumDescriptor() ([]byte, []int) {
	return file_cbridge_proto_rawDescGZIP(), []int{0}
}

var File_cbridge_proto protoreflect.FileDescriptor

var file_cbridge_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2a, 0xfb, 0x01, 0x0a, 0x0a, 0x58, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44,
	0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x4c, 0x49,
	0x50, 0x50, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x42, 0x41, 0x44, 0x5f, 0x58, 0x46, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x58, 0x46, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x0c, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f, 0x63, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cbridge_proto_rawDescOnce sync.Once
	file_cbridge_proto_rawDescData = file_cbridge_proto_rawDesc
)

func file_cbridge_proto_rawDescGZIP() []byte {
	file_cbridge_proto_rawDescOnce.Do(func() {
		file_cbridge_proto_rawDescData = protoimpl.X.CompressGZIP(file_cbridge_proto_rawDescData)
	})
	return file_cbridge_proto_rawDescData
}

var file_cbridge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cbridge_proto_goTypes = []interface{}{
	(XferStatus)(0), // 0: cbridge.XferStatus
}
var file_cbridge_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cbridge_proto_init() }
func file_cbridge_proto_init() {
	if File_cbridge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cbridge_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cbridge_proto_goTypes,
		DependencyIndexes: file_cbridge_proto_depIdxs,
		EnumInfos:         file_cbridge_proto_enumTypes,
	}.Build()
	File_cbridge_proto = out.File
	file_cbridge_proto_rawDesc = nil
	file_cbridge_proto_goTypes = nil
	file_cbridge_proto_depIdxs = nil
}
