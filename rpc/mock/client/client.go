// Code generated by MockGen. DO NOT EDIT.
// Source: rpc/client.go

// Package mock_rpcclient is a generated GoMock package.
package mock_rpcclient

import (
	context "context"
	reflect "reflect"

	chain "github.com/status-im/status-go/rpc/chain"
	network "github.com/status-im/status-go/rpc/network"
	common "github.com/status-im/status-go/services/wallet/common"
	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// AbstractEthClient mocks base method.
func (m *MockClientInterface) AbstractEthClient(chainID common.ChainID) (chain.BatchCallClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbstractEthClient", chainID)
	ret0, _ := ret[0].(chain.BatchCallClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbstractEthClient indicates an expected call of AbstractEthClient.
func (mr *MockClientInterfaceMockRecorder) AbstractEthClient(chainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbstractEthClient", reflect.TypeOf((*MockClientInterface)(nil).AbstractEthClient), chainID)
}

// Call mocks base method.
func (m *MockClientInterface) Call(result interface{}, chainID uint64, method string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{result, chainID, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockClientInterfaceMockRecorder) Call(result, chainID, method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{result, chainID, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClientInterface)(nil).Call), varargs...)
}

// CallContext mocks base method.
func (m *MockClientInterface) CallContext(context context.Context, result interface{}, chainID uint64, method string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{context, result, chainID, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CallContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallContext indicates an expected call of CallContext.
func (mr *MockClientInterfaceMockRecorder) CallContext(context, result, chainID, method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{context, result, chainID, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContext", reflect.TypeOf((*MockClientInterface)(nil).CallContext), varargs...)
}

// CallRaw mocks base method.
func (m *MockClientInterface) CallRaw(body string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallRaw", body)
	ret0, _ := ret[0].(string)
	return ret0
}

// CallRaw indicates an expected call of CallRaw.
func (mr *MockClientInterfaceMockRecorder) CallRaw(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallRaw", reflect.TypeOf((*MockClientInterface)(nil).CallRaw), body)
}

// EthClient mocks base method.
func (m *MockClientInterface) EthClient(chainID uint64) (chain.ClientInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthClient", chainID)
	ret0, _ := ret[0].(chain.ClientInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthClient indicates an expected call of EthClient.
func (mr *MockClientInterfaceMockRecorder) EthClient(chainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthClient", reflect.TypeOf((*MockClientInterface)(nil).EthClient), chainID)
}

// EthClients mocks base method.
func (m *MockClientInterface) EthClients(chainIDs []uint64) (map[uint64]chain.ClientInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthClients", chainIDs)
	ret0, _ := ret[0].(map[uint64]chain.ClientInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthClients indicates an expected call of EthClients.
func (mr *MockClientInterfaceMockRecorder) EthClients(chainIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthClients", reflect.TypeOf((*MockClientInterface)(nil).EthClients), chainIDs)
}

// GetNetworkManager mocks base method.
func (m *MockClientInterface) GetNetworkManager() *network.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkManager")
	ret0, _ := ret[0].(*network.Manager)
	return ret0
}

// GetNetworkManager indicates an expected call of GetNetworkManager.
func (mr *MockClientInterfaceMockRecorder) GetNetworkManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkManager", reflect.TypeOf((*MockClientInterface)(nil).GetNetworkManager))
}
