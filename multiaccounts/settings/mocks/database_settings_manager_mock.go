// Code generated by MockGen. DO NOT EDIT.
// Source: multiaccounts/settings/database_settings_manager.go
//
// Generated by this command:
//
//	mockgen -package=mocksettings -destination=multiaccounts/settings/mocks/database_settings_manager_mock.go -source=multiaccounts/settings/database_settings_manager.go
//

// Package mocksettings is a generated GoMock package.
package mocksettings

import (
	sql "database/sql"
	json "encoding/json"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/status-im/status-go/eth-node/types"
	settings "github.com/status-im/status-go/multiaccounts/settings"
	params "github.com/status-im/status-go/params"
)

// MockDatabaseSettingsManager is a mock of DatabaseSettingsManager interface.
type MockDatabaseSettingsManager struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseSettingsManagerMockRecorder
}

// MockDatabaseSettingsManagerMockRecorder is the mock recorder for MockDatabaseSettingsManager.
type MockDatabaseSettingsManagerMockRecorder struct {
	mock *MockDatabaseSettingsManager
}

// NewMockDatabaseSettingsManager creates a new mock instance.
func NewMockDatabaseSettingsManager(ctrl *gomock.Controller) *MockDatabaseSettingsManager {
	mock := &MockDatabaseSettingsManager{ctrl: ctrl}
	mock.recorder = &MockDatabaseSettingsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseSettingsManager) EXPECT() *MockDatabaseSettingsManagerMockRecorder {
	return m.recorder
}

// AutoMessageEnabled mocks base method.
func (m *MockDatabaseSettingsManager) AutoMessageEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoMessageEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoMessageEnabled indicates an expected call of AutoMessageEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) AutoMessageEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMessageEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).AutoMessageEnabled))
}

// BackupEnabled mocks base method.
func (m *MockDatabaseSettingsManager) BackupEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupEnabled indicates an expected call of BackupEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) BackupEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).BackupEnabled))
}

// BackupFetched mocks base method.
func (m *MockDatabaseSettingsManager) BackupFetched() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupFetched")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupFetched indicates an expected call of BackupFetched.
func (mr *MockDatabaseSettingsManagerMockRecorder) BackupFetched() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupFetched", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).BackupFetched))
}

// Bio mocks base method.
func (m *MockDatabaseSettingsManager) Bio() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bio")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bio indicates an expected call of Bio.
func (mr *MockDatabaseSettingsManagerMockRecorder) Bio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bio", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).Bio))
}

// CanSyncOnMobileNetwork mocks base method.
func (m *MockDatabaseSettingsManager) CanSyncOnMobileNetwork() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSyncOnMobileNetwork")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanSyncOnMobileNetwork indicates an expected call of CanSyncOnMobileNetwork.
func (mr *MockDatabaseSettingsManagerMockRecorder) CanSyncOnMobileNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSyncOnMobileNetwork", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).CanSyncOnMobileNetwork))
}

// CanUseMailservers mocks base method.
func (m *MockDatabaseSettingsManager) CanUseMailservers() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanUseMailservers")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanUseMailservers indicates an expected call of CanUseMailservers.
func (mr *MockDatabaseSettingsManagerMockRecorder) CanUseMailservers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanUseMailservers", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).CanUseMailservers))
}

// CreateSettings mocks base method.
func (m *MockDatabaseSettingsManager) CreateSettings(s settings.Settings, n params.NodeConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSettings", s, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSettings indicates an expected call of CreateSettings.
func (mr *MockDatabaseSettingsManagerMockRecorder) CreateSettings(s, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSettings", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).CreateSettings), s, n)
}

// DeleteMnemonic mocks base method.
func (m *MockDatabaseSettingsManager) DeleteMnemonic() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMnemonic")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMnemonic indicates an expected call of DeleteMnemonic.
func (mr *MockDatabaseSettingsManagerMockRecorder) DeleteMnemonic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMnemonic", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).DeleteMnemonic))
}

// DeviceName mocks base method.
func (m *MockDatabaseSettingsManager) DeviceName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceName indicates an expected call of DeviceName.
func (mr *MockDatabaseSettingsManagerMockRecorder) DeviceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceName", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).DeviceName))
}

// DisplayName mocks base method.
func (m *MockDatabaseSettingsManager) DisplayName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayName indicates an expected call of DisplayName.
func (mr *MockDatabaseSettingsManagerMockRecorder) DisplayName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayName", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).DisplayName))
}

// ENSName mocks base method.
func (m *MockDatabaseSettingsManager) ENSName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ENSName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ENSName indicates an expected call of ENSName.
func (mr *MockDatabaseSettingsManagerMockRecorder) ENSName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ENSName", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).ENSName))
}

// GetChangesSubscriptions mocks base method.
func (m *MockDatabaseSettingsManager) GetChangesSubscriptions() []chan *settings.SyncSettingField {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangesSubscriptions")
	ret0, _ := ret[0].([]chan *settings.SyncSettingField)
	return ret0
}

// GetChangesSubscriptions indicates an expected call of GetChangesSubscriptions.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetChangesSubscriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangesSubscriptions", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetChangesSubscriptions))
}

// GetCollectibleGroupByCollection mocks base method.
func (m *MockDatabaseSettingsManager) GetCollectibleGroupByCollection() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectibleGroupByCollection")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectibleGroupByCollection indicates an expected call of GetCollectibleGroupByCollection.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetCollectibleGroupByCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectibleGroupByCollection", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetCollectibleGroupByCollection))
}

// GetCollectibleGroupByCommunity mocks base method.
func (m *MockDatabaseSettingsManager) GetCollectibleGroupByCommunity() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectibleGroupByCommunity")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectibleGroupByCommunity indicates an expected call of GetCollectibleGroupByCommunity.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetCollectibleGroupByCommunity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectibleGroupByCommunity", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetCollectibleGroupByCommunity))
}

// GetCurrency mocks base method.
func (m *MockDatabaseSettingsManager) GetCurrency() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetCurrency))
}

// GetCurrentStatus mocks base method.
func (m *MockDatabaseSettingsManager) GetCurrentStatus(status any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentStatus", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCurrentStatus indicates an expected call of GetCurrentStatus.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetCurrentStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentStatus", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetCurrentStatus), status)
}

// GetDB mocks base method.
func (m *MockDatabaseSettingsManager) GetDB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetDB))
}

// GetDappsAddress mocks base method.
func (m *MockDatabaseSettingsManager) GetDappsAddress() (types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDappsAddress")
	ret0, _ := ret[0].(types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDappsAddress indicates an expected call of GetDappsAddress.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetDappsAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDappsAddress", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetDappsAddress))
}

// GetDefaultSyncPeriod mocks base method.
func (m *MockDatabaseSettingsManager) GetDefaultSyncPeriod() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultSyncPeriod")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultSyncPeriod indicates an expected call of GetDefaultSyncPeriod.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetDefaultSyncPeriod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultSyncPeriod", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetDefaultSyncPeriod))
}

// GetEIP1581Address mocks base method.
func (m *MockDatabaseSettingsManager) GetEIP1581Address() (types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEIP1581Address")
	ret0, _ := ret[0].(types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEIP1581Address indicates an expected call of GetEIP1581Address.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetEIP1581Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEIP1581Address", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetEIP1581Address))
}

// GetFleet mocks base method.
func (m *MockDatabaseSettingsManager) GetFleet() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFleet")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFleet indicates an expected call of GetFleet.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetFleet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleet", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetFleet))
}

// GetInstalledStickerPacks mocks base method.
func (m *MockDatabaseSettingsManager) GetInstalledStickerPacks() (*json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledStickerPacks")
	ret0, _ := ret[0].(*json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledStickerPacks indicates an expected call of GetInstalledStickerPacks.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetInstalledStickerPacks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledStickerPacks", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetInstalledStickerPacks))
}

// GetIsGoerliEnabled mocks base method.
func (m *MockDatabaseSettingsManager) GetIsGoerliEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsGoerliEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIsGoerliEnabled indicates an expected call of GetIsGoerliEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetIsGoerliEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsGoerliEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetIsGoerliEnabled))
}

// GetLatestDerivedPath mocks base method.
func (m *MockDatabaseSettingsManager) GetLatestDerivedPath() (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestDerivedPath")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestDerivedPath indicates an expected call of GetLatestDerivedPath.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetLatestDerivedPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestDerivedPath", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetLatestDerivedPath))
}

// GetMasterAddress mocks base method.
func (m *MockDatabaseSettingsManager) GetMasterAddress() (types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterAddress")
	ret0, _ := ret[0].(types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterAddress indicates an expected call of GetMasterAddress.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetMasterAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterAddress", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetMasterAddress))
}

// GetMessagesFromContactsOnly mocks base method.
func (m *MockDatabaseSettingsManager) GetMessagesFromContactsOnly() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesFromContactsOnly")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesFromContactsOnly indicates an expected call of GetMessagesFromContactsOnly.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetMessagesFromContactsOnly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesFromContactsOnly", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetMessagesFromContactsOnly))
}

// GetMnemonicWasNotShown mocks base method.
func (m *MockDatabaseSettingsManager) GetMnemonicWasNotShown() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMnemonicWasNotShown")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMnemonicWasNotShown indicates an expected call of GetMnemonicWasNotShown.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetMnemonicWasNotShown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMnemonicWasNotShown", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetMnemonicWasNotShown))
}

// GetNotificationsEnabled mocks base method.
func (m *MockDatabaseSettingsManager) GetNotificationsEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsEnabled indicates an expected call of GetNotificationsEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetNotificationsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetNotificationsEnabled))
}

// GetNotifier mocks base method.
func (m *MockDatabaseSettingsManager) GetNotifier() settings.Notifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifier")
	ret0, _ := ret[0].(settings.Notifier)
	return ret0
}

// GetNotifier indicates an expected call of GetNotifier.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetNotifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifier", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetNotifier))
}

// GetPeerSyncingEnabled mocks base method.
func (m *MockDatabaseSettingsManager) GetPeerSyncingEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerSyncingEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerSyncingEnabled indicates an expected call of GetPeerSyncingEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetPeerSyncingEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerSyncingEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetPeerSyncingEnabled))
}

// GetPendingStickerPacks mocks base method.
func (m *MockDatabaseSettingsManager) GetPendingStickerPacks() (*json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingStickerPacks")
	ret0, _ := ret[0].(*json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingStickerPacks indicates an expected call of GetPendingStickerPacks.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetPendingStickerPacks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingStickerPacks", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetPendingStickerPacks))
}

// GetPinnedMailservers mocks base method.
func (m *MockDatabaseSettingsManager) GetPinnedMailservers() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinnedMailservers")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinnedMailservers indicates an expected call of GetPinnedMailservers.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetPinnedMailservers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinnedMailservers", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetPinnedMailservers))
}

// GetPreferredUsername mocks base method.
func (m *MockDatabaseSettingsManager) GetPreferredUsername() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferredUsername")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferredUsername indicates an expected call of GetPreferredUsername.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetPreferredUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferredUsername", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetPreferredUsername))
}

// GetProfilePicturesShowTo mocks base method.
func (m *MockDatabaseSettingsManager) GetProfilePicturesShowTo() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilePicturesShowTo")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilePicturesShowTo indicates an expected call of GetProfilePicturesShowTo.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetProfilePicturesShowTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilePicturesShowTo", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetProfilePicturesShowTo))
}

// GetProfilePicturesVisibility mocks base method.
func (m *MockDatabaseSettingsManager) GetProfilePicturesVisibility() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilePicturesVisibility")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilePicturesVisibility indicates an expected call of GetProfilePicturesVisibility.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetProfilePicturesVisibility() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilePicturesVisibility", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetProfilePicturesVisibility))
}

// GetPublicKey mocks base method.
func (m *MockDatabaseSettingsManager) GetPublicKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetPublicKey))
}

// GetRecentStickers mocks base method.
func (m *MockDatabaseSettingsManager) GetRecentStickers() (*json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentStickers")
	ret0, _ := ret[0].(*json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentStickers indicates an expected call of GetRecentStickers.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetRecentStickers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentStickers", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetRecentStickers))
}

// GetSettingLastSynced mocks base method.
func (m *MockDatabaseSettingsManager) GetSettingLastSynced(setting settings.SettingField) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingLastSynced", setting)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingLastSynced indicates an expected call of GetSettingLastSynced.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetSettingLastSynced(setting any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingLastSynced", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetSettingLastSynced), setting)
}

// GetSettings mocks base method.
func (m *MockDatabaseSettingsManager) GetSettings() (settings.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings")
	ret0, _ := ret[0].(settings.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetSettings))
}

// GetSyncQueue mocks base method.
func (m *MockDatabaseSettingsManager) GetSyncQueue() chan settings.SyncSettingField {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncQueue")
	ret0, _ := ret[0].(chan settings.SyncSettingField)
	return ret0
}

// GetSyncQueue indicates an expected call of GetSyncQueue.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetSyncQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncQueue", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetSyncQueue))
}

// GetTelemetryServerURL mocks base method.
func (m *MockDatabaseSettingsManager) GetTelemetryServerURL() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelemetryServerURL")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTelemetryServerURL indicates an expected call of GetTelemetryServerURL.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetTelemetryServerURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetryServerURL", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetTelemetryServerURL))
}

// GetTestNetworksEnabled mocks base method.
func (m *MockDatabaseSettingsManager) GetTestNetworksEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestNetworksEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestNetworksEnabled indicates an expected call of GetTestNetworksEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetTestNetworksEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestNetworksEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetTestNetworksEnabled))
}

// GetTokenGroupByCommunity mocks base method.
func (m *MockDatabaseSettingsManager) GetTokenGroupByCommunity() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenGroupByCommunity")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenGroupByCommunity indicates an expected call of GetTokenGroupByCommunity.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetTokenGroupByCommunity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenGroupByCommunity", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetTokenGroupByCommunity))
}

// GetWalletRootAddress mocks base method.
func (m *MockDatabaseSettingsManager) GetWalletRootAddress() (types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletRootAddress")
	ret0, _ := ret[0].(types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletRootAddress indicates an expected call of GetWalletRootAddress.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetWalletRootAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletRootAddress", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetWalletRootAddress))
}

// GifAPIKey mocks base method.
func (m *MockDatabaseSettingsManager) GifAPIKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GifAPIKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GifAPIKey indicates an expected call of GifAPIKey.
func (mr *MockDatabaseSettingsManagerMockRecorder) GifAPIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GifAPIKey", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GifAPIKey))
}

// GifFavorites mocks base method.
func (m *MockDatabaseSettingsManager) GifFavorites() (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GifFavorites")
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GifFavorites indicates an expected call of GifFavorites.
func (mr *MockDatabaseSettingsManagerMockRecorder) GifFavorites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GifFavorites", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GifFavorites))
}

// GifRecents mocks base method.
func (m *MockDatabaseSettingsManager) GifRecents() (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GifRecents")
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GifRecents indicates an expected call of GifRecents.
func (mr *MockDatabaseSettingsManagerMockRecorder) GifRecents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GifRecents", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GifRecents))
}

// LastBackup mocks base method.
func (m *MockDatabaseSettingsManager) LastBackup() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastBackup")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastBackup indicates an expected call of LastBackup.
func (mr *MockDatabaseSettingsManagerMockRecorder) LastBackup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBackup", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).LastBackup))
}

// Mnemonic mocks base method.
func (m *MockDatabaseSettingsManager) Mnemonic() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mnemonic")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mnemonic indicates an expected call of Mnemonic.
func (mr *MockDatabaseSettingsManagerMockRecorder) Mnemonic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mnemonic", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).Mnemonic))
}

// MnemonicRemoved mocks base method.
func (m *MockDatabaseSettingsManager) MnemonicRemoved() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MnemonicRemoved")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MnemonicRemoved indicates an expected call of MnemonicRemoved.
func (mr *MockDatabaseSettingsManagerMockRecorder) MnemonicRemoved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MnemonicRemoved", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).MnemonicRemoved))
}

// MnemonicWasShown mocks base method.
func (m *MockDatabaseSettingsManager) MnemonicWasShown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MnemonicWasShown")
	ret0, _ := ret[0].(error)
	return ret0
}

// MnemonicWasShown indicates an expected call of MnemonicWasShown.
func (mr *MockDatabaseSettingsManagerMockRecorder) MnemonicWasShown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MnemonicWasShown", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).MnemonicWasShown))
}

// MutualContactEnabled mocks base method.
func (m *MockDatabaseSettingsManager) MutualContactEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutualContactEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MutualContactEnabled indicates an expected call of MutualContactEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) MutualContactEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutualContactEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).MutualContactEnabled))
}

// ProfileMigrationNeeded mocks base method.
func (m *MockDatabaseSettingsManager) ProfileMigrationNeeded() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProfileMigrationNeeded")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProfileMigrationNeeded indicates an expected call of ProfileMigrationNeeded.
func (mr *MockDatabaseSettingsManagerMockRecorder) ProfileMigrationNeeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProfileMigrationNeeded", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).ProfileMigrationNeeded))
}

// SaveSetting mocks base method.
func (m *MockDatabaseSettingsManager) SaveSetting(setting string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSetting", setting, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSetting indicates an expected call of SaveSetting.
func (mr *MockDatabaseSettingsManagerMockRecorder) SaveSetting(setting, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSetting", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SaveSetting), setting, value)
}

// SaveSettingField mocks base method.
func (m *MockDatabaseSettingsManager) SaveSettingField(sf settings.SettingField, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSettingField", sf, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSettingField indicates an expected call of SaveSettingField.
func (mr *MockDatabaseSettingsManagerMockRecorder) SaveSettingField(sf, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSettingField", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SaveSettingField), sf, value)
}

// SaveSyncSetting mocks base method.
func (m *MockDatabaseSettingsManager) SaveSyncSetting(setting settings.SettingField, value any, clock uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSyncSetting", setting, value, clock)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSyncSetting indicates an expected call of SaveSyncSetting.
func (mr *MockDatabaseSettingsManagerMockRecorder) SaveSyncSetting(setting, value, clock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSyncSetting", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SaveSyncSetting), setting, value, clock)
}

// SetBackupFetched mocks base method.
func (m *MockDatabaseSettingsManager) SetBackupFetched(fetched bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBackupFetched", fetched)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBackupFetched indicates an expected call of SetBackupFetched.
func (mr *MockDatabaseSettingsManagerMockRecorder) SetBackupFetched(fetched any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackupFetched", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SetBackupFetched), fetched)
}

// SetLastBackup mocks base method.
func (m *MockDatabaseSettingsManager) SetLastBackup(time uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastBackup", time)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastBackup indicates an expected call of SetLastBackup.
func (mr *MockDatabaseSettingsManagerMockRecorder) SetLastBackup(time any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastBackup", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SetLastBackup), time)
}

// SetPeerSyncingEnabled mocks base method.
func (m *MockDatabaseSettingsManager) SetPeerSyncingEnabled(value bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPeerSyncingEnabled", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPeerSyncingEnabled indicates an expected call of SetPeerSyncingEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) SetPeerSyncingEnabled(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPeerSyncingEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SetPeerSyncingEnabled), value)
}

// SetPinnedMailservers mocks base method.
func (m *MockDatabaseSettingsManager) SetPinnedMailservers(mailservers map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPinnedMailservers", mailservers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPinnedMailservers indicates an expected call of SetPinnedMailservers.
func (mr *MockDatabaseSettingsManagerMockRecorder) SetPinnedMailservers(mailservers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPinnedMailservers", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SetPinnedMailservers), mailservers)
}

// SetSettingLastSynced mocks base method.
func (m *MockDatabaseSettingsManager) SetSettingLastSynced(setting settings.SettingField, clock uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSettingLastSynced", setting, clock)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSettingLastSynced indicates an expected call of SetSettingLastSynced.
func (mr *MockDatabaseSettingsManagerMockRecorder) SetSettingLastSynced(setting, clock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSettingLastSynced", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SetSettingLastSynced), setting, clock)
}

// SetSettingsNotifier mocks base method.
func (m *MockDatabaseSettingsManager) SetSettingsNotifier(n settings.Notifier) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSettingsNotifier", n)
}

// SetSettingsNotifier indicates an expected call of SetSettingsNotifier.
func (mr *MockDatabaseSettingsManagerMockRecorder) SetSettingsNotifier(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSettingsNotifier", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SetSettingsNotifier), n)
}

// SetSyncingOnMobileNetwork mocks base method.
func (m *MockDatabaseSettingsManager) SetSyncingOnMobileNetwork(value bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSyncingOnMobileNetwork", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSyncingOnMobileNetwork indicates an expected call of SetSyncingOnMobileNetwork.
func (mr *MockDatabaseSettingsManagerMockRecorder) SetSyncingOnMobileNetwork(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSyncingOnMobileNetwork", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SetSyncingOnMobileNetwork), value)
}

// SetTokenGroupByCommunity mocks base method.
func (m *MockDatabaseSettingsManager) SetTokenGroupByCommunity(value bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTokenGroupByCommunity", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTokenGroupByCommunity indicates an expected call of SetTokenGroupByCommunity.
func (mr *MockDatabaseSettingsManagerMockRecorder) SetTokenGroupByCommunity(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTokenGroupByCommunity", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SetTokenGroupByCommunity), value)
}

// SetUseMailservers mocks base method.
func (m *MockDatabaseSettingsManager) SetUseMailservers(value bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUseMailservers", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUseMailservers indicates an expected call of SetUseMailservers.
func (mr *MockDatabaseSettingsManagerMockRecorder) SetUseMailservers(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUseMailservers", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SetUseMailservers), value)
}

// ShouldBroadcastUserStatus mocks base method.
func (m *MockDatabaseSettingsManager) ShouldBroadcastUserStatus() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBroadcastUserStatus")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldBroadcastUserStatus indicates an expected call of ShouldBroadcastUserStatus.
func (mr *MockDatabaseSettingsManagerMockRecorder) ShouldBroadcastUserStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBroadcastUserStatus", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).ShouldBroadcastUserStatus))
}

// SubscribeToChanges mocks base method.
func (m *MockDatabaseSettingsManager) SubscribeToChanges() chan *settings.SyncSettingField {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToChanges")
	ret0, _ := ret[0].(chan *settings.SyncSettingField)
	return ret0
}

// SubscribeToChanges indicates an expected call of SubscribeToChanges.
func (mr *MockDatabaseSettingsManagerMockRecorder) SubscribeToChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToChanges", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).SubscribeToChanges))
}

// URLUnfurlingMode mocks base method.
func (m *MockDatabaseSettingsManager) URLUnfurlingMode() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLUnfurlingMode")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLUnfurlingMode indicates an expected call of URLUnfurlingMode.
func (mr *MockDatabaseSettingsManagerMockRecorder) URLUnfurlingMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLUnfurlingMode", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).URLUnfurlingMode))
}
