// Code generated by MockGen. DO NOT EDIT.
// Source: database_settings_manager.go

// Package mock_settings is a generated GoMock package.
package mocksettings

import (
	"database/sql"
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.com/status-im/status-go/eth-node/types"
)

// MockDatabaseSettingsManager is a mock of DatabaseSettingsManager interface.
type MockDatabaseSettingsManager struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseSettingsManagerMockRecorder
}

// MockDatabaseSettingsManagerMockRecorder is the mock recorder for MockDatabaseSettingsManager.
type MockDatabaseSettingsManagerMockRecorder struct {
	mock *MockDatabaseSettingsManager
}

// NewMockDatabaseSettingsManager creates a new mock instance.
func NewMockDatabaseSettingsManager(ctrl *gomock.Controller) *MockDatabaseSettingsManager {
	mock := &MockDatabaseSettingsManager{ctrl: ctrl}
	mock.recorder = &MockDatabaseSettingsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseSettingsManager) EXPECT() *MockDatabaseSettingsManagerMockRecorder {
	return m.recorder
}

// AutoMessageEnabled mocks base method.
func (m *MockDatabaseSettingsManager) AutoMessageEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoMessageEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoMessageEnabled indicates an expected call of AutoMessageEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) AutoMessageEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMessageEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).AutoMessageEnabled))
}

// BackupEnabled mocks base method.
func (m *MockDatabaseSettingsManager) BackupEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupEnabled indicates an expected call of BackupEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) BackupEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).BackupEnabled))
}

// BackupFetched mocks base method.
func (m *MockDatabaseSettingsManager) BackupFetched() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupFetched")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupFetched indicates an expected call of BackupFetched.
func (mr *MockDatabaseSettingsManagerMockRecorder) BackupFetched() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupFetched", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).BackupFetched))
}

// Bio mocks base method.
func (m *MockDatabaseSettingsManager) Bio() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bio")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bio indicates an expected call of Bio.
func (mr *MockDatabaseSettingsManagerMockRecorder) Bio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bio", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).Bio))
}

// CanSyncOnMobileNetwork mocks base method.
func (m *MockDatabaseSettingsManager) CanSyncOnMobileNetwork() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSyncOnMobileNetwork")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanSyncOnMobileNetwork indicates an expected call of CanSyncOnMobileNetwork.
func (mr *MockDatabaseSettingsManagerMockRecorder) CanSyncOnMobileNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSyncOnMobileNetwork", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).CanSyncOnMobileNetwork))
}

// CanUseMailservers mocks base method.
func (m *MockDatabaseSettingsManager) CanUseMailservers() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanUseMailservers")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanUseMailservers indicates an expected call of CanUseMailservers.
func (mr *MockDatabaseSettingsManagerMockRecorder) CanUseMailservers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanUseMailservers", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).CanUseMailservers))
}

// DeviceName mocks base method.
func (m *MockDatabaseSettingsManager) DeviceName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceName indicates an expected call of DeviceName.
func (mr *MockDatabaseSettingsManagerMockRecorder) DeviceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceName", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).DeviceName))
}

// DisplayName mocks base method.
func (m *MockDatabaseSettingsManager) DisplayName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayName indicates an expected call of DisplayName.
func (mr *MockDatabaseSettingsManagerMockRecorder) DisplayName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayName", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).DisplayName))
}

// ENSName mocks base method.
func (m *MockDatabaseSettingsManager) ENSName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ENSName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ENSName indicates an expected call of ENSName.
func (mr *MockDatabaseSettingsManagerMockRecorder) ENSName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ENSName", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).ENSName))
}

// GetCurrency mocks base method.
func (m *MockDatabaseSettingsManager) GetCurrency() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetCurrency))
}

// GetEIP1581Address mocks base method.
func (m *MockDatabaseSettingsManager) GetEIP1581Address() (types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEIP1581Address")
	ret0, _ := ret[0].(types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEIP1581Address indicates an expected call of GetEIP1581Address.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetEIP1581Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEIP1581Address", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetEIP1581Address))
}

// GetInstalledStickerPacks mocks base method.
func (m *MockDatabaseSettingsManager) GetInstalledStickerPacks() (*json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledStickerPacks")
	ret0, _ := ret[0].(*json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledStickerPacks indicates an expected call of GetInstalledStickerPacks.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetInstalledStickerPacks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledStickerPacks", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetInstalledStickerPacks))
}

// GetIsGoerliEnabled mocks base method.
func (m *MockDatabaseSettingsManager) GetIsGoerliEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsGoerliEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIsGoerliEnabled indicates an expected call of GetIsGoerliEnabled.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetIsGoerliEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsGoerliEnabled", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetIsGoerliEnabled))
}

// GetMasterAddress mocks base method.
func (m *MockDatabaseSettingsManager) GetMasterAddress() (types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterAddress")
	ret0, _ := ret[0].(types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterAddress indicates an expected call of GetMasterAddress.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetMasterAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterAddress", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetMasterAddress))
}

// GetMnemonicWasNotShown mocks base method.
func (m *MockDatabaseSettingsManager) GetMnemonicWasNotShown() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMnemonicWasNotShown")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMnemonicWasNotShown indicates an expected call of GetMnemonicWasNotShown.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetMnemonicWasNotShown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMnemonicWasNotShown", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetMnemonicWasNotShown))
}

// GetPendingStickerPacks mocks base method.
func (m *MockDatabaseSettingsManager) GetPendingStickerPacks() (*json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingStickerPacks")
	ret0, _ := ret[0].(*json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingStickerPacks indicates an expected call of GetPendingStickerPacks.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetPendingStickerPacks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingStickerPacks", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetPendingStickerPacks))
}

// GetPreferredUsername mocks base method.
func (m *MockDatabaseSettingsManager) GetPreferredUsername() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferredUsername")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferredUsername indicates an expected call of GetPreferredUsername.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetPreferredUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferredUsername", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetPreferredUsername))
}

// GetRecentStickers mocks base method.
func (m *MockDatabaseSettingsManager) GetRecentStickers() (*json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentStickers")
	ret0, _ := ret[0].(*json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentStickers indicates an expected call of GetRecentStickers.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetRecentStickers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentStickers", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetRecentStickers))
}

// GetLastUsedWalletAccountNameIndexSuggestion mocks base method.
func (m *MockDatabaseSettingsManager) GetLastUsedWalletAccountNameIndexSuggestion() (result int64, err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUsedWalletAccountNameIndexSuggestion")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUsedWalletAccountNameIndexSuggestion indicates an expected call of GetLastUsedWalletAccountNameIndexSuggestion.
func (mr *MockDatabaseSettingsManagerMockRecorder) GetLastUsedWalletAccountNameIndexSuggestion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUsedWalletAccountNameIndexSuggestion", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).GetLastUsedWalletAccountNameIndexSuggestion))
}

// IncrementLastUsedWalletAccountNameIndexSuggestion mocks base method.
func (m *MockDatabaseSettingsManager) IncrementLastUsedWalletAccountNameIndexSuggestion(tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementLastUsedWalletAccountNameIndexSuggestion")
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementLastUsedWalletAccountNameIndexSuggestion indicates an expected call of IncrementLastUsedWalletAccountNameIndexSuggestion.
func (mr *MockDatabaseSettingsManagerMockRecorder) IncrementLastUsedWalletAccountNameIndexSuggestion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementLastUsedWalletAccountNameIndexSuggestion", reflect.TypeOf((*MockDatabaseSettingsManager)(nil).IncrementLastUsedWalletAccountNameIndexSuggestion))
}