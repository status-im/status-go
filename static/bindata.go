// Code generated by go-bindata.
// sources:
// config/public-chain-accounts.json
// config/status-chain-accounts.json
// config/status-chain-genesis.json
// config/test-data.json
// keys/bootnode.key
// keys/firebaseauthkey
// keys/test-account1-status-chain.pk
// keys/test-account1.pk
// keys/test-account2-status-chain.pk
// keys/test-account2.pk
// keys/test-account3-before-eip55.pk
// keys/wnodepassword
// testdata/jail/commands.js
// testdata/jail/status.js
// testdata/jail/tx-send/context-no-message-id.js
// testdata/jail/tx-send/message-id-no-context.js
// testdata/jail/tx-send/no-message-id-or-context.js
// testdata/jail/tx-send/tx-send.js
// testdata/node/test.sol
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configPublicChainAccountsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\x31\x0e\xc2\x30\x0c\x40\xd1\x3d\xa7\xb0\x32\x33\xc4\x4e\x9d\xd8\xdd\x2a\xd4\xde\x23\xd8\xe9\x08\x12\x05\x09\x09\xf5\xee\xa8\x4c\x2c\x8c\xff\x0f\xef\x1d\x00\xe2\x64\x76\x7b\x5e\x1f\x18\x47\x38\xfa\x38\xee\xf7\xbe\x6d\x71\x84\x98\x5e\x4b\xe6\x39\x65\x62\x6f\x2e\xb5\x53\x29\x68\x43\x5f\x94\xd1\x59\x2a\xd5\x5e\x9c\x25\x3b\x5b\x0c\x00\xfb\xe9\x07\xa4\x3f\xe0\x94\x1a\x2a\x11\x52\x11\xd7\xac\x96\x9b\x56\xba\xac\x3c\x14\xf4\x33\xa6\xb5\xaa\xa4\x59\x70\xf8\x82\x61\x0f\x9f\x00\x00\x00\xff\xff\x45\x4e\x11\xf0\xa5\x00\x00\x00")

func configPublicChainAccountsJsonBytes() ([]byte, error) {
	return bindataRead(
		_configPublicChainAccountsJson,
		"config/public-chain-accounts.json",
	)
}

func configPublicChainAccountsJson() (*asset, error) {
	bytes, err := configPublicChainAccountsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/public-chain-accounts.json", size: 165, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configStatusChainAccountsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcd\xb1\x6a\xc4\x30\x0c\xc6\xf1\x3d\x4f\x61\x3c\xdf\xa0\x48\xb2\x62\xdf\x96\x5c\x93\xb9\xaf\x60\x59\xf6\xd8\x2b\xe7\x96\x16\xca\xbd\x7b\x09\xa5\xd0\x25\x94\xdb\xa4\x0f\xfe\xfc\xbe\x06\xe7\xfc\x5c\xca\xf5\xfd\xe5\x6d\xf4\x67\xb7\xff\xfb\x62\x76\xab\xbd\xfb\xb3\xf3\xf0\xa9\xdb\x28\x5c\x32\xf1\x48\x28\x19\x48\x03\x4f\x05\xc2\x42\x4c\x8a\x2b\x8e\x75\x9b\x2b\xb2\x26\x7f\xfa\x89\x9f\x73\xef\x1f\xd7\x9b\xed\xf5\xeb\xef\x3d\x38\x77\x3f\xfd\xc1\xf0\x00\x43\x08\x39\x18\xac\x13\xb6\x26\x01\xa6\xb4\x5d\xf2\xb2\xf0\x2c\xb4\x12\x19\xc6\x3c\xcb\x53\x6d\x78\x79\x08\xa3\x03\x8c\xb2\x11\x57\x49\xd1\x38\x82\xe4\x66\x10\x95\x42\xd2\x84\xd0\x42\x11\x15\x54\x89\xb5\xf2\xbf\xd8\x70\x1f\xbe\x03\x00\x00\xff\xff\x35\xef\xf0\x36\x4a\x01\x00\x00")

func configStatusChainAccountsJsonBytes() ([]byte, error) {
	return bindataRead(
		_configStatusChainAccountsJson,
		"config/status-chain-accounts.json",
	)
}

func configStatusChainAccountsJson() (*asset, error) {
	bytes, err := configStatusChainAccountsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/status-chain-accounts.json", size: 330, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configStatusChainGenesisJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6f\x13\x31\x10\x85\xef\xf9\x15\x96\xcf\x1c\xc6\xf6\x78\x66\xbd\x37\x4a\x59\x81\xc4\x8d\x5f\x30\xb6\xc7\xcd\xaa\x9b\x6c\x94\x6c\xa4\x16\xd4\xff\x8e\x92\x2c\xa1\x42\x9c\xf0\xcd\x7e\x33\xef\x7b\x7e\x3f\x37\xc6\x58\x99\xa6\xb9\xd8\xde\x5c\x2e\xc6\x18\x9b\x07\x47\x58\x24\xa0\x0b\x9e\x04\x42\x8e\xc8\x05\xe2\x43\xc0\x90\xfd\x67\xef\x74\xf8\xa8\x1e\x73\xfa\xb3\x62\x6c\x96\x49\xf6\x45\x6d\x6f\x2c\xbc\x38\x18\xe0\xd3\x00\x84\x8f\x8f\x31\x79\xb8\x1c\x7b\x1d\x7c\xfb\xb0\x22\x3c\x44\x89\x15\x94\x7d\x6b\x14\x81\x53\x2b\x92\x33\x0a\x05\x0d\xa1\xfa\x4e\x84\xaa\x36\x5f\xfe\x03\xb1\x59\x31\xb6\xcc\xfb\x36\x3e\xdd\x1d\x6c\xd9\xca\xb8\xff\x5a\x6d\x6f\x98\xf9\x16\xc4\x6e\xe7\x9d\x9e\x16\x95\xfa\x30\xcd\xe5\xd9\xf6\x06\x56\xa1\xca\x3c\xcc\xc7\xe7\xef\xe7\xc3\x61\x3e\x2e\xb6\x37\xcb\xf1\xac\xab\x96\x5f\x7f\xc8\x7e\x19\xcf\xbb\xbf\x97\x74\x3c\xb8\x08\x5f\xe4\xb4\xbd\x85\x8c\xa0\xa4\x35\xa3\x26\xa8\x89\x1c\x49\xe9\x72\x63\xe7\x92\x6a\xe0\x82\x80\x5d\x41\x27\x15\x52\xf0\x1d\x31\xa9\xcb\x21\xd5\x42\x9d\x80\x96\x96\x43\xb5\xef\x7d\xe3\x3f\x69\xdd\xfd\xf5\xfe\xef\x3a\xb6\x36\x96\xf3\xb4\xbc\xfe\xae\xea\xda\xce\x55\xd3\x97\xe5\x28\x8f\xb2\xc8\x1a\x30\x30\x92\x63\xe4\xc8\x01\x03\x75\xe4\x28\x91\x7a\x88\xc0\x9e\x12\xd3\x45\xa3\xe8\x21\x22\x45\xbe\xcc\x26\x52\x62\x0f\xa8\x14\x19\x99\xa9\xb1\xa7\x7c\xb3\x7e\x92\xd3\xb7\x71\x37\x2e\xef\xa1\x60\x37\x6f\x9b\x5f\x01\x00\x00\xff\xff\x91\xc6\xb3\x58\x64\x02\x00\x00")

func configStatusChainGenesisJsonBytes() ([]byte, error) {
	return bindataRead(
		_configStatusChainGenesisJson,
		"config/status-chain-genesis.json",
	)
}

func configStatusChainGenesisJson() (*asset, error) {
	bytes, err := configStatusChainGenesisJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/status-chain-genesis.json", size: 612, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configTestDataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\xf2\xcb\x4f\x49\x55\xb2\x52\x00\xb1\x15\x14\x94\x82\x2b\xf3\x92\x83\x53\x93\xf3\xf3\x52\x8a\x95\xac\x14\x8c\x0d\x74\x20\xc2\x1e\x21\x21\x01\x01\xf9\x45\x25\x4a\x56\x0a\x16\x66\x26\xa6\x50\xd1\xf0\x60\x84\x98\x19\x97\x82\x42\x2d\x57\x2d\x17\x20\x00\x00\xff\xff\x51\xca\x96\xb1\x54\x00\x00\x00")

func configTestDataJsonBytes() ([]byte, error) {
	return bindataRead(
		_configTestDataJson,
		"config/test-data.json",
	)
}

func configTestDataJson() (*asset, error) {
	bytes, err := configTestDataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/test-data.json", size: 84, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysBootnodeKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x4b\x01\x80\x40\x08\x04\xd0\xbb\x69\x58\x96\x6f\x1c\x66\x94\xfe\x11\x7c\xbe\x65\xab\x03\x07\x43\x1b\x87\x5b\x17\x8e\x9e\x23\x02\x11\x1a\x57\x51\x9d\x32\xf7\x24\x99\x1b\x08\xd8\xcb\xcf\x2d\xf4\xba\x3e\x7f\x00\x00\x00\xff\xff\x4a\x3d\x56\xc6\x41\x00\x00\x00")

func keysBootnodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_keysBootnodeKey,
		"keys/bootnode.key",
	)
}

func keysBootnodeKey() (*asset, error) {
	bytes, err := keysBootnodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/bootnode.key", size: 65, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysFirebaseauthkey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x52\x85\x20\x18\x00\xe0\x7d\xef\xc2\xcc\x71\x4a\xc4\x76\x3f\x29\x43\x5c\x34\x2d\x4d\x59\x6a\xa5\x8d\x24\xde\x42\x7b\xfb\x3e\x00\x00\x9e\x87\xfa\xfe\xf3\xf9\x11\x5e\x20\x0e\x3a\xf6\x7b\xb8\xf2\x03\xc7\xd9\x4a\x10\xec\x46\x74\xa7\x26\x9a\xfd\x71\xec\xeb\xea\x98\x84\xb2\x9b\x6c\x92\x5b\xaa\x0d\x0e\x7c\x71\x71\xb8\xb1\xb1\xf2\x62\xcc\x61\xfb\x59\x91\xa2\x6f\x69\x6f\x29\x09\xdf\x07\x99\xb5\x09\x2a\x5f\x5b\x69\xa2\xa5\x91\x33\xa9\xa5\x67\x2d\x5d\xdd\xe1\xf0\xac\x82\xb0\xcf\xec\xd7\x72\x3d\x9c\x4f\x54\x4c\x3c\x2d\xad\x8b\xac\x32\x57\x8c\x06\xfc\x5d\x24\xd3\x7e\xf7\x1f\x00\x00\xff\xff\xd6\xa2\x00\x4a\x99\x00\x00\x00")

func keysFirebaseauthkeyBytes() ([]byte, error) {
	return bindataRead(
		_keysFirebaseauthkey,
		"keys/firebaseauthkey",
	)
}

func keysFirebaseauthkey() (*asset, error) {
	bytes, err := keysFirebaseauthkeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/firebaseauthkey", size: 153, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysTestAccount1StatusChainPk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xdd\x8a\xe4\x40\x08\x05\xe0\x77\xf1\x3a\x01\xb5\x4c\x55\x99\xb7\x51\xcb\x62\x9b\xf9\x6b\x92\x66\xd8\x65\xe8\x77\x5f\x32\xcb\x32\x97\x82\x7e\x1c\xcf\x17\x7c\xe6\x71\xde\x3e\xde\x61\x2f\x0b\xdc\x06\xec\xd0\x29\xb2\x25\xe9\xca\xd4\x71\x15\xe4\xbe\xba\x2a\xae\x68\x52\x94\x7c\x56\x33\x84\x05\x6c\x8c\x23\xcf\x13\x76\xf0\x49\x55\xc2\x8a\x50\xe1\x6a\x58\x7c\x93\x16\xb8\x79\x91\xe2\x9c\x4c\x39\x2d\x59\x5c\x61\x81\x38\xfe\xdc\x1f\x1f\xb0\x7f\x41\xdc\xee\xbf\xf2\x78\xe4\xef\x07\xec\xb0\x35\x17\xb1\x6e\xd4\x67\x6f\x8a\xea\xce\xd1\x4c\x95\x98\x5c\x54\x8b\xa9\xb7\x31\x2c\x89\x46\xe9\x53\x23\x31\x91\x42\x9a\x8c\x51\x6d\x9b\xf5\x92\xbf\xbd\xbb\x1d\xf6\x76\x5e\xfe\xed\x13\x76\x30\xc3\xad\x17\xec\x93\x38\x2a\x73\xca\xa8\x38\x34\xb0\x59\x6a\x2f\x2d\xe1\xf9\xff\xf0\x5a\xce\x73\x25\xee\x6b\x3c\x0e\x58\xe0\x65\x4c\xd8\xe1\xfc\x0e\xfc\x6f\xfc\xb1\xc7\xcb\x6b\x5e\x85\xf1\x02\xa7\xbd\x5e\x0f\xb8\x57\xc1\x62\x9e\x8d\xb3\xb6\x9a\xcc\x64\x82\xc6\x81\x6d\x93\xd9\xe8\x4a\xae\x54\x44\xab\x78\x20\x99\x85\x52\x99\x21\x65\x23\x1a\x19\x05\x16\x78\x87\xbd\x93\xf2\x02\x07\xec\x7d\x81\x3b\xec\xf4\x5c\xe0\xcd\x02\x76\x68\x9d\xb1\x0d\xa4\x40\x2f\x51\x49\xad\x4f\x51\x47\xd6\xda\xbd\x56\xaf\xc5\xc2\x37\x66\xec\x41\x45\xc8\xb4\x8c\xd0\x4a\x6d\xe0\x4c\x95\x9e\x09\xcf\xe7\xdf\x00\x00\x00\xff\xff\xd2\xdb\x1b\x65\xe9\x01\x00\x00")

func keysTestAccount1StatusChainPkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount1StatusChainPk,
		"keys/test-account1-status-chain.pk",
	)
}

func keysTestAccount1StatusChainPk() (*asset, error) {
	bytes, err := keysTestAccount1StatusChainPkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account1-status-chain.pk", size: 489, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysTestAccount1Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4b\x8e\x24\x3b\x08\x45\xf7\xc2\x38\x42\xb2\x31\xd8\xd8\xf3\x57\xfb\xc0\x80\xf5\x52\xf5\x4b\x45\xa4\x4a\xdd\x2a\xd5\xde\x5b\x91\x83\xee\x19\x20\x74\xee\x3d\xdf\xa0\xee\x47\x9c\x27\x0c\x78\x29\xfc\x5f\x2a\xc8\xae\x2e\x2d\xb0\xd6\x6c\x14\x2f\x9d\xb3\xb3\x34\x6c\x51\x9d\xa5\x38\x1b\x6c\x60\xc7\xef\xfb\xe3\x13\xc6\x37\xd8\xed\xfe\x7f\x1c\x30\x40\xe3\xdc\x33\xca\x6e\x8f\xe3\x7a\x78\x9e\x1f\xf1\xeb\x01\x03\x48\x02\x7d\x89\xb7\xb4\x64\xae\x42\xea\x1a\x9c\x66\x9a\x29\x4a\x96\xa4\xa5\x63\xd0\x9c\xb9\x89\x66\xa5\x82\xe4\x66\x92\x08\x5b\x4c\x6a\x95\xd6\x5f\xde\x5d\x0f\x7d\x3f\xaf\xd8\xdb\xd7\xc5\x2d\xc4\xa6\xb4\xb0\xd8\xcc\x19\xbb\xf6\x9e\x5b\x0e\xe9\x5a\x3b\xb2\x24\xf8\xd9\xe0\xd5\x17\x0c\x38\x9f\x85\xe1\xb9\xfe\x83\xf8\xeb\x5b\x7c\xc0\x28\xb8\xc1\x07\x0c\xac\x98\x89\x36\xb8\xc3\xc8\x1b\x1c\x30\x64\x83\x53\xdf\x2e\x81\xdc\x99\xb1\xc9\x9c\x46\xab\x68\x22\xb1\xa4\xe2\xad\x79\x70\xca\x54\x8b\xa1\x08\xf6\x59\x9e\xb3\x06\xad\x1e\xc8\x68\x58\xda\xc2\xa9\xd6\xae\x22\xef\x6a\x30\xa0\xa3\x97\x60\xd2\xde\x22\xbc\x74\xcf\x8b\x6a\xc3\xb6\x12\x13\x55\x26\x4c\xcb\x78\x95\x6c\x6d\x51\xb4\x14\x42\x55\xa7\x75\x76\x5b\x2e\x53\xf0\x49\xba\x39\x0c\x98\x35\x11\x59\x95\xbd\x74\xa3\x9d\xaa\xfb\x2e\x39\xe3\x8e\x16\x8c\xd9\x19\x6d\x31\x6c\xf0\x15\xc7\x79\xfb\xbc\x24\x7f\xfe\x04\x00\x00\xff\xff\x0d\x85\xaf\xaf\xeb\x01\x00\x00")

func keysTestAccount1PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount1Pk,
		"keys/test-account1.pk",
	)
}

func keysTestAccount1Pk() (*asset, error) {
	bytes, err := keysTestAccount1PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account1.pk", size: 491, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysTestAccount2StatusChainPk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xdb\x8a\x1c\x41\x08\x80\xe1\x77\xf1\xba\x1b\x2c\xb5\x8e\x6f\x63\xa9\x45\x86\x3d\x0d\xdd\xc3\x92\xb0\xcc\xbb\x87\xde\x10\xf6\xd2\x8b\xff\x43\xfd\x82\xcf\x38\xce\xdb\xc7\x3b\x0c\xde\xe0\xe6\x30\x60\x9a\x69\xa3\x4c\xfb\x4a\x9a\x76\x59\xa1\xbb\xd6\x25\x3b\x17\x12\x49\x94\x8c\xd0\x60\x03\x75\x3f\xe2\x3c\x61\x00\x61\xd6\xec\x18\x95\xd6\x2a\x19\x6b\x5f\xa6\x73\x8a\x16\x0e\x66\xa7\xa6\x5a\x3c\x16\x5d\x91\x1d\x7f\xee\x8f\x0f\x18\x5f\x60\xb7\xfb\xaf\x38\x1e\xf1\xfb\x01\x03\xa4\xf6\x5c\x3d\x2c\xa8\xba\x4a\x11\x66\x77\xf4\x9c\x27\x77\x5f\x69\x61\xd7\xe0\x1e\x5c\x98\xe6\x42\xed\xc6\xce\x4b\x71\x52\x42\xd1\xa6\x34\x2f\xf9\xdb\xbb\xeb\xa1\x6f\xe7\xe5\xdf\x3e\x61\x80\x75\xae\x91\x7b\x23\x69\xa4\x8e\x3d\x73\x2f\x09\xb5\xf6\x98\xdd\x4a\x15\x78\xfe\x0f\x61\x80\xc6\xb9\x27\x6a\xbb\x3d\x0e\xd8\xe0\xc5\x17\x0c\x38\xbf\x17\xfe\x37\xfe\xd8\xfe\xf2\x1a\xd7\xc3\x68\x83\x53\x5f\xaf\x03\xd8\xb4\x18\xb7\x94\x5b\xc9\x92\x75\x22\x1b\x49\x14\x94\x42\x86\xc9\xc9\x5b\x53\xa9\xc2\x5c\xb4\x7a\x12\xd4\xa6\x4b\x94\x32\x16\x66\xce\x15\x61\x83\x77\x18\x2d\x75\xda\xe0\x80\xd1\x36\xb8\xc3\x48\xcf\x0d\xde\xd4\x60\x00\x56\x47\x67\x6a\xd6\xb1\x36\x2b\xd1\x66\x89\x55\x72\xe5\x54\xa8\xab\x72\x4c\x6a\xd1\x91\x49\x1a\x2f\xa1\x99\x45\xcd\x94\x85\x5c\x22\xb1\x34\x78\x3e\xff\x06\x00\x00\xff\xff\x4e\x39\x80\x7d\xe9\x01\x00\x00")

func keysTestAccount2StatusChainPkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount2StatusChainPk,
		"keys/test-account2-status-chain.pk",
	)
}

func keysTestAccount2StatusChainPk() (*asset, error) {
	bytes, err := keysTestAccount2StatusChainPkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account2-status-chain.pk", size: 489, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysTestAccount2Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4d\x8a\x1c\x3d\x0c\x40\xef\xa2\x75\x15\xd8\xb2\x6c\x4b\xde\x7d\x7c\xe4\x20\xb2\x24\x93\x66\xfe\x9a\xaa\x66\x48\x18\xe6\xee\xa1\x7a\x91\x2c\x25\xc4\xd3\x7b\x5f\xa0\xee\x47\x9c\x27\x0c\xf8\x2f\x69\x16\xc4\x8c\x8d\x5d\x8a\x58\x51\xe9\x38\x57\xa5\x96\xfd\xff\x9c\x56\x17\x4e\x3f\x38\x13\x6c\x60\xc7\xef\xfb\xe3\x03\xc6\x17\xd8\xed\xfe\x33\x0e\x18\xa0\x71\xee\x19\x79\xb7\xc7\x71\x1d\x3c\xd7\x8f\xf8\xf5\x80\x01\xac\x2b\xc9\x5c\x9a\x50\x69\xf5\xa8\x2b\x17\x2d\xcc\x33\x8a\x64\xb7\x95\xc4\x6a\x36\xa6\x65\x2c\xc8\x84\x19\x31\x45\xea\xd6\x72\x4b\x84\x75\xf1\x5f\xde\x5d\x0f\x7d\x3b\xaf\xb7\xb7\x4f\x18\xd0\x75\x56\xd1\xa0\x2e\xb9\xf6\x1e\x1d\x3d\x9a\xd7\xe9\xac\x14\x48\xa1\xf0\xbd\xc1\x8b\x2f\x18\x70\x3e\x85\xe1\x39\xfe\x83\xf8\xcb\x6b\xbc\xc3\x28\xb8\xc1\x3b\x0c\x6c\x98\x89\x36\xb8\xc3\xc8\x1b\x1c\x30\x78\x83\x53\x5f\xaf\x00\xec\xd1\x6c\x72\xe4\x10\x4f\xd6\xdb\x9a\x73\x39\x91\x99\x22\xd5\xd2\x92\x2f\xa1\x24\xd3\x4c\xd4\x68\x51\x10\xdb\xa5\x35\xeb\x72\x9e\x49\xfa\x25\xf2\xa6\x76\x29\x2f\xf7\x59\x44\x3a\x7a\xcf\xb8\x26\x8a\x52\x59\x39\x72\xd4\x92\x4a\xe4\xc2\x1e\x26\x66\xa8\x2b\x66\xc2\xda\x82\xb5\xa7\x8a\xae\x54\xa4\x5b\xbb\x48\x37\x87\x01\x93\x51\xba\x4a\xde\x25\x05\xed\x24\x5e\x77\x6d\x4b\x76\xb6\x92\x2a\xf5\xc9\xd1\x14\x36\xf8\x8c\xe3\xbc\x7d\x5c\x91\xdf\x7f\x02\x00\x00\xff\xff\x80\x42\xa2\x5c\xeb\x01\x00\x00")

func keysTestAccount2PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount2Pk,
		"keys/test-account2.pk",
	)
}

func keysTestAccount2Pk() (*asset, error) {
	bytes, err := keysTestAccount2PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account2.pk", size: 491, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysTestAccount3BeforeEip55Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xdb\x8a\x1c\x31\x0c\x44\xff\x45\xcf\xdd\x20\x4b\xbe\xc8\xfe\x1b\x59\x96\xc8\xb0\xb7\xa1\x7b\x58\x12\x96\xf9\xf7\xd0\x59\xc2\x3e\xd6\x43\x1d\x4e\xd5\x17\x7c\xfa\x71\xde\x3e\xde\x61\xf0\x06\xb7\x05\x03\xd0\x96\xb9\x85\xed\x46\x61\x7b\x26\x4d\xbb\xf8\x2a\x7b\x26\x33\xec\xd4\x16\x2f\x81\x0d\x74\xad\xc3\xcf\x13\x06\xb0\x2e\xce\x5e\xbb\xac\x2c\x58\x35\x16\xca\xe4\xd2\x67\x27\x8c\x62\x75\x56\x9a\x55\xdc\x33\x6c\x60\xc7\x9f\xfb\xe3\x03\xc6\x17\xd8\xed\xfe\xcb\x8f\x87\xff\x7e\xc0\x00\xa2\xd2\xbb\x98\x77\x56\x2d\x93\x5a\x6a\xa5\x60\xc9\x9c\xd2\x52\x31\x6b\x53\xa8\x24\x6a\x2b\x23\x5a\xa7\x16\xca\xc2\x0d\x3d\x27\xa6\x4e\x66\x97\xce\x37\xef\xae\x87\xbe\x9d\x17\xff\xf6\x09\x03\xa4\x27\x6a\xd9\x49\x5b\xa3\xb6\x34\xd9\xd2\xb4\xc8\x6c\x12\xfb\x94\x89\xf0\xfc\x5f\x84\x01\xea\xe7\x9e\x48\x76\x7b\x1c\xb0\xc1\xcb\x0a\x18\x70\xfe\x13\xfe\x8e\x3f\xec\xf5\xf2\xea\xd7\x61\xb4\xc1\xa9\xaf\xd7\x80\x45\x93\x50\xb5\xd5\x2c\x11\xd8\xc9\x98\x51\x1a\x51\xc6\xf0\x5c\x83\xc2\xd8\x53\x66\xa6\xc9\x42\x9a\x05\x25\x6a\xc1\xc9\x56\xa5\x4b\x2d\x13\x36\x78\x87\x21\xa9\xd3\x06\x07\x0c\xd9\xe0\x0e\x23\x3d\x37\x78\x53\xbb\xd4\x10\x33\x63\x13\x89\xd5\x66\xa0\x93\xbb\xd7\x48\x5c\x4a\xcb\xa5\x27\x8e\xe2\x14\x25\x65\xaa\x1a\x9d\x58\x8a\x22\xba\x9b\xa6\x28\xd6\x98\x12\x3c\x9f\x7f\x03\x00\x00\xff\xff\x4c\x6d\xd5\xbe\xe9\x01\x00\x00")

func keysTestAccount3BeforeEip55PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount3BeforeEip55Pk,
		"keys/test-account3-before-eip55.pk",
	)
}

func keysTestAccount3BeforeEip55Pk() (*asset, error) {
	bytes, err := keysTestAccount3BeforeEip55PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account3-before-eip55.pk", size: 489, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysWnodepassword = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x2e\x49\x2c\x29\x2d\xd6\xcd\x4f\x4b\xcb\xc9\xcc\x4b\xd5\xcd\xcc\x4b\xca\xaf\xe0\x02\x04\x00\x00\xff\xff\xef\xf3\x8b\x45\x15\x00\x00\x00")

func keysWnodepasswordBytes() ([]byte, error) {
	return bindataRead(
		_keysWnodepassword,
		"keys/wnodepassword",
	)
}

func keysWnodepassword() (*asset, error) {
	bytes, err := keysWnodepasswordBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/wnodepassword", size: 21, mode: os.FileMode(420), modTime: time.Unix(1521705776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataJailCommandsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x73\xdb\xb8\x11\x7f\xd7\x5f\x81\xf0\x1a\x47\x4c\x64\x8a\x8a\xe3\x38\xa6\x47\xd3\x71\x5c\x77\x92\xe9\x25\x71\x23\x27\xbe\xab\xab\xcb\x40\xe4\x8a\x44\x4d\x02\x0c\x00\x5a\xfe\x38\xfd\xef\x1d\xf0\x13\xfc\x92\xec\xbb\x3c\xf4\xa1\x7c\x89\x05\x2c\x16\x8b\xc5\x6f\x7f\xbb\x8b\x08\x89\x65\x22\x2c\x97\x45\x11\xa6\xde\xf0\x7e\x80\x10\x42\x14\x47\xe0\x20\x23\x64\x2e\x96\x84\x51\x63\x94\x8e\x7a\x20\x5c\x4e\x62\x35\xe2\x20\x63\x06\xd4\x43\x0d\x09\x97\x85\x8c\x3b\xc8\xf8\xe9\x10\xef\x7b\xee\x32\x1f\x8d\x39\x5c\x13\x58\x39\x68\x99\x50\x57\x49\xa3\x61\x8c\x39\x8e\x84\x89\xb2\xed\xd4\x77\x8d\x39\x92\x70\x23\xd1\x14\x55\x26\xc5\x8c\x02\x95\xc2\x52\x13\xc3\x52\x54\x7d\xf7\xb5\x5f\xea\x13\xf2\x36\x04\xa7\x63\x42\x7d\x11\xe6\x3e\xa1\xe7\x2c\x76\xd0\xfe\x68\x83\xc4\x3b\xc6\xc9\x1d\xa3\x12\x87\x0e\xb2\xbb\x05\x97\x8c\xca\x19\xb9\x03\x07\x4d\x5e\xf5\x4b\xfc\x1d\x47\x24\xbc\x75\x90\xa1\x7e\x18\xdd\x72\x85\xb7\x16\x21\x76\xaf\x8c\x96\xc8\xba\x36\xb2\x1e\xa1\xcc\x69\xd6\x35\x0e\x13\x30\x8f\x6a\x9e\x4b\x38\x41\x53\x64\x04\x52\xc6\xc2\x19\x8f\x23\x1c\x0b\xcb\x67\xcc\x0f\x01\xc7\x24\x75\x65\x3a\x36\xc6\x31\x19\x2b\xf7\x12\x37\xc2\xf1\x5f\x5d\xa0\x12\xf8\xb4\xbe\xf5\x8b\xda\x3e\x8d\x29\x63\x47\x90\x3b\x98\x4e\x6c\xfb\x66\x62\xdb\x3b\x11\x8e\xe5\x6d\x0c\x53\xce\xb0\x17\xe1\x78\xe7\x0a\x6e\xa7\xc7\xef\xef\xf0\xec\xf6\xed\x47\xf1\x9f\xc9\x77\xf6\xcf\xd3\x5f\xcf\x16\x7b\xef\xc3\x30\xba\xf8\x70\x2c\xdc\xe4\x97\x0b\x1b\x20\xf9\xf5\xfb\xf1\xf1\x4e\x88\xa9\x9f\x60\x1f\xa6\x40\x9b\x06\x18\x3b\x11\xe6\x57\xc0\xc5\x54\xed\xe6\x44\xc4\x7b\x7a\x70\x92\x79\xcb\xbe\x59\x2e\x6d\xdb\xb6\x9f\x1e\x9c\x84\x78\x01\xa1\xf3\xf4\xe0\x64\x93\xfd\x47\x83\x9a\x9f\x48\x84\x7d\xe8\x84\x58\x3a\xb3\x15\x63\x2c\xe1\xae\x02\x59\xc2\x89\xa3\x9c\xbe\x6e\xdf\xec\x46\x1c\xae\x88\x27\x03\x07\x4d\xec\x1e\x70\x05\x40\xfc\x40\xa6\x02\xdb\xf0\x50\xfe\x32\xb5\x33\x72\x90\x09\xa7\x1d\xc7\x53\x01\x38\xbc\x5f\x8f\xd0\xa5\x8a\xa5\x51\xe6\x88\x79\x8e\xa2\xf5\x60\x6d\x5a\xa9\xd7\xea\xf1\x8f\x3d\x8f\x83\x10\x39\x7c\xd5\x4d\x3b\x85\x6a\xf5\x43\x58\xe7\xa7\xbf\x9c\xe7\x31\x1e\x62\x17\x02\x16\x7a\xa0\x10\x7d\x9c\x2f\x1c\xac\x95\x71\xca\xf1\x71\xc0\x28\x08\x34\x45\x97\x83\xba\x6b\x69\x12\x2d\xd2\x35\x6f\x0e\x27\x07\x93\xec\xd3\xe2\xa5\xce\x39\x1f\x53\x61\xb4\x64\x3c\xc2\x12\x4d\xb2\x8b\xcf\xef\xa0\x53\xe5\xde\x8f\x56\xf9\xe2\xe0\xd1\x66\xbe\xdc\xa6\xf3\xd1\x1a\xf7\x72\x8d\x83\xf9\xd1\x60\x50\x92\xaa\x48\x7c\x1f\x84\xfa\x53\x9c\x28\x0a\x23\x14\xf8\x4c\x81\x71\x58\x9b\x49\xa8\x2c\x78\x37\x47\x4b\x65\x52\x46\x82\x5f\x81\x4b\xe2\x2a\x0a\x9c\x8c\x1a\x53\x3d\xfc\x58\xc0\xf6\x03\x96\x81\x15\x11\x3a\x9c\xec\xdb\x23\x34\xdc\x7f\x8d\x9e\xa3\xd6\xe6\x66\xb5\x6e\x81\xdd\x2b\x9f\xb3\x84\x7a\x27\x39\x17\xae\x02\x22\x41\x73\xc3\x82\x71\x0f\xf8\x67\xec\x91\x44\x38\x68\x3f\x3b\xf7\xd1\x60\x9d\xa1\xaa\xd2\x5d\x3f\x31\x9a\xe6\x87\x8a\xb1\xe7\x11\xea\xff\x0c\x4b\x15\x54\xaf\x33\xbd\x7d\xbb\x0e\xd6\x47\x4d\xb5\xb3\x64\xd1\xa3\xb9\x38\xf2\x7e\xa1\x34\x35\xf4\x2d\x93\x92\x45\x17\x79\x94\xb7\x67\x8a\x0d\x7f\xb2\xd3\x6f\xb2\xac\x36\x4d\xe9\xaa\xbe\x87\x96\xb5\x0e\x33\x5d\xed\xe4\xd3\x97\x6c\xdc\xfa\x4e\x9e\x76\x3c\x0d\x5a\xbd\xfb\x4d\xac\xfd\x3f\xbc\xe3\x9b\xbd\x37\xee\xe1\x5e\xb1\x63\x85\x4f\x89\xb9\x14\x17\x44\x06\x43\x21\xf9\x64\x84\x84\xe4\x2f\x0b\x28\x8e\xc7\x68\x26\x39\xa1\xbe\xa5\x89\x59\x96\x65\x22\x8f\x81\xa0\xcf\x24\x5a\x31\x7e\x85\x08\x45\xca\x8f\x83\x1a\xd7\xf1\x89\x15\x62\x21\xdf\x53\x0f\x6e\x3e\x2d\x95\xf2\x97\x23\x64\x9b\x68\x3a\x45\x36\xda\xd9\x49\x25\xd0\x93\x69\xba\x5f\x0a\x9d\xd2\xa4\x94\x95\x66\x15\x40\x1b\x75\x49\x46\x5c\x23\x1d\xc2\x19\x61\x92\x25\x1a\x3e\xd1\xd3\x0c\xfa\xfd\xf7\x5a\xda\x51\x7b\x1b\x86\x5e\xdf\xc4\x01\x9a\xe6\x2c\x98\x93\x2e\x82\x50\x40\xb7\x84\xb5\x24\xa1\x04\x3e\xd4\x0a\x26\x35\x6e\x36\xb2\x4a\xc5\xf6\x85\xc7\x52\x31\x2b\x63\x96\xde\x82\x61\x5d\xd2\x7e\x79\x98\x38\xb0\x42\xa0\xbe\x0c\x52\xa7\xe9\xfb\x64\x7b\xd4\x16\x68\xee\x48\x2d\xb6\x22\x1c\x6f\x32\xb5\x37\x29\x49\x96\xb8\x01\x5e\x84\xcd\xbc\xcb\xe8\x99\x4a\x1f\x0e\xba\xcc\xd7\xc0\x75\x2a\x3f\x3b\x3d\xff\xf6\xf5\xf8\xe7\x2f\xa7\x23\xa4\x1f\x74\xde\xc8\xc2\x3d\xd9\xaf\x8f\x2c\xda\x99\xf8\x72\xab\x86\x16\x2f\x74\xa7\xf3\xcb\xce\xd1\x6e\x1b\xdb\x35\x6e\xf3\xbb\xcf\x4b\x8b\x8a\x29\x3a\xca\x0f\xfd\xd3\x9d\xd4\x2b\x68\xf6\xeb\xf8\x33\x46\x36\x49\xe6\x41\xa6\x6a\x8b\xfa\xed\xed\x9c\x99\x9b\x73\x53\xaf\x88\x50\x8e\xf3\x32\x8e\xd5\x05\x76\x16\x7e\xc2\xe5\x2c\x0c\xbf\xaa\xfb\x2d\x15\xf4\xa7\xd2\x32\x50\x34\xb7\x69\xd2\x03\xa4\x15\x64\x45\x7a\x55\xc5\x6c\x12\x3b\xa9\x09\x55\xee\x4a\x4f\x7c\xc2\xe8\x92\xf8\x25\x01\xe7\x75\x57\x3a\xd5\xdf\x74\xa5\xd3\x79\xf9\xd0\xe4\xde\xfd\xa5\xfb\xea\x8d\x97\x8f\x5e\xe3\x90\x78\x58\xaa\x99\x4d\xad\x57\xab\x0c\xd0\xd6\x12\x46\xdf\x61\xea\x85\x69\xa1\xa2\xdb\x55\x5e\x9c\x52\x07\x12\xb8\x0a\x57\x9d\x70\xe6\x15\xdf\x1c\xe9\x05\x50\x26\xe3\xa0\x4b\xad\x12\x6a\x1f\x1b\x75\x17\x9c\x67\xef\x3e\x7d\x3c\xed\xf4\xbc\xd3\x22\xf3\x4a\xac\x5e\x9c\x9e\xe9\xee\xcb\x2c\x9b\x67\xb2\x41\x71\xd2\x47\x7b\x2b\x25\x28\x07\x19\x82\xf8\x74\x37\x89\xbb\x7c\xb4\xdd\x3f\x2a\x5d\xe6\xa7\xe5\x20\x62\x46\x05\x0c\x35\x94\x98\xe5\x6c\xd1\xac\xd7\x27\x9b\xb3\x35\x48\x05\x10\xc6\x9d\x88\x7a\x57\x4d\x94\x20\x3a\xb0\x0f\x0f\xe1\x75\x3e\x3a\x7e\x8e\xbe\x16\x38\x42\x70\x83\xa3\x38\xcc\xbb\xc2\x87\xc0\x2b\x4d\x2e\x7a\x62\x7c\x32\x45\xc6\x5e\x95\x19\x55\x24\x00\xe7\x8c\x77\xc6\xe6\x75\x15\x95\xf7\xed\xaa\x8d\x83\x67\x14\xb4\xd2\x41\xd9\x29\x57\xa9\x96\xc7\x60\x8c\xc5\x02\x39\x43\xc3\xcc\x9d\x5e\x24\xc3\xe2\x2e\x53\x0b\xd4\x05\xa5\x7f\xcc\xf3\xde\xaa\xf8\x67\xf4\x7c\xbc\x05\xb9\xdf\x13\xe0\xb7\x9b\x91\xab\x5a\xa5\x1c\x6c\x59\x57\xd4\xbc\xe9\xda\x75\xb9\xea\x52\x55\xad\x4f\x18\xdd\x75\x99\x07\x1b\xaf\xa8\x7e\xa3\x27\xda\x5a\xa4\xad\xed\x37\x5f\x13\xea\xb1\xfe\xe3\x97\x0f\x6f\x4f\x3f\xff\xe0\x60\xc9\x0f\xb9\xfb\xa7\x82\xa6\x97\xe9\x0a\x6b\xaa\xbd\xc9\x72\xf8\x64\xfc\xdb\xe5\xbf\xbd\xf9\xfd\xab\xf5\x5f\xc6\x96\x04\x21\x6b\xe0\x34\xcd\x26\x07\x6e\x04\x67\xc9\x90\x1f\x40\x88\xd6\xeb\x81\xfa\x7a\xef\xa2\x26\x74\xc1\x19\xf5\xf3\xde\xae\xfe\x96\xa1\xb7\xf6\xdb\xf1\x5a\x42\x76\xfd\x00\x84\x5d\xc1\x6d\x8c\x49\x2b\x7f\x6c\xc0\xd5\x3f\xb2\x15\x28\xc6\x42\xac\x18\x2f\x92\x0c\x71\xd3\x59\xf5\xcf\xb7\x90\xb9\x57\xdf\xf4\x16\x6e\x03\xd9\xd7\xb5\xf4\xe0\xee\xec\x78\x36\xbb\xf8\xf4\xf9\x6f\x3f\x9a\xa6\xf1\x35\xec\x76\x58\xf0\x68\xdc\x3d\xe8\x69\xb3\xbf\xfe\xfd\xff\xb3\xa6\xa2\xe7\xe7\xea\x33\xb4\xb7\x28\xbd\x6b\x5c\xe1\x30\x04\x99\x96\x67\x75\xcf\x76\x66\x16\xa3\xf9\xa4\x9c\xf0\x50\xf5\x28\xb5\x17\xc1\x62\x3e\xed\xe2\xc6\xbf\x5d\xe2\xdd\xbb\xe3\xdd\x7f\xed\x7e\x9b\xbf\x70\x72\x52\x48\x78\x68\x36\x9b\xad\x4c\xd3\xb3\x40\xca\xd8\x19\x8f\x9f\xa1\x17\x6a\x44\x6b\xaa\x5a\x8f\x70\xf7\x2b\x58\x28\xbb\xbf\xf0\xd0\x51\xb2\x55\x9a\xdf\x9c\xaa\x17\x9c\xad\x44\x77\xf9\x97\x4d\xb5\x82\x76\xb9\xc4\xfb\xb6\x9d\x8f\x2e\x93\x30\x14\x2e\x07\xa0\x0e\x92\x3c\xc9\x3b\x13\xad\x52\x3a\xe7\xc4\xf7\x55\xf8\x3c\x63\x74\x57\x00\xf5\x9e\x6d\x8b\xd5\x15\x2c\x62\xec\xeb\xdc\x55\x2b\xbc\xaa\x2b\x7a\x5c\x06\x2c\xef\x38\x67\x52\x78\x8b\x43\x4c\x5d\x68\x5c\xb4\xe4\xb7\x8d\x4b\xbd\xc6\xea\x2a\x56\xb0\xd8\xb3\x24\xbb\x00\x52\xc3\xc1\x08\x19\x20\x03\xe0\x25\xa0\x90\x8b\xa5\x1b\xa0\x21\x70\xbe\x9d\x20\x0a\x62\xed\x88\xc3\x3f\xc0\xff\xea\x33\x8e\x23\x96\xf4\x06\x4b\x3e\x8b\x88\x40\x94\xc9\xcc\x13\x45\x6d\x3a\x1e\x03\xe7\x56\x94\x29\x6f\xad\xae\xf7\x41\x1d\xd5\x64\xd9\xfa\x2c\x32\xb7\x16\x2e\x03\x19\x58\x3e\xc8\xba\xb3\x0b\x28\x5a\xf9\x9b\xaf\x59\x3d\x74\x2c\xe8\xf0\x1a\x87\xa6\xe5\x73\xc0\x12\xf8\x79\x80\xa9\x1a\xcb\xb5\x9a\xe6\xff\xa0\x53\x3f\x32\x89\x80\xb2\xc4\x0f\xd0\xe9\xf9\x3b\xc4\x68\xe9\x83\x61\x9b\x90\x50\xfa\x9f\x06\xa9\x6b\x96\x9c\x45\x0a\x4f\xb9\x74\x05\xa5\x9e\x45\x86\x52\x6f\xb6\x55\x6e\xbd\x1b\xfd\x11\x4a\x85\xe0\x39\xc7\x54\xe0\x5a\xdd\xa2\xbd\x41\x79\x58\xe2\xb2\x47\x54\x9f\xb2\xd3\x41\x8d\x9b\x53\x83\x5a\x00\xb2\x96\x80\x64\x23\x2d\x8c\xc2\x04\x9c\xed\x31\x34\xd0\xcc\x56\xa6\x04\x58\x04\x3a\x90\x9a\xc6\x2b\x53\x9b\xfd\xaf\x21\x2b\x81\x5d\xa5\xc0\x70\x52\x3d\x59\x2f\xbc\x89\x0a\x95\xf6\x8d\x1d\x6e\x47\x77\xac\x6d\xb6\xb5\x08\xc1\x4d\x14\x3d\xac\xf4\xfd\xe1\x59\x7f\xdd\x55\x82\xe4\x69\x2d\x47\x59\x05\x32\xb3\x56\x81\x94\xc5\x50\xe3\x26\x5a\x75\x71\x83\x64\x53\x0a\xfe\x6f\x00\x00\x00\xff\xff\xa3\x78\x8b\xab\xfd\x1d\x00\x00")

func testdataJailCommandsJsBytes() ([]byte, error) {
	return bindataRead(
		_testdataJailCommandsJs,
		"testdata/jail/commands.js",
	)
}

func testdataJailCommandsJs() (*asset, error) {
	bytes, err := testdataJailCommandsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/jail/commands.js", size: 7677, mode: os.FileMode(420), modTime: time.Unix(1522047414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataJailStatusJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xdb\xb6\x13\x7f\xf7\x5f\x71\xf5\x43\xe3\x02\xb6\xf1\xcd\x17\x43\x81\xd1\xf0\x43\x97\x65\x18\x86\x36\x19\x62\xb7\x1b\x60\x18\x01\x2d\x9d\x25\x76\x32\x29\x90\x94\xdd\x2c\xf5\xff\x3e\x90\x22\x45\x52\x72\x8a\xf5\x61\x7a\xb0\xc9\xbb\xcf\xfd\xe2\x1d\xef\x78\xa4\x12\x1e\x95\xa6\xba\x51\x8f\x19\xd5\xb4\x12\x05\x2c\xe1\x79\x04\x00\x90\x89\xc3\x81\xf2\x5c\x11\x78\x3e\x4f\x2d\x45\xa2\xaa\x05\x57\x68\x49\xa3\xf3\x62\x34\xda\x37\x3c\xd3\x4c\x70\xb8\x69\xc1\x93\x37\xf0\x3c\x3a\x07\xf2\x83\x93\x70\xf4\x91\x83\xcd\x6b\x29\xb4\xd0\x4f\x35\xce\x69\x9e\xaf\xc5\x4d\x67\xba\x93\xb4\x12\xc6\x68\xcf\xbd\xb9\x77\x6b\xa3\x4b\xa6\xe6\x9c\x1e\x70\x0b\x4b\x30\x9b\x85\x75\x69\x68\xa2\xa6\x92\x1e\x12\xdd\x96\x82\x1a\xa5\x37\x62\x75\x59\xaa\x9a\xd7\x8d\x2a\x23\xc4\x62\xe4\x62\xd7\x8d\xe4\xdf\xb4\x93\x49\xa4\x1a\x13\x43\x99\x38\x24\x26\x8c\xbb\xb0\x34\x47\x6b\x97\x8b\xc0\xc9\x51\x65\x92\xd5\x56\xac\x05\x44\x94\x08\x57\x52\x9e\x57\x28\x1d\xc6\xed\x02\x7f\x33\x2e\xa9\x9a\x39\xf2\x78\x9b\xc2\xe0\xd5\x12\x78\x53\x55\x91\xba\x23\xad\x58\x4e\xb5\xf0\x0a\xbb\x7d\x84\xc9\x44\xd5\xf1\xed\x3a\xe2\xb1\xac\xf3\xd7\x2c\x17\xfd\xd3\x74\x3c\xb7\xf9\xfa\x15\x36\xdb\x18\x23\xf1\xc8\xf0\xe4\x41\xed\x2e\x0e\x46\x35\x45\x81\xca\x1c\x81\x9a\x69\xc9\x8a\x22\x0a\x2a\xe2\xad\x5b\x96\xd1\x3f\x16\x7c\x96\x95\x94\x17\x38\x8e\x0c\xed\x9b\xaa\x52\x99\x44\xf4\xce\x06\x42\x84\x8a\x6b\x71\xf2\x62\xe2\x47\xbe\xa8\x43\xea\x61\x09\xf7\xbb\xcf\x98\x69\x57\x03\x93\x41\x71\xbc\x59\x5c\x10\xfb\xfe\xe2\xef\x6e\xe0\x0b\xd5\x7f\xc1\x86\xe0\x0f\x98\x21\x3b\xa2\xe7\x25\x86\x5c\x65\x24\x45\xda\x49\xc0\x12\xba\x02\x4b\x6e\x7b\x46\xab\x6a\x52\x53\x5d\xae\xb4\x9c\x42\x9b\xdc\x95\xee\xb4\x98\xae\xd2\xa5\xff\xb7\xd5\xfd\x9d\xc9\xbf\xc2\x49\x00\xb6\xfd\xc4\x7c\x46\x4b\x1f\x65\xf5\x46\x98\x3d\x9f\x9a\xde\xe3\x12\xb2\x37\x39\x34\xa0\xb9\xc4\xbc\xc9\x70\x12\x5d\xb7\xf6\x98\xa6\x60\x0e\xc6\x7b\xe3\x3f\xb6\xef\x00\xf0\xfa\x35\xb8\xe5\xc6\x9e\x61\x1f\x1b\x25\x3e\xc1\x2d\x12\xd4\xb9\xdb\x9d\x83\xb3\xbd\x94\x59\xba\xaf\x25\xe3\xc2\xab\x3d\x8f\xad\x39\x2b\xe1\x5a\x9e\x7d\xd9\x99\xc3\xdb\x73\x77\x68\xbd\x6a\xb4\xc7\xa5\xb4\x64\xbc\x60\xfb\xa7\x89\x44\x03\x38\x47\x19\xd2\xf8\x45\x4f\x84\x6d\x1e\x6a\x0a\xca\x5b\x74\xe2\x9b\x2b\xc3\xbf\x9a\x42\x40\x6c\x53\x79\x73\x11\x83\x3c\x56\x78\x40\xae\x87\x6a\x0c\x2c\xa8\xd9\xce\x33\xc1\x33\xaa\x27\x1d\x3e\x55\xca\x0e\xb4\x40\xaf\x75\xa0\xcb\x72\x23\x65\xbd\x80\x44\x93\x95\x74\x57\xe1\xc0\xab\x61\x6c\x1e\x1a\x07\xe8\xc0\x3d\xad\x2a\x93\xa2\xaa\x3e\xfd\xbb\x60\x5b\xf0\xec\xfb\x62\x3e\xe1\xce\xaa\x6f\x64\x35\x50\x78\xc2\x9d\xd7\x16\x0a\x42\x89\x46\x66\x48\x7a\x05\xd9\x48\x46\xa0\x91\xd5\xa5\x8a\xfb\x4c\x8f\x74\x65\x47\xc5\x2d\x37\x61\xe7\x04\xb4\x6c\xb0\xad\xa6\x7e\x5e\xdb\xfe\xce\x04\xff\x80\x4a\x99\x74\x68\xa6\x2b\x5c\xe3\x17\x3d\x85\x68\xe2\x18\x42\x7c\x9d\x2d\x6a\xa5\x9f\x2a\xec\xde\x07\xed\x1b\xa1\x12\x92\xc0\xf8\x54\x32\x8d\xe3\xe8\xc6\x0a\xae\x57\xec\x6f\x24\x70\xfd\xff\x94\xfa\x0b\x3d\xb0\xea\x89\xc0\x58\x51\xae\x66\x0a\x25\xdb\x8f\x5b\x4f\x17\xa9\x31\x58\x42\x7b\x93\xcc\xc4\xaf\x05\x37\x67\x3b\xb7\x65\x1d\x7c\x99\x42\xe7\xbd\xbf\x20\x46\x3e\x8a\xe3\xbf\x72\x39\x20\x44\x4d\x33\xa6\x9f\x08\xfc\x6f\xfe\x63\x3f\x90\x74\xa8\xbf\x10\x4e\xdf\xdb\x61\x1e\xd2\xbb\x3f\x54\x63\x2f\x6b\xe7\x50\x5a\x38\x3b\x9a\xfd\x55\x48\xd1\xf0\xfc\xc6\x05\x2e\x31\x8f\xdc\x37\x5f\x89\xac\x28\x35\x81\xb7\xd7\x29\xbd\xa6\x79\xce\x78\xf1\x1e\xf7\x9a\xc0\xf5\xdb\x8b\xcc\xb5\xa8\x09\x5c\xff\x30\xbd\x54\x98\x1b\x9b\x9d\x24\x9e\xad\xef\x87\xe7\xd1\xc8\x9c\x50\x1b\x4c\xff\xcd\x49\xe2\x09\x15\x77\x4b\x23\xe2\x30\xb0\x04\x8e\xa7\xf0\xf0\x5c\xf4\x5b\xaa\xc3\xf9\x91\x5c\x3a\x44\xef\x2d\xfb\x4d\x53\x32\x8c\x4c\x63\x2b\xbc\x66\x07\xc6\x3c\xf2\x05\x6b\xb4\xd1\x42\x36\x9c\xa4\x4f\x43\xe3\xde\x5d\x6f\x52\xf5\x27\xbe\x93\x6c\x9f\x2d\x5e\x20\xd1\x6d\xa6\xbc\x8a\xfb\xc5\xfa\xf6\xcf\x35\x01\xd7\xe2\x3b\xea\xdd\xc7\x0f\x3f\xdd\x3e\x10\xb8\xe2\xcd\x61\x87\x32\xe2\xfc\xfe\xeb\xfd\xdd\x2d\x81\xab\xba\x14\x1c\x63\xfa\xbb\xd5\xea\x8f\xfb\x87\x9f\x0d\x8b\x2a\x75\x12\x32\xbf\x8a\x0d\xe3\xd1\x54\x5f\x6c\x79\x75\xbb\x7e\xfc\xf4\xee\xfd\x47\xa3\x4d\xa1\x9e\x1d\x69\xd5\x60\x22\x13\xaa\x36\x96\x33\x05\x4c\xec\x6f\xb0\x6e\xdc\x27\xf6\x37\xd0\xec\x88\x20\xed\x5f\x84\xf4\xfd\x9e\x84\x65\xe0\x86\x16\x4f\xa2\x75\xe0\xbb\x06\x4d\xfc\x62\x1a\x55\x40\xaf\x57\x92\x21\xc9\x8d\xec\xf3\xe2\x9f\x00\x00\x00\xff\xff\x59\x9d\x9d\x6a\x4a\x0d\x00\x00")

func testdataJailStatusJsBytes() ([]byte, error) {
	return bindataRead(
		_testdataJailStatusJs,
		"testdata/jail/status.js",
	)
}

func testdataJailStatusJs() (*asset, error) {
	bytes, err := testdataJailStatusJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/jail/status.js", size: 3402, mode: os.FileMode(420), modTime: time.Unix(1522047414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataJailTxSendContextNoMessageIdJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\xc1\x8e\xdb\x36\x10\xbd\xeb\x2b\xa6\x3e\x24\x32\xa0\x95\x83\xb6\x97\xc8\xd9\x4b\x72\xeb\xa1\x05\xba\x0d\x72\x58\x04\xc1\x2c\x35\x96\x08\xd3\xa4\x4a\x8e\xd6\xbb\x58\xe8\xdf\x8b\xa1\x48\x59\x36\x8a\xf8\x44\x91\x33\x8f\x33\xef\xbd\xa1\x9f\xd1\xc3\x8f\xc0\xc8\x63\xf8\xa1\x90\xd1\xb8\x0e\xee\xe1\xad\x00\x00\x50\xee\x74\x42\xdb\x86\x06\xde\xa6\x2a\xee\x78\x0a\x83\xb3\x81\xe2\x56\x31\xed\x8b\x42\xf2\x95\xb3\x4c\x2f\x2c\x79\xd3\xbe\x38\x8c\x56\xb1\x76\x16\xb0\x6d\xbf\xcc\x27\xa5\x0d\x15\x1c\xe9\xb5\x82\x67\x34\x23\x6d\x13\xfe\x6e\x07\x67\x02\xdd\x59\xe7\x09\x6c\x80\x9e\x3c\x41\x89\x41\xd6\x3a\xc0\x89\x42\xc0\x8e\x40\xb7\x15\xa0\x6d\x41\x5b\xe0\x5e\x07\xf8\xfa\x45\xd2\x5a\x07\xd6\x31\xf4\xf8\x4c\xe0\x2c\x6d\x53\xc5\xf1\xbe\xc7\x23\xbd\x7e\x87\xfb\xf9\xb6\x7d\x31\x15\x97\xa2\x14\x1a\x53\x0e\xc8\xfd\x03\xfb\x0a\x06\xf4\x78\x0a\x0f\xec\x73\x49\xd2\xce\xbc\x09\xf7\xf0\xc7\xc3\x5f\x7f\xd6\x03\xfa\x40\xe5\x25\x70\x26\x42\x7e\x82\x72\x1b\x15\x71\x57\x31\x07\x5b\x09\x69\xfb\x62\x5d\x5e\x22\xaa\x98\x03\xe0\x3e\x22\xd5\x9e\xda\x51\x51\x99\x2b\x2d\x93\x1a\x15\x58\x3c\x2d\x94\xc9\x4f\x1f\x20\x1f\xc2\xbb\x77\x90\x96\x8f\x12\xf6\x7d\x1d\x37\x0b\xc6\xa3\xb7\xd7\x31\xfb\x25\x62\x8a\xab\xa9\xba\x75\xc0\x36\x15\x27\x37\xfd\x72\xb0\x6b\xd0\x04\x68\x47\x63\x66\x9c\xa9\x58\xb4\xec\xb5\x21\x69\xe8\x6c\x0c\x3c\x11\xd0\x0b\xa9\x91\xa9\x5d\xda\x3e\xeb\xf9\x60\x70\xc3\x68\x90\xa9\xcd\x99\x4f\xaf\x2b\xb3\x44\x89\x02\x1c\xbc\x3b\xc1\x5c\xd6\x5d\xe7\x66\xfa\xd0\x98\xbf\x29\x8c\x46\x18\x3c\xd8\x24\xca\x76\x9f\xad\xb9\x18\x37\x7d\x8f\x86\x9b\x55\xd2\x45\x95\xdd\x0e\x82\x5b\xca\x52\x6e\x34\x73\x91\xa8\xed\x3a\xe6\x8d\x3d\xda\x80\x51\x8e\xbb\x40\x96\x1b\x60\x3f\xd2\xb4\xc4\x24\x84\x26\x2f\x66\x42\x12\x79\x89\xa9\x68\x8f\xc0\x5e\xdb\x4e\x1f\x5e\x4b\x4f\x52\xf0\xda\x91\x81\x6c\xfb\xcf\xe5\xa2\xdc\xd5\xca\x90\x2d\x32\x5e\xf5\x26\xdc\x34\xc9\xa7\xb5\x7c\x5c\x5a\x63\xb7\x1c\xb0\xbb\x6c\xc7\x49\x68\xe0\x4c\x4f\xbf\xd5\xec\xbe\x91\x4e\xd7\xd4\xf1\xa0\x82\x0d\x71\x4f\x7e\xb3\xbd\xea\x60\xb7\x83\xcf\xc6\xa9\xa3\xb6\x5d\xa4\xb1\x02\x9d\x44\x4c\xbd\x9d\x7b\xb2\xb0\x22\x49\xa6\x56\xb9\xd3\x60\x88\xa9\xce\x10\xdf\xa2\x2d\x24\x5f\x8e\x67\x53\x68\xdb\x55\x17\x71\x67\xcc\x18\x31\x0e\xc0\x3d\x01\x0e\x83\xd1\x0a\x05\xb3\xca\x38\x68\x8c\x3b\x4b\x29\x9a\x81\x9d\x74\xa4\x5b\x64\x8a\x4f\x43\xbe\x74\x5d\xcc\x42\x5f\x8f\x41\xe6\x34\xf6\x4e\xdc\xd7\xb7\x84\x0b\xbd\xdb\x6b\xd1\xde\x36\x6b\xe9\x05\x60\xd3\x44\x9c\x29\x6a\x77\x33\x2e\x75\x7e\x28\x1f\xdf\x0b\xf6\x7b\x79\x7a\x6e\x2e\xd9\xff\x24\xa7\x23\xfe\x8c\x06\xad\xa2\x98\xb9\x18\xe3\x7f\x9c\xf0\x34\xc7\xad\xbb\xb9\x64\x67\x49\xb1\x6d\x3d\x85\x3c\x17\x37\x29\xe2\x16\x91\x3f\x6d\xdf\x28\x2f\x03\x9f\x13\x3e\xc1\xc7\x0f\xeb\xc9\x57\xce\x06\x67\xa8\x36\xae\x2b\x37\x5f\x2d\xbd\x0c\xa4\x64\xba\x73\x7c\xf9\xe9\xe3\x87\x6d\x03\x9b\x2a\xef\x24\x33\x65\xfd\xc6\x40\xf3\x1b\xfe\x02\x4c\x81\x43\x25\x2a\xaa\x9e\xd4\x11\xb8\x47\x06\xeb\xec\x5d\x9a\xa3\x2a\x7e\xa4\xf7\xff\x4e\xb7\xe0\xe9\xdf\x51\x72\xe0\xec\xfc\x11\xd8\xb9\xc5\x15\xc1\x01\x2a\x1e\xd1\x2c\x75\xe8\x10\xff\x18\xf4\x69\x70\x9e\xd1\xf2\xb5\xae\x29\x6a\xd3\xc0\xef\xbf\xc6\x7f\xb0\xff\x02\x00\x00\xff\xff\x9f\x55\x53\x4e\x01\x07\x00\x00")

func testdataJailTxSendContextNoMessageIdJsBytes() ([]byte, error) {
	return bindataRead(
		_testdataJailTxSendContextNoMessageIdJs,
		"testdata/jail/tx-send/context-no-message-id.js",
	)
}

func testdataJailTxSendContextNoMessageIdJs() (*asset, error) {
	bytes, err := testdataJailTxSendContextNoMessageIdJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/jail/tx-send/context-no-message-id.js", size: 1793, mode: os.FileMode(420), modTime: time.Unix(1522047414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataJailTxSendMessageIdNoContextJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x4c\x7c\x88\x6d\x40\x2b\x07\x69\x2e\xb1\xe3\x4b\x7a\xeb\xa1\x3d\x6c\x8b\x1c\x82\x60\x33\x26\x47\x12\xb3\xf4\x50\x21\x47\xf6\x2e\x16\xfe\xef\x05\x29\xea\x63\xdd\x22\x3e\x59\xe4\x9b\x37\x1f\xef\x91\xdc\x6e\xe1\x07\x1a\x5b\xde\x13\xeb\xf5\x06\xe8\xa9\x25\x25\x01\xc4\x41\x65\x58\x83\x34\x04\xaa\xf3\x9e\x58\xe0\x44\x21\x60\x4d\x60\x34\x18\x86\xef\x41\x50\xba\x50\xe6\xd5\x07\xa3\xbf\x2f\xb6\x5b\x58\x9b\x0a\xd8\x09\x54\xae\x63\x3d\x0f\xb9\x18\x6b\xd3\xce\x91\xc0\xf0\x0f\x52\x42\xba\x00\x64\x0d\xae\x25\x8f\x62\x1c\xf7\x98\xd6\x3b\x45\xa4\x37\x8b\x33\x7a\xe8\x93\xc0\x01\x5e\x16\x00\x00\x53\xb2\x1d\xac\x3e\xbc\x5f\x2d\xae\xfb\x45\xc2\x3d\xf4\xc0\x07\x85\x82\xd6\xd5\x63\x80\x72\xa7\x13\xb2\x0e\x3b\x78\xb9\x16\x69\xc5\x53\x68\x1d\x07\x4a\x4b\x29\xbe\xea\x58\xa5\xf4\x0a\xad\x5d\xb7\x28\xcd\xbd\xf8\x02\x5a\xf4\x78\x0a\xf7\xe2\x37\x99\x2b\xe6\xe9\x17\xe1\x00\x7f\xdc\xff\xf5\x67\xd9\xa2\x0f\xb4\x9e\x80\x7d\x86\xf8\x8b\x2c\xb7\xa8\xc4\x3b\xc3\x54\x5c\xc4\x6a\xf6\x8b\x45\xff\x05\x87\x14\x56\x7a\xd2\x9d\xa2\xf5\x50\xd6\x3a\xf7\x54\x00\xe3\x89\x86\x62\xe2\xcf\x54\x30\x6c\xc2\xdb\xb7\x90\xff\x7e\x8d\xb0\x6f\x73\x5c\xdf\xb6\x74\x9e\x5f\x63\xf6\x23\xe2\x9a\xfe\x5d\x8b\xdb\x39\x6e\x72\x71\x31\xd3\x9b\x8a\xe7\xa4\x99\x90\x3b\x6b\x7b\x9e\x6b\x0f\xdd\x6e\xe1\xd2\x18\x4b\xb1\xa1\x8b\xb5\x51\x6e\x7a\x22\xd5\x09\x69\x50\x8e\x85\x9e\xa4\xd7\xf9\x48\xd0\xba\xb6\xb3\x28\xa4\x87\xc8\xe3\x33\xa0\xd6\xbf\x67\x58\xd4\x23\x40\xe5\xdd\x29\xfb\xe0\xae\x76\x83\x86\x70\x80\x8a\xf3\xe8\x87\x2a\x73\x49\x69\xe8\x41\xbc\xe1\xda\x54\xcf\x6b\x4f\x11\x70\x9d\xe9\x1c\x88\xf5\xdf\x1e\x39\x60\x3f\xe0\xcc\x32\x93\x59\xa3\xe0\xe8\xa1\xa4\x8e\x77\xa7\x5d\x56\xbf\x8c\x1f\x93\x8c\xe2\xc6\x0d\x71\xd3\xf2\x19\x6d\x47\x3b\xb8\xd0\xf1\xb7\x52\xdc\x17\x32\x39\x4d\x99\x36\x0a\x58\x92\x34\xe4\x97\x9b\x7e\x76\xfb\x71\x78\x93\xc5\x01\xad\x75\x97\x00\xcf\xae\x8b\xe7\x51\x9b\x20\x86\xeb\xce\x84\x06\x8e\x24\x17\x22\x86\x37\xb1\x15\x30\x7c\x76\x2a\x9d\xa0\x30\xb0\xac\x2f\x0d\x71\x8a\xf4\xa4\xc8\x9c\x09\x64\x6a\x18\x7e\x76\xd4\x91\x06\x3a\x13\x4b\x31\xcf\x98\x85\x19\x58\x50\x04\x55\x43\xb1\x12\xc7\x75\xba\x0c\x72\xe8\x9c\xcd\xe8\xbe\x89\xff\x5c\x08\x70\x80\x55\xe5\xdc\x11\xfd\x6a\xea\xef\xb3\x75\xea\xd1\x70\x9d\xd4\x2d\xc0\x64\x37\x64\xed\x52\xd9\xaf\xc8\x43\x3c\xc3\xad\x25\xa1\x72\xa0\xf8\x92\xfc\x15\xe3\xe3\x76\xef\x2e\xc3\x75\x31\xb9\xa4\xe7\x4c\x88\xae\x4d\x75\x63\xdb\x5a\xd3\x0f\xa9\x18\xdb\x8b\xf3\x8d\xa5\x18\x89\x03\x3e\xa3\x35\x1a\x85\xd2\xa5\x34\x24\x9d\x17\x33\xda\xa3\xc1\x10\x4f\x77\xd2\x96\xa4\x29\x6f\x0d\x15\xed\x73\x63\xca\x97\xe5\x8c\xe8\x2e\x12\x2c\x77\x89\xe7\x9a\xbc\x79\x73\xee\xca\xe1\xde\xfa\xba\x8a\xdc\xab\x6f\x70\xb8\x75\xed\xfe\x17\x31\x35\xc9\x67\xb4\xc8\x8a\x52\xe4\x68\xfc\xff\x71\xfa\xb1\xc7\xcd\xbb\x99\xa2\x07\xcb\xa2\xd6\x9e\x42\x3c\x46\x31\xec\x26\x24\x9e\x86\x68\xef\xbc\x3c\x39\x7b\x3f\x5e\x1d\x43\xc4\x27\xf8\xf8\x6e\x7e\x87\x28\xc7\xc1\x59\x2a\xad\xab\xd7\xcb\x7f\xb8\x7f\x7c\x48\x8f\x19\xd6\x9f\x3e\xbe\xdb\xec\x60\x59\x0c\x2b\xf9\xb4\x0c\x02\x76\x81\xd2\x5b\x24\x4f\x20\x14\x24\x14\x51\x46\xd5\x90\x7a\x04\x69\x50\x80\x1d\xdf\xe5\x3b\xa7\x48\x1f\xd9\x9b\x77\x26\x80\xa7\x9f\x5d\x8c\x81\x8b\xf3\x8f\x20\xce\x0d\xa4\xc1\x01\x2a\xe9\xd0\x8e\x65\x98\x90\x1e\x2e\x73\x6a\x9d\x17\x64\x79\xad\x6b\x46\x2d\x77\xf0\xe1\x7d\x7a\x50\xfe\x0d\x00\x00\xff\xff\x81\xec\x3a\x33\x53\x07\x00\x00")

func testdataJailTxSendMessageIdNoContextJsBytes() ([]byte, error) {
	return bindataRead(
		_testdataJailTxSendMessageIdNoContextJs,
		"testdata/jail/tx-send/message-id-no-context.js",
	)
}

func testdataJailTxSendMessageIdNoContextJs() (*asset, error) {
	bytes, err := testdataJailTxSendMessageIdNoContextJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/jail/tx-send/message-id-no-context.js", size: 1875, mode: os.FileMode(420), modTime: time.Unix(1522047414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataJailTxSendNoMessageIdOrContextJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xb1\x6e\xdb\x30\x10\xdd\xf5\x15\x57\x0f\x89\x0c\xc8\x4a\xd0\x76\x89\x1d\x2f\x19\x3b\xb4\x43\x5a\x64\x08\x82\xe0\x42\x9d\x25\x22\x14\xa9\x92\xa7\xd8\x45\xa0\x7f\x2f\x48\x91\xb2\x22\x14\xd5\x24\x91\xef\xde\xdd\xbd\xf7\xec\xec\x0d\x2d\x3c\x3b\x46\xee\xdd\xb3\x40\x46\x65\x6a\xd8\xc3\x7b\x06\x00\x20\x4c\xdb\xa2\xae\xdc\x16\xde\x87\x22\x9c\x58\x72\x9d\xd1\x8e\xc2\x51\x36\xec\xb2\xec\xd0\x6b\xc1\xd2\x68\x10\xa8\x54\xde\x21\x37\xf7\x6c\x0b\xe8\xd0\x62\xeb\xee\xd9\xae\x23\x97\xef\x33\x1e\xc2\x1e\xbe\xdd\xff\xf8\x5e\x76\x68\x1d\xe5\x67\xe0\xd8\xc1\x3f\x9e\x65\x89\x0a\xbc\x33\xcc\x41\x17\x7e\x9a\x5d\x96\x8d\x5f\xb0\x0f\x65\xa5\xa5\xaa\x17\x94\xa7\xb1\xf2\xb8\x53\x01\x1a\x5b\x4a\xc3\xf8\x47\x1e\x20\x5d\xc2\xc5\x05\xc4\xd7\x47\x0f\x7b\x9a\xe3\xc6\xb5\xb9\xb7\xfa\x23\x66\x37\x21\x86\xf0\x36\x14\x4b\x1d\xd7\x71\x38\xdf\xe9\xd3\x41\xcf\x49\x23\xa1\xee\x95\x1a\x79\x86\x2c\xe9\x0b\x7b\x38\xe8\x28\xcb\x7a\x97\xcd\xd0\x41\x0f\xc7\x56\xea\x5a\x1e\xfe\xe4\x96\xfc\xfd\x30\xb3\xc0\x91\xae\x7e\x5a\xd4\x0e\xc7\xdd\x23\xc9\xcc\x81\x0a\x19\x27\x7b\x83\x70\xd6\xb4\xdb\x68\x4c\xe9\x3f\xce\x0a\xb3\x99\x2e\xd8\x9c\x8f\xdf\x50\xf5\xb4\x85\x23\xbd\x7c\x29\xd9\x3c\x90\x8c\x6d\xca\x70\x51\xc0\x8a\xb8\x21\xbb\x5a\x8f\x6b\x45\x09\xae\xae\xe0\x4e\x19\xf1\x2a\x75\x1d\x82\x52\x80\x64\x38\x4a\xa5\xd2\x6e\xc7\x86\x34\xf0\x79\x76\x90\xce\xc7\xaf\x53\xc4\x54\x26\x8a\x87\x46\x2a\x0a\xf5\xfe\x9a\x4e\x24\x7a\x96\xba\x2e\x60\xd4\x7d\x53\x9b\x91\x33\x20\xfa\x0e\xb8\x21\xc0\xae\x53\x52\xa0\xe7\x2c\x12\x0f\x2a\x65\x8e\x7e\x14\xc9\xc0\xc6\x6f\x24\x2b\x64\x02\xd4\xd5\xd4\x74\x3e\xcc\x24\x5f\x83\xce\x07\x33\xec\x4e\xdc\x94\x4b\xc1\xbd\xbc\xc9\xf5\xb8\xd8\xfb\x6a\x46\xb4\xf1\x04\xab\x6d\xe0\x19\x82\x77\x8b\xc8\x94\xe9\x27\xf7\x78\xe9\xb9\x2f\x9f\x60\xbf\x74\x75\xf7\x9f\x9a\x9a\xf8\x0e\x15\x6a\x41\xa1\x72\x0a\xc6\x3f\x92\xf0\x32\xe2\xe6\xdb\x9c\xab\x93\xa5\x58\x55\x96\x5c\x8a\xe1\xa2\xc4\xa7\xc5\xdb\x1f\x8f\x17\xce\xfb\xd0\xa7\x82\x5b\xb8\xb9\x9e\xa7\x5f\x18\xed\x8c\xa2\x52\x99\x3a\x5f\xfd\xd2\x74\xea\x48\x30\x55\x53\x83\xfc\xf6\xe6\x7a\xbd\x85\x55\x91\x4e\x62\x98\x92\x7f\xbd\xa3\x0a\xa4\x06\x3e\x01\x93\x63\x57\x78\x17\x45\x43\xe2\x15\xb8\x41\x06\x6d\xf4\x46\x18\xcd\x74\xe2\x22\x7c\xb4\xe4\x1c\xd6\xb4\x91\x0e\x2c\xfd\xee\x7d\x0d\x1c\x8d\x7d\x05\x36\x26\x91\x3a\x03\x28\xb8\x47\x35\x8d\x21\x1d\x68\xc3\x20\xdb\xce\x58\x46\xcd\x1f\x6d\x8d\xa8\xd5\x16\xbe\x7e\xf6\x7f\x85\x7f\x03\x00\x00\xff\xff\xfd\x93\xd0\x40\x4a\x05\x00\x00")

func testdataJailTxSendNoMessageIdOrContextJsBytes() ([]byte, error) {
	return bindataRead(
		_testdataJailTxSendNoMessageIdOrContextJs,
		"testdata/jail/tx-send/no-message-id-or-context.js",
	)
}

func testdataJailTxSendNoMessageIdOrContextJs() (*asset, error) {
	bytes, err := testdataJailTxSendNoMessageIdOrContextJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/jail/tx-send/no-message-id-or-context.js", size: 1354, mode: os.FileMode(420), modTime: time.Unix(1522047414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataJailTxSendTxSendJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x8f\xdb\x36\x13\xbe\xfb\x57\x4c\xf6\x90\x95\x03\xad\x1d\xe4\xcd\x25\x76\xf6\x90\xbc\xb7\x1e\x5a\xa0\xdb\x22\x28\x16\xc1\x66\x24\x8d\x24\x66\x69\x52\x21\x47\xf6\xba\x0b\xff\xf7\x62\x28\x4a\xa2\x9d\x20\xbd\xf6\x26\x91\xf3\xcd\x67\x9e\x99\xf5\x1a\xbe\xa2\xd2\xab\x3b\x32\x55\xb6\x04\x7a\xea\xa8\x64\x0f\x6c\xa1\x56\xa6\x02\x6e\x09\xca\xde\x39\x32\x0c\x3b\xf2\x1e\x1b\x02\x55\x81\x32\xf0\xc5\x33\x72\xef\x57\xf1\xf4\x41\x55\x5f\x16\xeb\x35\x64\xaa\x06\x63\x19\x6a\xdb\x9b\x2a\x55\x39\x28\xad\xc3\x4d\x41\xa0\xcc\x57\x2a\x99\xaa\x1c\xd0\x54\x60\x3b\x72\xc8\xca\x9a\x41\xa6\x73\xb6\x24\xaa\x96\x8b\x3d\x3a\x18\x9c\xc0\x2d\x3c\x2f\x00\x00\x66\x67\x1b\xb8\x7e\xfb\xe6\x1a\xd6\x6b\x68\xb4\x2d\x50\x27\xae\x72\x68\x88\x3d\x38\xea\x34\x96\x14\x82\xf5\x64\xaa\x3f\x1c\x1a\x8f\x65\x70\x94\x59\x07\x68\x8e\x60\xb9\x25\x07\x3b\xe2\xd6\x56\xcb\xc5\x69\xbb\x08\x4e\x1f\x06\xaf\x0f\x25\x32\x6a\xdb\x4c\xde\x4b\xbb\xdb\xa1\xa9\xfc\x06\x9e\x4f\x79\x38\x71\xe4\x3b\x6b\x3c\x85\xa3\x49\xbf\xb4\x86\xe9\x89\x45\xef\xb4\x5d\xd4\xbd\x19\x9c\x62\x55\xfd\x7f\xb8\xc9\x8c\xcf\xe1\x91\x8e\x39\xec\x51\xf7\xb4\x84\x67\x49\x84\x5b\xe5\x61\x92\x56\x3e\x3e\x06\x55\xf2\x1a\x05\x41\xe7\xc8\x93\xe1\x1c\xd0\xc7\xba\xdc\x34\x16\x7a\x4f\x1e\x14\x8b\x8c\x27\x1e\x7d\x87\xe8\x54\x0d\xd9\x8b\xcc\x78\xa9\x40\x3c\x5f\x2e\x63\x2e\x43\x3e\xe1\xec\xde\xf8\xcf\x21\xd6\x70\x71\x5a\x5c\x5c\xdd\x3f\xd2\x51\xee\x43\xa8\xdb\xc5\x69\x31\x67\x54\xa2\xd6\x59\x87\xdc\xde\xb1\xcb\xa1\x43\x87\x3b\x7f\xc7\x6e\xf4\x21\xb5\x18\x0e\xe1\x16\x7e\xb9\xfb\xed\xd7\x55\x87\xce\x53\x36\x0b\xe6\x53\x2c\x62\xe5\x52\x2a\xd8\x4d\x64\x6a\x93\x4b\xc5\xb7\x8b\x70\xb2\x5e\xc3\x9d\x32\x25\xc1\x81\x00\xb5\xb6\x07\x30\x52\x74\x47\xdf\x7a\xf2\xa1\x1e\x11\x49\xf0\x4a\xed\x76\x54\x29\x64\xd2\xc7\x57\x80\x35\x93\x0b\xa0\x07\x5b\x30\x2a\xe3\x13\xec\x8c\x96\x0f\x04\xbe\xb5\xbd\xae\xa4\xf0\x25\x3a\xaa\x7b\x0d\x76\x4f\xee\xe0\x14\xb3\x32\xcd\x08\xbb\xf1\xad\xf7\xe8\x14\x16\x9a\x56\xa3\x85\x4f\xf2\x60\xb6\xc0\x42\x1f\x47\x53\x5a\xed\x14\xaf\x7d\x69\x3b\x92\xf0\xc6\x1a\xcf\xa0\x4e\x9e\xe1\x1c\x43\x8b\x21\x7d\xb8\x0d\x75\x5a\x39\xaa\xfa\x92\xb2\xf1\x1d\xb2\x08\xd4\x1c\x0c\xee\x28\x7d\x61\x41\xc0\x88\xe2\x97\x2f\x21\x7e\xde\x8b\xd8\xe7\x54\x6e\xc0\x32\xf7\xce\x9c\xcb\x6c\x27\x89\x08\x8e\xfc\xb2\x39\x96\x31\xb8\x80\xb5\xda\xa4\x46\xa3\x41\xd3\x6b\xbd\x8d\xd0\x9a\xca\xdb\x2a\x4d\x92\xd0\x41\x6b\xa9\x30\x3d\x51\xd9\x0b\xd2\xc7\xb4\x03\x13\x08\xe6\x6d\xd7\x6b\x64\x9a\x1e\xa6\x38\x26\x7d\x14\x00\xe8\xa1\x76\x76\x37\x77\xc4\x50\x3e\xd4\xfa\x77\xf2\xbd\x96\x0a\xd6\x26\x42\x6e\xb9\x1d\xbb\x76\xea\xe9\xf8\xdf\x6b\xde\x24\x4a\x33\xe6\x04\x65\x36\x9f\xe2\x2a\xc3\x43\xca\x1f\x2a\x03\xcf\xc4\xed\x03\xcf\xbc\x22\x24\xba\x01\x76\x3d\x9d\x52\x03\x58\x55\x4a\xae\x51\xeb\xe3\x6c\x2a\x90\xd4\x97\x84\x3e\xa5\xaf\x0f\xa4\xf5\x2a\xd5\xfd\xcb\xf6\x50\xa2\x81\x01\x35\x43\x49\x93\x3a\x15\xc7\x78\x26\x90\xfc\x01\xa0\xce\x12\x69\xed\x81\xf6\xe4\xc0\x87\xb6\xf1\xe4\x14\x6a\xf5\xf7\x40\xbd\x4d\x8f\xae\x9a\xca\xee\x48\x13\x7a\xe1\xce\xb9\x73\x62\xe3\x5c\xf4\x4a\x34\xad\x7c\x6c\x26\x21\xf5\xa3\xed\xc1\xd0\xc4\x5b\x63\xfb\xa8\x3a\xdc\xf4\x9e\xbe\xe7\x6c\xc8\x14\xa7\xf6\x0e\xd6\x3d\x7a\x28\x48\xdb\x43\x2e\xf4\xc5\xe4\x39\x17\x9a\x9b\xc6\x88\x48\x48\xc5\x26\x92\x54\x06\x5a\xd5\xb4\xfa\x28\x75\x18\x67\x16\x99\xbd\x72\xd6\xec\xc8\xf0\xf2\x92\xf7\x36\x53\xc1\xbe\x1b\x65\x9f\x07\xbc\x46\x6c\x47\x20\x07\x6e\xf2\xec\x94\x69\x54\x7d\xcc\x1c\x09\x9e\x52\x3a\x94\x29\xf3\xc1\x1f\x4d\x99\x8c\x9a\x11\x79\x09\x25\x56\xc8\x78\x86\x3f\xc1\xef\x26\x32\xe5\x4a\x7e\xe6\x57\x63\x3b\x5d\xb0\x9d\x8f\x03\x17\x6f\xe0\x40\xc5\xff\x56\x6c\x3f\x91\x8a\x6e\x56\xe1\x22\x87\x2b\x92\xc1\x76\xb5\x3c\x4b\x23\x48\x13\xb7\xab\x8b\x69\x98\x49\x40\xf9\x34\x79\xb2\xe5\x73\xfa\x12\x1f\xc0\x77\x54\xaa\x5a\x09\xea\x50\xeb\x02\xcb\xc7\x30\x9c\x8c\xed\x9b\x56\x9e\x78\x87\x8f\x74\x31\xbc\x50\xaa\x30\xe0\xf8\xf4\x83\x22\xfd\x37\xeb\xb3\x5e\x27\xfb\xc5\x30\x52\x7c\x40\x2c\x5b\xa8\x94\x17\xd6\xef\x95\x6f\xa1\x20\x3e\x10\x19\x78\x21\xa9\x80\x32\x7b\x5b\x86\x1e\xf2\xa3\x95\xec\xd0\x92\x09\x9a\x8e\x4a\x52\x7b\x82\x84\x23\xe0\x5b\x4f\x3d\x55\x40\xfb\x30\xcb\x13\x8f\xb1\xf9\x46\x2b\xc8\x8c\x65\x4b\x12\x89\x35\x4d\xd8\xc4\xa2\x6a\x6a\x4d\x55\x43\x12\xdf\x41\x18\x6e\xe1\xba\xb6\xb6\x40\x77\x3d\xe7\xf7\x51\xdb\xf2\x31\x50\x05\x6a\x3d\xf7\x53\x04\x78\x08\xfb\xcc\xb8\x97\x9d\xa7\xd3\xc4\xc9\x5c\x0b\xd4\x2d\xfa\xc3\x8a\x22\xc4\xad\x4c\x93\x27\x2b\x49\xb0\x19\x24\xfa\x2e\xc4\x8d\x5d\xa7\xd5\x50\xa4\x7c\x4a\x4f\xea\x2b\xa1\x0c\xbb\xcb\x1e\xb5\xaa\x90\x29\x6c\x84\xa3\xd3\x34\x98\x09\x1e\x2d\x7a\xd9\x14\x7e\x8a\xe6\xe5\x79\xe7\x3e\x5f\x25\x86\x6e\xc4\xc0\xd5\x26\xd8\x39\x6d\xc3\xd2\x76\x31\xd3\x56\xe3\xa2\x77\x7f\x2d\xc6\xaf\x65\x2c\x5f\x78\xd9\xfe\x8b\x4e\xa0\x81\x49\xf1\x92\x14\x7e\xa6\xdd\x10\x7f\x44\x8d\xa6\xa4\xa0\x3e\xf5\xcd\x0f\x1a\xa5\x18\xe4\xd2\x62\xcc\xda\x23\xe2\xb1\xaa\x1c\xf9\x71\xf4\x5d\xa8\x48\x33\x49\x77\xc4\xe3\xb9\x31\xb6\xd3\x50\x1f\x35\xde\xc3\xbb\xd7\x17\xcb\xa3\xb7\x9a\x56\xda\x36\xd9\xd5\x9f\x66\xa2\xe1\x51\x3e\x7b\xff\xee\xf5\x72\x03\x57\xf9\x78\xb2\x4c\xd6\xcb\xf5\x5a\xc6\x40\xe0\x6c\x7e\x0a\xe4\xee\xf3\xb0\x12\xb5\x54\x3e\x02\xb7\xc8\x60\xac\xb9\x89\xfc\x9c\x87\x9f\x08\xed\x1b\xe5\xc7\x1d\xcf\x0f\x43\x80\xad\x1d\x8d\x7a\x0b\x58\x72\x8f\x7a\x0a\x43\xf9\x30\x2d\xd4\xae\xb3\x8e\xd1\xf0\x39\x2c\xa2\xd4\xd5\x06\xde\xbe\x09\xfb\xfb\x3f\x01\x00\x00\xff\xff\x20\x1c\x15\x36\x0f\x0d\x00\x00")

func testdataJailTxSendTxSendJsBytes() ([]byte, error) {
	return bindataRead(
		_testdataJailTxSendTxSendJs,
		"testdata/jail/tx-send/tx-send.js",
	)
}

func testdataJailTxSendTxSendJs() (*asset, error) {
	bytes, err := testdataJailTxSendTxSendJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/jail/tx-send/tx-send.js", size: 3343, mode: os.FileMode(420), modTime: time.Unix(1522047414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataNodeTestSol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x4a\x63\x11\x44\x6c\x24\xd7\xb0\x16\xc6\xcd\x2a\x0b\x71\x46\x66\xde\x16\x22\xb9\xbb\xac\xe6\x2f\x3f\xf8\x5f\x2e\x8f\xa7\x20\x6c\xa9\x73\xe5\x1b\xd7\xc3\x78\x1a\xcf\x53\x4a\xd9\x94\x2e\x99\xb8\x94\x20\x3e\x09\x00\xee\x4d\x33\xab\x29\x66\x6b\xb7\xa5\xec\xaa\x12\x32\x20\x9b\x06\x45\x09\x2f\x6c\xae\xd1\x7d\xd8\x96\xde\x9f\x71\xdc\xcb\xf4\xb3\x35\xad\xdf\x00\x00\x00\xff\xff\x5a\xcc\x10\x28\x77\x00\x00\x00")

func testdataNodeTestSolBytes() ([]byte, error) {
	return bindataRead(
		_testdataNodeTestSol,
		"testdata/node/test.sol",
	)
}

func testdataNodeTestSol() (*asset, error) {
	bytes, err := testdataNodeTestSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/node/test.sol", size: 119, mode: os.FileMode(420), modTime: time.Unix(1522047414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/public-chain-accounts.json": configPublicChainAccountsJson,
	"config/status-chain-accounts.json": configStatusChainAccountsJson,
	"config/status-chain-genesis.json": configStatusChainGenesisJson,
	"config/test-data.json": configTestDataJson,
	"keys/bootnode.key": keysBootnodeKey,
	"keys/firebaseauthkey": keysFirebaseauthkey,
	"keys/test-account1-status-chain.pk": keysTestAccount1StatusChainPk,
	"keys/test-account1.pk": keysTestAccount1Pk,
	"keys/test-account2-status-chain.pk": keysTestAccount2StatusChainPk,
	"keys/test-account2.pk": keysTestAccount2Pk,
	"keys/test-account3-before-eip55.pk": keysTestAccount3BeforeEip55Pk,
	"keys/wnodepassword": keysWnodepassword,
	"testdata/jail/commands.js": testdataJailCommandsJs,
	"testdata/jail/status.js": testdataJailStatusJs,
	"testdata/jail/tx-send/context-no-message-id.js": testdataJailTxSendContextNoMessageIdJs,
	"testdata/jail/tx-send/message-id-no-context.js": testdataJailTxSendMessageIdNoContextJs,
	"testdata/jail/tx-send/no-message-id-or-context.js": testdataJailTxSendNoMessageIdOrContextJs,
	"testdata/jail/tx-send/tx-send.js": testdataJailTxSendTxSendJs,
	"testdata/node/test.sol": testdataNodeTestSol,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"public-chain-accounts.json": &bintree{configPublicChainAccountsJson, map[string]*bintree{}},
		"status-chain-accounts.json": &bintree{configStatusChainAccountsJson, map[string]*bintree{}},
		"status-chain-genesis.json": &bintree{configStatusChainGenesisJson, map[string]*bintree{}},
		"test-data.json": &bintree{configTestDataJson, map[string]*bintree{}},
	}},
	"keys": &bintree{nil, map[string]*bintree{
		"bootnode.key": &bintree{keysBootnodeKey, map[string]*bintree{}},
		"firebaseauthkey": &bintree{keysFirebaseauthkey, map[string]*bintree{}},
		"test-account1-status-chain.pk": &bintree{keysTestAccount1StatusChainPk, map[string]*bintree{}},
		"test-account1.pk": &bintree{keysTestAccount1Pk, map[string]*bintree{}},
		"test-account2-status-chain.pk": &bintree{keysTestAccount2StatusChainPk, map[string]*bintree{}},
		"test-account2.pk": &bintree{keysTestAccount2Pk, map[string]*bintree{}},
		"test-account3-before-eip55.pk": &bintree{keysTestAccount3BeforeEip55Pk, map[string]*bintree{}},
		"wnodepassword": &bintree{keysWnodepassword, map[string]*bintree{}},
	}},
	"testdata": &bintree{nil, map[string]*bintree{
		"jail": &bintree{nil, map[string]*bintree{
			"commands.js": &bintree{testdataJailCommandsJs, map[string]*bintree{}},
			"status.js": &bintree{testdataJailStatusJs, map[string]*bintree{}},
			"tx-send": &bintree{nil, map[string]*bintree{
				"context-no-message-id.js": &bintree{testdataJailTxSendContextNoMessageIdJs, map[string]*bintree{}},
				"message-id-no-context.js": &bintree{testdataJailTxSendMessageIdNoContextJs, map[string]*bintree{}},
				"no-message-id-or-context.js": &bintree{testdataJailTxSendNoMessageIdOrContextJs, map[string]*bintree{}},
				"tx-send.js": &bintree{testdataJailTxSendTxSendJs, map[string]*bintree{}},
			}},
		}},
		"node": &bintree{nil, map[string]*bintree{
			"test.sol": &bintree{testdataNodeTestSol, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

