// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../config/README.md (3.132kB)
// ../config/cli/fleet-eth.beta.json (3.228kB)
// ../config/cli/fleet-eth.prod.json (3.234kB)
// ../config/cli/fleet-eth.staging.json (1.848kB)
// ../config/cli/fleet-eth.test.json (1.527kB)
// ../config/cli/les-enabled.json (58B)
// ../config/cli/mailserver-enabled.json (176B)
// ../config/status-chain-genesis.json (612B)
// keys/bootnode.key (65B)
// keys/firebaseauthkey (153B)
// keys/test-account1-status-chain.pk (489B)
// keys/test-account1.pk (491B)
// keys/test-account2-status-chain.pk (489B)
// keys/test-account2.pk (491B)
// keys/test-account3-before-eip55.pk (489B)

package static

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ConfigReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5d\x6f\xdb\x3a\x12\x7d\xd7\xaf\x18\xa8\x0f\xdb\x00\xa9\xe4\xc4\x76\x92\xab\x97\x6d\x9a\xa4\x37\xd9\x4d\xd3\xc0\x49\xf7\x3e\x14\x85\x45\x8b\x63\x89\xb7\x14\x47\x97\xa4\xec\xba\x8b\xfe\xf7\xc5\x50\xf2\x57\x9c\x5d\x60\x91\xc0\xb6\xc8\x99\xc3\x99\x73\x46\x33\x7c\x03\x77\xc6\x5b\x92\x6d\xe1\x15\x99\x28\x7a\xae\x94\x03\x49\x45\x5b\xa3\xf1\x20\xd1\x15\x56\xcd\xd0\x81\xaf\x10\xc4\x42\x28\x2d\x66\x1a\x81\x1a\xb6\x76\xa0\x4c\xd8\xf8\xc7\xd3\xe7\x07\x28\xc8\xcc\x55\x09\x73\xb2\x90\x3b\x2f\x7c\xeb\xde\x95\x94\x27\x0c\x89\xe0\xbc\x6d\x0b\xdf\x5a\x04\x9a\x1f\xb8\xf0\x89\x38\x57\x06\xe5\x1a\xf0\x6b\xde\x08\x2b\x6a\x97\x76\x16\x49\x49\xf9\xb7\xb7\xe9\xcb\xb5\x23\x98\x2b\x8d\xc7\xb0\xac\x54\x51\x81\xd0\x8e\x18\xd1\x0b\x65\x18\xd0\x0b\xa5\x51\x42\x41\x35\xa7\xe2\x80\x0c\xd4\x28\x8c\x32\x25\xc7\x80\xa2\xa8\xfa\x34\x12\xe0\x08\xf3\x07\x92\x78\x15\xa0\xf3\x3e\xdc\x3e\xaa\x2e\xf9\x12\x0d\x5a\xa1\xfb\x98\x5b\x2b\xd8\x15\xbe\xe3\xca\x81\xf0\xc1\x62\x3a\xb5\x44\x7e\x3a\xdd\x4b\x91\x23\x4c\xa2\xe8\xae\x5b\xea\xf8\xec\xc9\xa3\x39\x08\xb3\xda\x70\x29\x2c\x82\x27\x82\x85\x28\x5b\x84\x39\xa2\x86\xb9\x45\x5e\x83\xaf\xd4\xa0\x01\x61\x40\x39\xd7\xe2\xb7\xb7\x95\xf7\x8d\xcb\xd2\xb4\x54\xbe\x6a\x67\x49\x41\x75\xda\x33\xae\x36\xbf\x4a\x4a\x83\xb5\x4b\x0d\x2e\x8f\x92\x28\xba\xf9\x21\xea\x46\xe3\x46\x27\xa5\xd1\x41\x21\x0c\xcc\x10\x16\x0a\x97\xbb\xec\x77\x36\x69\xa1\x15\xf3\xbe\x7d\x3a\x82\x39\x69\x89\x36\x89\xa2\x37\x70\x57\x37\x64\xbd\x30\x1e\x9e\x30\x54\x8f\xeb\xb4\x7e\x21\xad\x43\xd6\xcd\x07\x78\x4f\xe0\x70\x11\x78\x74\xbd\x4f\xc7\x7e\x4d\xce\x83\xda\x00\x12\xb3\xce\x84\x68\xe5\xd8\x73\x86\x9a\x96\x7c\xe8\x9b\x3d\x9d\xba\xf3\x98\xf5\x57\xca\xaa\x97\x28\x89\xa2\x4b\x03\xd8\x27\x4f\xf3\x97\x47\x39\xf4\x5e\x99\xd2\xc1\x92\x5a\xcd\x31\x16\xba\x95\x98\x45\x79\x9e\xff\xe9\xc8\x44\xff\x8e\x00\x00\xe2\x07\xf4\x4b\xb2\xdf\xef\xae\xe3\x0c\x4e\x8e\xbb\xb5\x6b\xe1\xc5\xb5\xb2\x71\x06\x71\xea\xeb\x66\xcb\xfc\x3b\x29\xbc\x88\x7b\x2b\x8e\xf7\x9f\xb8\x62\xab\x93\xd3\xe1\x5f\x4b\x7c\xf1\xb9\xb6\x9b\xa0\x91\xf8\x73\x41\xad\x8b\x33\xf0\xb6\xc5\x8d\xff\xb5\x72\x05\x2d\xd0\x32\xc6\x5c\x68\xb7\xde\xb9\x67\x72\xcc\xa5\x94\x21\x84\x41\x12\xfe\xb2\xe1\x60\x38\xd8\x80\x5e\xca\x05\x5a\xaf\x1c\xae\xad\x4e\x4e\x93\xe1\x28\x19\x9f\x25\xe7\x17\xdb\x83\x4b\x06\xb2\xcf\xd4\xa8\x82\x0f\xff\x1a\x2f\x2b\xe5\x1a\xb4\xb5\x50\x3a\xfe\x16\xfd\x62\x32\x42\x0d\xaf\xa8\xfd\x9b\x84\x25\xf3\xe6\x09\xd0\x84\x66\x10\x38\x9f\x3c\x5e\x01\x53\xda\x9b\x18\x44\x79\xc0\xe1\xed\xf3\xf3\xe3\x4d\xf0\x91\xfb\x29\xf2\xc6\x2d\x39\xbf\x93\x46\xbc\xb3\xf5\x48\x96\xb7\x2e\xc6\xa3\xf1\x3a\xad\xc7\xbb\x4f\x24\x5b\x8d\x1c\x6e\x8c\xbe\x3a\x36\xe8\x8f\x97\x38\x1b\x1e\x0b\x59\x2b\x13\x6f\x62\x36\x40\x56\xa2\xe5\x70\x85\xfc\xb3\x75\x1e\x34\x95\x25\x37\x81\x8d\xf0\xff\x23\xe2\x7b\x2a\x3f\x2a\x8d\x41\xe1\x85\xb0\xa9\xa6\x72\xab\x72\xa2\xa9\x5c\x87\x79\x4f\xe5\x3d\x2e\x50\xb3\xe5\xdd\xc3\xc7\xcf\x3b\xeb\x9f\xc4\x8f\x27\xf5\x93\x31\x4e\x07\x83\xbd\xe5\x0f\xa2\xf8\xde\x36\x9c\xc2\x78\xbb\x7e\x45\x75\x63\xd1\xb9\x09\x79\x7e\x69\x7a\xa2\xfa\x7c\xfe\x25\xb4\x92\x90\xaf\x4f\xcb\xb7\x49\x08\x8b\x19\xe4\x37\x93\xc9\xe7\x49\x7e\x0c\xf9\x1f\x97\x93\x07\xfe\xe6\x58\xf8\xfb\xfa\xe6\xc3\x97\xdf\xf9\xc7\xf3\xe4\xf2\xea\x26\xef\xde\xa4\x3f\x3a\x95\xd7\x4d\x6f\xad\x70\xa7\xef\x8a\x5a\x0b\x86\x64\x68\x40\x16\xb5\x58\x41\x6f\xff\xf6\xe9\xf6\xf6\x08\x1a\x4b\x9e\x0a\xd2\x50\xa3\x73\xa2\xc4\x8e\x47\xad\x37\xd5\xd1\xbf\x49\xe0\x2b\xe5\x0e\x88\xdd\x3b\x3a\xce\xa0\x5b\x0e\x5b\xaf\x55\xc8\xce\xc6\x27\xa1\xf4\x13\xda\x05\xda\x43\x8b\x7b\x55\x56\xfe\x4a\x2b\x34\x7e\xff\x55\x09\xbb\x5b\xcf\x47\xe1\xdc\x92\x2c\x9f\x11\xf7\x72\xd2\x7c\xae\x95\xc1\x77\xca\xcc\xe8\x47\x1c\x9c\x7e\xf5\xa4\x87\xe9\x70\xe8\x9c\x73\x73\x6b\x1d\xca\x30\xf2\xdc\xaa\xae\xd1\x5b\x55\x00\x9a\xc2\xae\x42\x4f\xe7\x6e\x53\x29\xe7\xc9\xae\xc0\xe2\x5f\x2d\x3a\xef\x92\x28\xfa\xb0\xe2\xc1\x22\x5a\xed\x41\x79\x58\x2a\xad\x19\x06\x72\xcd\x92\xca\x59\x0e\x58\xcf\x50\x4a\x94\xc0\x6d\x64\x26\x1c\x26\xf0\x4c\xc1\xa6\x21\xe7\x4b\x8b\x3c\x78\x9d\x47\x21\x83\x5c\x5c\xb9\x4c\x78\x24\xa4\x0c\x6c\xf3\x43\x90\xaf\x6b\x84\x59\xf4\x92\xfd\xeb\x1e\xf7\x80\xfe\xf8\xf1\xf7\xff\x4b\x92\x2f\x93\x3b\xe6\x70\x1d\x56\x96\xa6\xad\x43\x9b\x35\x3d\x45\xef\x2b\x72\x3e\xe3\xb6\xf0\xf7\x7e\xca\xc5\xbd\xef\xaf\x3d\x86\xa3\xe9\xf4\xe1\xf3\xf3\x4d\x36\x9d\x86\x61\xb0\x66\x67\x0d\xd3\xb1\x3c\x5b\xc1\x53\xd0\x0a\x2e\x9b\x06\x84\x91\xf0\x95\x73\xe4\x1e\xe5\x82\x30\x6e\x3b\x18\xe7\x1a\xd1\xbb\xa4\xd3\x36\x51\x75\x7a\xc4\x62\xe5\xaf\x69\x9d\xf7\x63\xe5\x4a\xb7\xdc\x04\x77\x26\x8b\x72\xeb\x29\x56\x0b\x13\x2a\x7c\x59\x09\x0f\x0d\xa2\x75\xe1\xfc\x19\x91\x77\xde\x8a\x26\xbc\x27\xae\xe3\x7c\xe7\xee\x13\x54\x12\xa6\x08\x33\xd7\x60\xe1\x19\x01\x0d\xab\xee\xbc\xb0\x5c\x0c\xbb\xc2\xc4\x7b\x21\x6c\x14\x78\x95\xfd\xf8\x23\x67\xd8\x37\xbf\x64\x86\xdb\x71\xf3\x81\xc8\xf3\xc8\x09\x8d\x7c\x2d\x2b\x72\x80\x59\x9a\x0e\x47\x63\xb4\xbe\xfb\x7c\x7f\x3a\x4c\x46\xe3\xe4\xec\x3c\xb9\xf8\x2d\x1b\x0e\x46\x83\x51\x27\xce\xb7\x1e\xe8\xd9\x72\x34\x72\x5b\xf8\xaf\x22\xee\x4e\xb2\xf7\xbf\x5d\x24\xe7\x67\xc9\x78\x94\x0c\x4f\xb3\xe1\x60\xfc\x12\x91\xe5\x53\xc5\x7f\x0d\x6e\x77\x2e\xbe\xdf\x99\x53\x61\xa2\x8d\xf7\xa1\xb6\xc3\xf2\x00\x2e\x55\xcd\x28\xbd\x38\x4f\xce\xc6\xc9\x68\x98\x9c\x9e\xa4\xbe\x68\xd2\xe1\xe0\x7c\x30\x4c\xd1\x57\x8b\x51\x7a\x72\xf6\x45\xb5\xa7\xb7\x97\xf5\xf0\xe4\xf4\xd5\xff\xfe\xa8\x68\x5b\xa0\xf9\x86\xd5\x1c\x2a\xd4\x4d\xb8\x6b\xbc\xaa\xf4\x5c\x19\xd9\x95\x48\xb8\xd8\xac\xc2\x2d\xa6\x26\x8b\x3b\x57\x0e\x4f\x50\x89\x05\x77\x46\x61\x20\xdf\x61\x25\x07\xbe\x3c\x1f\x12\x9f\x6f\xee\xb8\x16\x21\x0c\x31\x17\x9c\x84\xd6\x2b\x10\xa1\x55\x74\x55\x49\xa6\xab\xac\x24\x8a\xf2\x17\x14\xe5\xc1\x59\x18\x10\xda\xa3\x35\xc2\xab\x05\x6e\x9b\x38\xb7\x30\x49\x3c\x16\x39\x33\x27\x6a\x0c\x88\x20\xd7\x57\x0f\x10\x0e\x76\x59\x90\x94\x44\xff\x09\x00\x00\xff\xff\x0f\x9b\xca\x2d\x3c\x0c\x00\x00")

func ConfigReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_ConfigReadmeMd,
		"../config/README.md",
	)
}

func ConfigReadmeMd() (*asset, error) {
	bytes, err := ConfigReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/README.md", size: 3132, mode: os.FileMode(0644), modTime: time.Unix(1580303056, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x6b, 0xc5, 0xa7, 0x25, 0x29, 0x76, 0x80, 0xd3, 0xc5, 0x5f, 0x31, 0xaa, 0x3f, 0x4a, 0xcb, 0xb0, 0x5, 0x5a, 0xfe, 0x28, 0x43, 0x80, 0xdd, 0xe8, 0x66, 0x2b, 0x8b, 0xa1, 0x76, 0x1a, 0x2d}}
	return a, nil
}

var _ConfigCliFleetEthBetaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x56\xcb\x8e\x5c\xc7\xcd\xde\xeb\x29\x1a\xb3\xfe\xd1\x53\xbc\x17\xb5\xd2\x6f\xc7\x8e\x60\x27\x86\x7c\x91\x63\x27\xc8\x82\x45\xb2\xa4\x89\x15\x8d\x33\x1a\x09\xb1\x02\xbf\x7b\x70\xc6\x42\x7c\xd3\x2c\x1a\x68\x54\xf7\x29\x7e\x87\xdf\x85\xfc\xcf\x83\xd3\xe9\xe2\x8b\x7e\x59\xfd\xf6\xcd\xf5\xeb\x57\x17\x0f\x4f\xb7\x37\xaf\xfb\xff\x8e\xd3\xcf\xae\xff\x70\xf5\x2a\xaf\xdf\xf4\xcd\x0f\x17\x0f\x4f\x3b\x5e\xbc\xfa\xe9\xfc\xc3\x17\xaf\x5f\xdd\xf6\xcd\x87\xd7\x2f\xf7\xd5\xb3\x8b\x87\xa7\xe3\x8a\xd3\xe9\xe2\xa3\x97\xb1\x5e\x74\xfd\xe2\x86\xd3\xe9\xe2\xe3\x17\xdd\xb7\x17\x0f\x4f\x17\x7d\xfb\xfc\xbc\xfa\x36\x2e\xde\xfd\xf0\xc1\xf5\xf5\xed\x67\xd7\xd5\x47\xc5\xbf\xdd\x1d\x9d\x4e\x17\xfd\xf2\xba\xfa\xe1\xe5\x65\xcf\xb0\x1c\xb4\x64\x3a\x40\xfb\x5c\xab\x54\x23\x73\x61\x88\x94\x98\x4e\xda\x24\x0b\x69\x6d\xaf\x9d\x31\xbd\xa5\x91\xb9\x97\x64\xd2\x46\x19\x30\x17\x03\x60\x2d\x19\xb6\x23\x83\x78\x2f\xf5\xbd\x17\xf3\x22\xc5\x6d\xde\x15\x6e\xa1\xea\x31\x6b\xa3\xa7\x61\xab\x30\x83\xda\xe4\x47\x6c\x67\x87\x33\x22\x9f\x49\x1e\x32\xd3\x3b\xd4\xbf\x80\xc8\xa4\x99\xba\xd5\xd8\x71\xee\x4a\x0f\xdf\xe6\x3e\x36\x3a\xf3\x18\xb8\x74\x4a\x41\x92\xed\x81\x92\xb0\x9a\x51\x60\xca\x92\x05\x7b\xf8\x18\xbb\x63\x43\x66\x62\x28\xd0\x40\x9d\xdb\x7d\x1c\x7f\x0b\x2b\x14\xdc\x64\x34\x30\x27\x91\x04\x26\x84\xa2\x91\xb6\x23\xa1\x3a\x64\x52\x3c\x02\xe3\x33\xd0\x3c\xc3\x90\x33\x32\xbd\x1f\xa5\x31\x5a\xed\xa6\xb9\x8a\x73\x5b\xca\x5c\xcb\x95\xc1\xe6\xd0\x1d\x0b\xc5\x26\x76\x52\xeb\x60\x8d\x39\x84\xc8\xc6\x40\xcc\x15\x81\x13\x84\xb4\x67\x29\x77\x16\xac\x81\x0d\x7b\x6e\x43\xd3\xd9\xe8\x52\x43\x51\xe6\x0a\xa6\x9a\x93\x06\xd7\x1a\x3a\x5b\x37\x32\x58\xf4\x5c\xb9\x3c\xf4\x11\x0c\x3e\x83\xf0\x79\xce\x33\xe0\x3d\x20\x99\x9c\x6d\x2a\xe5\x0e\x89\x28\x00\x9b\x9b\x27\x46\x92\xc4\xec\xb5\x1c\x40\xb3\xba\x20\x91\xb6\x6d\x8f\x0d\xc1\xb6\xa2\x76\x42\xb7\xed\x51\xe5\x9d\x43\x98\x18\x2c\x93\xd8\x10\x25\xb4\xd9\x9a\x35\x75\x1a\x6d\x65\x13\xf1\x66\x62\x62\x71\x4d\xe1\x06\x0b\x2e\x0a\xe8\x3b\xb6\x05\xcf\x47\x3f\x79\xbc\x1f\xa2\x90\x4b\xc4\xb2\x49\xb4\xa1\x73\xa9\xc1\x12\x5f\x7b\x08\x42\x6e\x1c\x88\xbc\x7b\x82\xe2\x4e\x2a\x54\x93\x6a\xee\xe6\x12\x25\x0d\x93\x4e\xc2\x02\x3a\x58\x4e\x98\x5c\x7b\x16\x54\xed\x98\x83\x9c\xc9\x87\xce\x89\x15\x8a\xc1\xb5\x19\x8b\x77\xe6\xd6\x3a\x58\x9a\x20\x1a\xd3\x1e\xe1\xd0\x33\x4c\x3f\x98\x3e\x8b\xbd\x1f\x64\xaf\xde\xb1\xc8\x97\xfa\x5a\xab\x95\x6b\x66\x4d\x5d\x6d\x2a\x8b\x56\x93\x68\xcd\xe4\x85\xac\x3a\xb6\x4a\xb1\x13\x30\xc5\x48\xe6\x4d\x33\xa7\x04\x8a\xd1\x18\x07\x01\x36\x59\xc4\x31\x60\x0d\x22\x9c\x00\xc2\xd8\x1e\x32\x71\x42\x4e\x92\x15\xab\xca\xe4\xee\xcb\x52\xee\x9d\xf0\x88\xe4\x8c\x03\xcf\xee\x87\x73\xee\x30\xde\x41\xfc\xfb\x3b\xcb\x7f\x75\x73\xe4\x46\xfd\x39\xae\x5e\x7c\xd9\x37\x6f\xfa\xe6\xbd\xde\xaf\x50\x68\xef\xbd\xa7\x86\xa8\x12\x2d\x25\xd9\x73\x5a\xcd\xe5\xd0\x63\x6f\x41\xd2\xb5\x72\xc8\x9a\xa0\x3e\x89\xd1\xb1\x1d\x63\x2f\x47\x47\xaf\xdc\xda\xbb\xd6\x61\xa1\x20\xf3\x41\x15\x73\xf7\xa0\xc9\x25\x31\x62\x22\x5b\x4f\xda\x90\x8d\x00\x11\xc7\xe3\x63\x2c\x2d\x9c\x29\x3c\xdf\x79\x1f\x44\xcf\x7e\x8f\x60\x93\x71\x93\xce\x40\xda\xe1\xb3\x5b\x58\x77\xe1\x21\xbb\x61\xe2\x43\x91\x90\x90\xbd\xb7\x8a\x15\x6a\x91\x58\x98\x19\x33\x45\xe7\xe1\x14\x58\xe8\x41\x81\xd8\x9b\xda\x8e\xaa\x0d\x93\x9d\xaa\x62\x0b\x04\xc1\x1a\xd1\xa5\xc3\x7c\x95\xf6\x6a\x89\x9e\x34\x77\xee\xd8\x14\xec\xbf\x52\x03\x28\xde\xe3\xfd\x6a\xf7\xe6\x5c\xb0\x48\x90\x56\xa1\x66\x20\x20\xa9\x0b\x0f\x3d\x44\x60\x69\x08\x51\xbc\xa9\x25\x27\x42\x97\x03\x4f\x90\x91\xad\xd9\xd8\x86\x4a\x60\x48\x47\x26\xc0\xd8\x91\xb0\x4b\xf0\x10\xee\x5a\xb5\x49\x44\x7a\x08\x99\xc7\x36\x17\x90\x06\x30\xaf\xa0\xc3\x84\xb5\x0e\x39\xc0\xe1\x7b\x3f\x23\xdc\xe3\x2b\x63\x1e\x3e\x63\x69\x11\x8d\x19\x5b\xb2\x06\x39\x8e\xe8\xd0\x91\xac\x05\xba\x30\x8b\x8a\x68\x6d\x52\xcb\x15\x1b\x6a\x40\xe2\xce\x1a\xaa\xfb\x10\xc6\x14\xd3\x1a\xae\x36\xdd\xb2\xac\xd6\x1a\xad\xb4\xa7\x51\xe6\x58\xbc\xad\x79\x8d\x0d\x65\x88\xd8\xba\x88\x05\xc2\x66\xf9\xaa\x38\xc8\x3e\xfa\x38\xce\x70\x4f\xce\x5b\x84\xf2\x2c\xed\x29\xe2\x32\x16\x36\x15\xad\x8d\x38\x92\x5d\x7b\x64\x34\x47\xed\xaa\x83\x4a\x68\x1d\x7a\xd4\x00\xb3\xe8\x74\x5a\xa9\x59\xb9\x01\x27\xe6\xe2\x51\xa0\xa2\x4e\xd8\x6b\x57\x89\x8a\xa1\x57\x30\x0f\xd2\x59\x96\x5c\x61\xb5\x8a\x6b\x0c\x5e\x10\x39\x70\xed\xf9\x1b\xae\xfd\xfd\x28\x07\x48\x23\x6e\xcd\xc2\xc5\x9c\x33\x04\x56\x59\xe0\x1d\x45\x68\xd0\x87\x30\xd3\xca\xb6\x20\x13\x1a\xb8\xaa\x84\xb1\xab\x6e\xac\x60\x39\xd4\xdf\x20\xdc\x93\x74\x75\xeb\x70\x5c\x5c\x3a\x75\xb7\x5a\x13\x81\x8a\xc8\xd4\x14\x5b\x06\x73\x35\xb9\x5b\x82\xa2\x17\x1e\x23\xf3\xce\xfa\xa8\x67\x84\x33\xdc\x03\xd1\xd8\xc5\x9a\x14\x62\xa1\x8f\xd6\xd8\x2c\x01\xc8\x42\xba\xd2\xa3\xba\xc9\xf7\x2a\xdc\xee\x12\x66\x91\xad\x5d\x56\x43\xca\x03\xd2\xd2\xe7\xb2\xb9\xb0\xb6\xec\x39\x0c\x92\xc9\x97\xe7\x88\xdd\x1c\xea\xd3\xa9\xeb\x60\x42\x89\xd8\x68\xbb\xae\x04\x97\xaa\x4d\xb4\x35\x7b\x8c\x77\x29\x8f\x22\x67\xf0\x7b\xc8\x9e\xa1\xbc\x28\x89\x3d\xb0\x47\x6f\x0e\xc2\x0e\x76\x1d\xde\x87\x11\x89\x94\x57\x03\xc0\x40\xa1\xc4\x11\x95\x60\x41\xd9\x6b\x25\x79\x20\x78\x4b\x51\x03\x2d\x10\xc8\xd1\xdd\x52\xb3\xc7\xf6\x98\x2b\x30\x6b\xa0\x0e\xe0\x56\x5b\x0c\xc1\xb1\xac\xa0\xa4\x4a\x2d\x03\x8f\x51\xfd\x1b\xb2\xe7\x7d\xc3\x08\x1a\x05\x3b\x5d\x75\xdd\x45\x99\x08\xcd\x04\x5f\x1b\xb2\xda\x68\x42\xa6\x39\xfb\x40\x3d\xc6\xa0\xfb\xd2\x76\x9f\xad\x2e\x26\x10\x51\x1b\xb5\x38\x7d\x96\x04\x77\xac\xbd\x2c\x7b\x17\x41\x52\xce\x59\x3a\x46\x98\xc9\x06\xee\x12\x9b\x20\x38\x62\xce\xce\x42\xa9\xa0\xd4\x9f\xc8\x3e\x3e\x76\x36\xff\x7d\xce\x7f\x79\x1b\xb7\x57\x79\xef\x72\x67\xda\x7d\xf8\x40\xf7\x62\xc9\x30\x3d\x04\x5b\x9d\x16\x69\x9c\x51\x2b\x68\xed\x18\xcb\x31\x45\x35\x6a\xd8\xca\x65\x84\x3e\xd7\xd8\xbb\x81\x40\x76\xd9\xb4\x63\x1d\x41\x6f\x1f\xb5\x42\xb2\x68\x73\x0f\x07\xed\xa1\x7e\x40\x97\xd1\x9e\xab\x13\x78\xae\x8e\x22\xb7\xc8\x09\x88\xf5\xbf\xe5\x4e\xcf\x76\x8f\x0e\x70\x0d\x70\x91\xb2\x06\xe8\x63\xa2\xf4\x30\x62\x5a\x2c\xda\xdc\xae\x39\x26\x98\x1e\xa9\x78\x38\x1a\x17\x24\x2f\x65\xe8\xd8\x84\xa3\xc9\xd8\xa6\xc1\xb4\xb1\x43\x27\xb6\xb7\xe7\x5e\xf3\x18\x57\x9e\xed\xdc\x85\xbb\x1b\x22\x59\xa6\x0f\x2e\xe1\x5d\x63\xb9\x1d\x21\x17\x98\x1c\xfc\x0b\x1d\x8c\xb3\x8d\xdf\xb7\xf8\xe7\x85\xfd\x77\x6d\xbe\xbc\xfa\x9e\x2f\x7f\xb3\x1c\x5e\xde\xe6\xf7\x97\x34\x6c\xd0\x65\xdf\x3e\x7f\xc3\x97\xa0\x4f\xaf\x5e\xe3\xe3\xff\xff\xe7\x17\x8f\x9f\xbc\xfd\x98\x6e\x3e\x7f\x26\xf2\xe4\xd9\xb7\x4f\xf2\xf3\xef\x7e\x78\xf3\xe4\xeb\xc7\xfe\x12\x9f\xff\xe5\xd5\xb7\x4f\x9e\x3f\xfd\xe4\x83\xbf\xea\x77\x5f\xff\xe3\x93\x67\xf5\xf5\xcf\x7d\xba\xab\xf1\xeb\x95\xe4\xfe\x12\x7f\xfa\xd7\x57\xdf\xbc\xfe\x96\xbf\x5c\xfa\x47\x9c\x8f\x3f\xbb\xbe\x8e\x8f\x9f\x7e\xf3\xf4\xd3\xb7\xdf\xbf\xfd\xf4\x9b\x0f\xf3\xd9\x0f\x9f\xfc\xfb\x59\x7c\xf4\x11\x5e\xc9\x9b\x97\xfb\xdd\x5b\x3e\x38\x9d\x7e\x7c\xf0\xe3\x83\xff\x06\x00\x00\xff\xff\x5a\xc4\x3b\x12\x9c\x0c\x00\x00")

func ConfigCliFleetEthBetaJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthBetaJson,
		"../config/cli/fleet-eth.beta.json",
	)
}

func ConfigCliFleetEthBetaJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthBetaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.beta.json", size: 3228, mode: os.FileMode(0644), modTime: time.Unix(1580303056, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0xff, 0x20, 0xed, 0x7a, 0xda, 0x82, 0x8a, 0x1f, 0x4, 0xb1, 0xbf, 0xa0, 0x25, 0x30, 0x1c, 0xba, 0x4f, 0x58, 0xdf, 0x63, 0x5f, 0x2, 0xb3, 0x9a, 0xb8, 0x2a, 0xdb, 0x98, 0xd0, 0xc7, 0xa6}}
	return a, nil
}

var _ConfigCliFleetEthProdJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x56\x5f\xaf\xdd\x45\x72\x7c\xe7\x53\x5c\xdd\xe7\xe8\xb8\xbb\xa7\xbb\x67\xda\x4f\xce\x6e\x20\x88\x4d\x10\xbb\x2c\x04\x12\xe5\xa1\xff\x1a\x67\x89\x2f\x31\xb6\x15\x88\xf6\xbb\x47\x3f\xe3\x04\x56\x70\x9f\x8e\x34\xe7\xa7\x99\x9a\xaa\xae\x9a\xfa\x9f\x0f\xee\xee\xee\xff\xd4\x2f\xab\x7f\x7c\xfb\xf0\xe6\xfb\xfb\xa7\x77\xaf\x5f\xbd\xe9\xbf\xbb\x56\x3f\x7d\xf8\x87\x17\xdf\xe7\xc3\xdb\x7e\xf5\xc3\xfd\xd3\xbb\xf1\x6f\xbf\xff\x69\xfd\xf7\xdf\xbe\xf9\xfe\x75\xbf\xfa\xfd\xc3\xcb\x79\xf1\xfc\xfe\xe9\xdd\xb5\xc5\xdd\xdd\xfd\x87\x2f\x3d\xbe\xed\xfa\xc5\x0e\x77\x77\xf7\x1f\x7d\xdb\xfd\xfa\xfe\xe9\xdd\x7d\xbf\xfe\xe6\xf6\xdd\xab\x87\xba\x7f\xff\xc7\xef\x1e\x1e\x5e\x7f\xfa\x50\x7d\x9d\xf8\x6f\xef\x96\xee\xee\xee\xfb\xe5\x43\xf5\xd3\x27\x4f\xb4\x55\x84\x27\x16\x2c\x0e\x42\x5c\x76\x26\x0b\x06\xe0\x50\x46\x68\x14\x2e\x45\x6b\xf4\xdd\x5b\xc3\x55\x1b\x0f\x98\xbb\x43\xca\xa0\xa7\xac\x34\xef\x6d\x39\x34\xc5\xbe\xc3\x33\x10\x0a\x09\x10\x8e\x59\xac\x0d\xb9\x65\xba\xd0\xc2\x0c\xcb\x12\xb2\x0a\xe8\x18\x7a\x78\x3d\xe3\x7d\xdb\x72\x33\xbb\xa1\xda\x53\xe6\xf5\x1e\xf5\x2f\x20\xf2\xd2\x4c\x1d\xdd\x6c\x74\xa6\xd2\xdc\x66\x9b\xc1\x90\x31\x03\x50\xe8\x91\xc2\x5c\x7b\x80\x24\x31\x9a\x49\xf0\x48\x48\xe0\x80\x01\x4c\xfb\x60\x66\x92\x2b\x2e\x20\x3d\x63\x06\xd7\x67\xbe\x8b\x84\x66\xed\x05\x94\x67\x2d\x71\x4a\x74\xa5\xbd\xb4\x8d\x16\xa9\x61\xe6\xf2\x67\xb8\xcf\x0d\xe9\xdc\x70\xbd\xfb\xfd\x6d\x94\x8b\x66\xb4\xce\xd9\x0a\x01\xc6\xdb\x57\x75\x0b\x67\xcf\x70\x9d\xda\x03\xc1\x09\xb4\x52\xcb\x6b\xb1\xe8\x51\x94\x49\xef\x63\x4d\x9a\x49\x5b\xd6\xd0\x19\x24\x3e\xe2\x8c\xa8\x69\x7b\x47\xdb\xda\xbe\x49\x55\x10\x55\x4c\x49\xc5\x1d\xf6\xd2\x90\x55\xac\x41\x9b\x59\xc9\xd4\x9f\x2d\xbe\x6d\xb8\xb8\x24\x78\x04\x22\xad\x82\xcd\x10\x88\x86\xb6\xe4\x28\x49\x6d\x2b\x4e\xcf\x5d\x02\xbe\xb8\xb6\xb5\xa5\x5a\xa3\x9e\x85\x29\xb9\x41\xf6\xda\xb2\x1d\x47\x6a\xd7\x39\x2c\x08\x91\x62\x52\xbb\x9b\xcb\x57\xa2\xc0\xf1\x9a\xb3\x23\xd2\xda\x48\xa1\x0e\x70\x0f\xac\x39\x89\xbd\xf6\xd0\x04\x4d\xaa\x5d\x5a\x0b\xdd\x10\xf4\x86\xb0\x7f\x1b\xa3\x2c\x13\xf7\xd8\x67\xad\xc1\xce\xd0\x8d\x21\x16\x03\x42\x98\x43\x40\xc4\xd3\x07\x95\x26\x57\x91\x6e\xa9\xe6\x0b\x88\xe8\x52\xdf\xd2\xb9\xa8\x70\x5d\x22\x27\x1e\xae\x39\x85\x55\xe3\x07\x96\xf1\x32\xd0\x73\xa8\x5c\xc9\xb9\x86\xa9\x78\x32\x47\x0b\xf7\x81\x83\xa2\x7e\xf6\xcf\x62\x33\xdc\xf0\x3c\xc2\xa4\x30\x48\x0a\x58\x8d\x9e\x95\xa6\xd4\x3b\x8d\x37\x04\x09\x46\xe8\xb6\x2a\xb5\x7d\xe6\x50\x49\xb0\xda\xe0\x68\x2a\x17\x62\x09\x4c\x94\x54\xd9\xec\x03\x98\xea\x25\x38\x2b\x08\x5c\x46\x73\xcf\x34\xf1\xc9\x34\x0f\xa2\x35\x27\x32\xfc\x9a\x5f\x8e\xc0\x84\x1e\x32\x99\x82\x67\x4b\x6e\x44\xeb\x46\x28\x37\x14\x7d\x07\xf2\x1d\xc6\x7f\x7f\xef\xf9\x3f\xbf\xba\x82\xa3\xfe\xd9\x5f\x7c\xfb\x79\xbf\x7a\xdb\xaf\x7e\xdb\xfc\xa0\xde\xc0\xbe\xb1\xa5\xe2\xe8\xf1\x4d\x94\x7b\x3b\x61\x1e\x62\xf6\x5e\x67\x30\x4a\x2f\xc6\xcf\xce\xd4\x9c\x3e\xc7\x17\xe8\x1a\xc7\x24\x16\x35\xa2\x45\xa3\x3c\x2c\x51\xc2\x70\xa6\x4b\x70\xad\xf6\x38\x5d\xfb\x00\xdb\x5a\x14\xc0\x63\x89\x08\xed\xb9\x67\x63\x62\x30\xd9\x7b\xf3\x13\xef\x1b\x21\xff\x36\xd5\xc9\x34\x4b\x8f\xd3\x1a\xb7\x73\x59\x4a\xa7\x88\x37\x11\x6c\x31\x50\x5a\xb4\x88\xad\x47\x65\x17\x69\x2d\xd9\xbe\xf7\x66\x5e\xde\x09\x5c\x81\x41\xe6\xcb\x89\x7a\x56\xef\x14\x3e\x8d\x87\x6d\x55\xf9\x08\xfa\xc2\x00\xef\x52\xd8\x76\x5d\x34\x5a\xbc\xcf\x3a\x93\xe3\xb3\x9c\xed\x17\x03\x41\x37\x79\x04\x64\x37\x85\xac\x00\xcf\x36\x35\x42\xdd\xce\x08\x82\x1c\xe9\x0b\x88\xd5\xa4\x62\xa0\xd1\xf5\x34\xd6\x8c\x6d\xd4\x6b\x0e\xa1\x27\xd0\x64\x80\x9d\xc3\xfa\xec\x35\x61\xb1\xd9\xf3\x70\xf5\x01\x44\xd0\x64\x95\x38\x4d\xa1\xc9\x03\x65\x2b\xce\x66\x2b\x94\x7d\x62\xd2\x07\x56\x3f\x43\xe0\x1b\xda\xbe\xd1\x15\x51\xfc\x08\x4a\xca\x53\xbd\x32\x82\xae\x74\x5a\x90\x11\x12\xab\x01\x56\xe4\x26\x0a\x24\x1d\xf1\x9e\x43\x4d\x20\xe4\x7e\x99\x98\xd2\x8d\x1b\x72\x7b\x11\x5a\xcb\x5a\xe1\xe7\x5c\xc1\x70\xa4\xa3\x0e\x50\x35\x81\xaa\x2d\x12\x59\x4b\x02\x01\x16\x6c\x65\xf1\x10\xdc\xd0\xe7\x28\x41\x91\x1f\xbc\xe4\x26\xe6\x1b\x11\xde\x1e\x93\x7b\xbb\x2b\x9f\x6b\xe2\x44\x4c\x20\xa8\x57\xad\x18\x22\x48\x36\x6d\x48\x6f\xf6\x9a\xaa\x4b\x4d\x6c\x05\xa5\xd6\xc0\xbd\xbd\xd3\x56\xa4\x66\xe5\x20\x5d\x8f\x17\x43\xa1\xca\x05\xac\x63\xaa\x44\x65\x93\x95\x33\xc3\xd2\x53\x3b\xb9\x7c\x57\x14\x17\x00\x07\x7a\x02\xc5\x9c\xbf\x91\x9b\xf4\x91\xac\x07\x42\xcc\xa8\x83\x49\x32\xb0\x03\x96\x03\x9a\x96\x68\x6b\x36\x2b\x5c\x76\x5d\x15\x7b\xaf\x99\xcb\xb7\x4e\x24\x4b\x78\x8f\x4f\x69\x82\xb6\xb7\x7a\x2d\x59\xab\x29\x7c\x59\x89\x89\x72\x4e\x54\x84\x34\x65\xef\xc4\xb5\x5d\x3a\xe2\x48\x9b\x55\x4e\x6e\xdf\x32\x66\x23\xf2\xec\xb2\xfe\xd2\x9b\x9c\x9b\xd1\x23\x13\x79\x64\xb0\x98\xc0\x86\xc6\xac\xfc\x00\xfa\xe0\xa9\x38\x1b\xb5\xe5\xb0\xd3\xf1\x82\xa8\xe4\x3d\x51\x59\x67\x48\x7d\x36\x57\x94\xed\x49\xda\x86\xcc\x7a\x40\x64\x75\xee\x2c\x03\x23\x9f\xd6\xb3\xaa\xda\xb1\x61\x6c\x52\x36\x76\x64\x70\x60\x1d\xd9\x79\xf1\x70\xce\x91\x55\xff\xa7\x35\x92\xdd\xce\x23\x18\x8f\x2b\xc7\xca\xc5\xe6\xd4\xd0\xc3\xbe\xa8\x9d\x4d\xc1\xfa\xb2\xe2\x5a\xca\xd1\x88\x08\x24\x2b\x09\xbc\x12\xb7\xaf\xec\x88\x5c\xe6\xef\xc6\xb1\x56\xe3\x0a\x94\x8b\xe4\x6e\xa9\x73\xe1\xf2\x13\x4e\x59\x40\x0a\xc8\xad\x3b\x18\x9d\x3d\x76\xe1\x95\xbc\xba\xd3\x69\x33\xed\xbf\xd1\xda\x1e\x19\x48\x66\x54\x68\xa2\x3e\xc1\x14\xb5\xc8\x41\x13\x65\x11\xaa\x8c\x5b\x83\x69\x77\x74\xd5\x1e\xd7\xd2\x96\x39\x11\x3d\xc0\x0c\x91\xec\x2c\x86\xd3\x4b\x05\xa3\xf5\xa0\x2d\xdf\x9d\x40\x06\x84\x59\xc1\x76\x25\x2a\xd6\x1e\x1b\xac\xeb\xe1\x0d\x33\x22\x6d\x9d\x65\xbe\x5d\x8a\x7f\x8a\x7a\x79\x67\x1a\x62\xf9\x75\xd4\x7f\xfe\xda\x5f\xbf\xc8\x47\x0b\x1e\xae\xd2\xe5\x38\x47\x32\x2b\xa3\x68\xe2\xaa\x1e\x61\x51\x56\xb0\xc6\x38\x2a\xdc\xf6\x52\x38\x26\x38\x3b\x97\xb6\xd4\x08\x22\xa7\x61\x35\xc5\x41\xe3\xda\x48\xe7\x0c\x71\x4c\xe1\x36\x38\xc9\x87\xf5\xf4\xb1\xaa\x33\x30\x71\xae\x86\x15\x54\x5d\xde\x87\x3d\x6b\x54\x46\xc9\xff\xdf\xf4\x08\xb7\x03\x8f\x04\x53\x00\x9a\x5c\x95\x02\xb1\xc9\x2a\x1b\xf6\xe2\x15\x2c\xda\xdc\xa6\x09\x07\xb7\x02\x10\x5d\x8e\xa6\xc0\xe4\x50\xc6\xf6\x59\x04\xbd\x36\xef\xb3\xf1\x6c\x18\xd7\x43\x7d\x55\x98\x89\x23\x17\xee\x6c\xe3\x2e\x9a\x6e\xf4\x64\x39\x06\x5c\xc2\x53\x10\xb6\xeb\x8a\x32\xba\x34\x7a\x86\x8b\x6f\x04\x76\xc3\xa5\x37\x44\xfa\x35\xc9\x3f\xd7\xf6\x5f\x11\xfd\xe4\xc5\x77\xfc\x04\x37\xff\x54\x0f\xe1\x7a\xce\xd6\x93\xd7\xf9\xdd\x93\x05\x1b\xd6\x93\x7e\xfd\xcd\x5b\x7e\x82\xfa\xc5\x8b\x37\xf4\xf1\xdf\xff\xe7\x9f\x3e\xfe\xec\xc7\x8f\xd6\xab\x3f\x3e\x17\xf9\xec\xf9\xd7\x9f\xe5\x1f\xff\xf2\xc3\xdb\xcf\xbe\xfc\xd8\x5e\xd2\x37\xff\xf2\xfd\xd7\x9f\x7d\xf3\xc5\x27\xbf\xfb\x57\xfd\xcb\x97\xff\xf1\xc9\xf3\xfa\xf2\x67\xa2\xde\x9d\x41\x57\x6f\x3a\x76\xed\x7f\x93\xfd\xf8\x11\xff\xf4\x5f\x7f\xfe\xea\xcd\xd7\xfc\x79\xe8\x3f\xd2\xf9\xf8\xd3\x87\x07\xff\xe8\x8b\xaf\xbe\xf8\xc3\x8f\xdf\xfd\xf8\x87\xaf\x7e\x9f\xcf\x7f\xf8\xe4\xbf\x9f\xfb\x87\x1f\xd2\x0b\x79\xfb\x72\xde\xdf\xf2\x83\xbb\xbb\xbf\x7e\xf0\xd7\x0f\xfe\x37\x00\x00\xff\xff\x9d\xb1\xb2\x96\xa2\x0c\x00\x00")

func ConfigCliFleetEthProdJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthProdJson,
		"../config/cli/fleet-eth.prod.json",
	)
}

func ConfigCliFleetEthProdJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthProdJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.prod.json", size: 3234, mode: os.FileMode(0644), modTime: time.Unix(1580303056, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0x5b, 0x62, 0xfa, 0x22, 0x1e, 0xeb, 0xbf, 0x94, 0x1a, 0x40, 0xda, 0x20, 0x18, 0x57, 0x88, 0xbb, 0xa6, 0x67, 0xec, 0xa1, 0x45, 0x93, 0x90, 0x6, 0xac, 0xcc, 0x16, 0x15, 0xb2, 0xe8, 0x89}}
	return a, nil
}

var _ConfigCliFleetEthStagingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x5d\x6f\x5c\xc7\x0d\x86\xef\xfd\x2b\x16\x7b\x5d\x1c\x91\x33\x1c\x0e\x47\x57\xaa\x1d\xc9\x42\x5a\x1b\xae\x1c\xbb\x81\x8b\x5e\x90\x1c\x52\x52\xa5\x6a\x9d\xdd\x95\x63\xa7\xc8\x7f\x2f\xd6\x16\x10\xc7\x1f\x77\x07\x3c\x00\xdf\x17\x0f\x9e\xe1\xff\x1e\xad\x56\xeb\x8b\xb8\x9b\xf1\xdb\xbb\xcd\xfd\x6e\x7d\xbc\xda\x6f\xef\xe3\x2f\x87\xe9\xf3\xcd\x0f\xd7\x3b\xdf\xbc\x8b\xed\x87\xf5\xf1\x2a\xf5\x76\xf7\x69\xfe\xe4\xf6\x7e\xb7\x8f\xed\x93\xcd\x5d\x5e\x5f\xae\x8f\x57\x87\x15\xab\xd5\xfa\xf4\x4e\xed\x36\xe6\x67\x1b\x56\xab\xf5\xd9\x6d\xc4\x7e\x7d\xbc\x5a\xc7\xfe\x6a\xd9\xed\xf5\xf2\xfa\xee\x72\xfd\xf0\xef\xf1\x66\xb3\x7f\xbe\x99\x71\x08\xfd\xd7\xc7\xd1\x6a\xb5\x8e\xbb\xcd\x8c\xe3\xa3\x23\xae\x60\x50\xa9\xb8\x52\x8c\xd6\x4a\x36\xe8\x48\xc6\x2e\x51\x64\xf2\x68\xcd\x1c\x72\x22\x45\x1f\x0d\x72\x54\xf3\x6a\xc5\xc4\x5d\x1c\xb3\x1a\x4f\x84\x3a\x93\x39\x1b\x2a\xd6\xd9\x7b\xb5\x36\x0d\x12\x2b\x30\x63\x5a\xf3\x6e\x92\x5a\xd0\x49\x64\x80\x33\x79\x1f\x46\xa8\x8d\x95\x06\x9c\x50\x5f\x06\x2e\xa5\x8c\x85\xe8\x98\xa8\x3e\xb4\xfe\xac\x62\xf6\x91\x56\x07\x8e\xec\xc5\xb5\x31\xe8\x04\xaa\x34\xdd\xab\x74\xb5\x0c\xc2\x00\x66\x2e\x80\x61\x53\xa7\x4a\xcc\x00\xe2\x42\x8d\x0e\x95\xc2\xa0\xf9\x54\x6c\x59\xa4\xcf\xe2\x64\x53\xda\x54\xc1\x84\xb0\xd2\x26\x28\x09\x9b\x99\xcb\x4c\x2a\xdd\x46\x47\xf5\x86\xad\x56\x9b\x00\x19\x27\xd8\x69\xc1\x2a\x0b\x42\x5f\x4a\x1d\xdf\x6e\x89\xa0\x5d\x1c\xfb\x28\x43\x3b\xe0\x88\x24\xd5\x52\x68\xcc\x5e\xa1\x64\x67\x0d\x51\xe0\x24\xb0\x32\x5d\xc4\xba\x55\x0c\xcb\x24\xe5\x52\xd3\x8c\xc8\x0e\x9f\x5d\xdd\xb4\x0c\x76\xf4\x98\xb5\xf7\x36\x07\xa6\x05\x0a\x71\x75\x6c\x30\xba\xb2\x56\xce\x69\xc5\x05\x28\xb3\xa6\x37\xab\xed\xa4\xb6\xa5\x54\x59\xc6\xa1\xe3\x27\x92\x1f\x2b\xfe\xfb\xc1\x82\x9f\xb6\x07\x9b\xe6\x33\xbd\xbe\x7d\x19\xdb\x77\xb1\xfd\xa6\x0e\xd6\x49\xda\xc0\xce\x3e\x7a\xc3\x59\x91\x34\x22\xd3\x0b\x87\x8f\x14\x66\x25\x2c\xbd\x95\xe8\x73\x86\x0f\x34\x1c\x80\xa2\x28\xd1\xdd\x55\x26\xd7\xee\x19\xc5\x63\xba\x8d\x5e\x52\xc2\x98\xa6\x20\xa7\xcd\x66\x14\x32\xbc\x87\x78\xcf\xd9\x67\x8a\x62\x2d\x23\x95\xea\x34\x01\x03\xcb\x38\xe8\xd0\xca\x32\x60\xc1\xc6\xdf\x06\xcd\x07\x0f\x4c\xb5\x27\xf6\x52\x26\x22\xaa\xf8\x70\x16\xaf\x43\x2b\x52\x85\x18\xb3\x71\xe7\xd1\x92\x11\x24\x2b\xba\x1b\xfb\x94\x04\x9d\x99\x34\x06\x46\xcf\xe9\x2a\xa9\xbd\x43\xf4\x66\x2e\xda\x0e\x7b\xfa\x2c\xc4\x03\xdc\x5c\x20\x00\x04\x7b\x4b\x02\xc7\xd6\x27\x27\x77\x91\x49\x72\x52\x80\x17\x94\xb1\x14\x82\x05\xbf\x53\x32\x28\x1d\xc1\x31\xb9\xb9\x68\x4c\xa9\xea\x85\xcd\xd1\xd2\x0a\x2a\x35\x77\x54\x69\x0d\xb4\x09\xf4\xee\x32\xcb\x8c\xa2\x10\xe0\x13\x25\x08\x72\x12\x64\x0f\xce\x3e\xa1\x4c\x67\x9f\xc0\x43\x8a\x01\x92\x87\xc8\xe4\x20\x96\x5e\x5a\x1e\x68\x63\x95\x18\x4d\x0e\xfd\x00\xa0\x68\xcf\x4f\x36\x8c\x05\x47\x5d\x08\xbf\xb6\xe1\xe5\x5e\xf7\xd7\xfe\xdd\xab\x00\x50\x47\x63\xe1\x6c\xa3\x11\x73\xd1\xda\x07\x07\x76\xb0\x11\xd2\xcd\x34\x59\x14\x1a\xcc\xd6\x63\x0c\xe9\xd6\x45\x4b\x19\xa5\x41\x99\x1a\x44\xaa\x51\x4c\x04\x6a\x11\x50\xc0\x1e\x3e\x34\x87\x05\x58\xc5\x82\xd3\xc6\x64\xab\x3c\xaa\x5a\x55\xa0\x86\x2a\xcc\xe6\x16\x73\x36\xc9\xa9\xfe\xa0\x41\x29\xbc\x60\xed\xdf\x46\x3c\x90\x1c\xac\x42\x96\x6e\x6a\x15\x1c\x67\xce\x8a\x53\x67\xe7\x56\x94\x38\xa7\x8e\xda\xa1\x51\xd1\x08\x34\xe0\x42\x43\x0c\x2b\xb5\x08\x18\x58\x19\xc9\xc4\x46\xd4\x10\xe2\x52\x42\x48\x7b\x81\xea\x4d\x9a\x68\xe0\x1c\x82\x23\xb9\x6a\x78\x60\x8d\x60\x96\xa0\x64\x66\x01\xae\x43\xc6\x09\x72\x5f\xc6\x01\xf1\x82\x24\x5f\x23\xfe\xe3\xd8\x7f\x85\xf9\xe8\xfa\x2d\x1d\xfd\xe9\xbd\x1e\xed\xfd\xed\x51\x85\x0e\xf5\x28\xf6\x57\xef\xe8\x08\xf9\xd5\xf5\x7d\x39\xff\xeb\x7f\xf9\xe9\xd8\xfd\xf0\xec\x66\xfb\x98\x7e\xd6\x76\x7a\x5e\xdf\xbc\x2f\xf3\xc3\xee\xc9\xfb\xb3\xcb\xc7\x3f\xbd\xbc\xf8\xed\xf2\xea\xda\xeb\x9b\xb1\xbf\x38\xbb\x78\x7e\xfa\x07\xa4\x8f\x09\x5f\xdc\xad\xef\x67\xc8\xab\x37\x3f\xbf\x3a\x3f\x7d\xf1\x66\xfb\xf6\x47\xf3\x7f\xd4\x0f\xaf\xcf\xce\xf9\xd5\xfe\x6f\xdb\x5f\x77\x4f\xf9\x3f\xe7\xa4\xd7\xbd\xbc\xd8\xd9\xdf\xf3\xf5\x99\x7d\x91\xf1\xf9\xf9\xfe\x7e\xc0\xc5\xdd\xbe\x9c\x7e\xd8\xdc\xdc\x5d\x55\xbd\x7f\x7f\x45\xf9\xe3\xaf\x37\x17\x97\xbf\xdc\x9c\xe3\xe5\x2f\xdb\x7f\x3e\x8d\x9d\xbc\xb8\xc1\x9b\xfa\xec\x35\xbd\xbf\x7f\xa0\xf8\x68\xb5\xfa\xfd\xd1\xef\x8f\xfe\x1f\x00\x00\xff\xff\xce\xf8\x53\x10\x38\x07\x00\x00")

func ConfigCliFleetEthStagingJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthStagingJson,
		"../config/cli/fleet-eth.staging.json",
	)
}

func ConfigCliFleetEthStagingJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthStagingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.staging.json", size: 1848, mode: os.FileMode(0644), modTime: time.Unix(1580303056, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0x9a, 0xfa, 0x20, 0x5d, 0xed, 0x98, 0x35, 0xfa, 0x16, 0x63, 0x8d, 0x54, 0xa0, 0xaa, 0x6a, 0xef, 0xfb, 0xf, 0x4e, 0x4a, 0x13, 0x9c, 0x8b, 0x88, 0x91, 0x81, 0x21, 0xc4, 0x99, 0xe, 0xe6}}
	return a, nil
}

var _ConfigCliFleetEthTestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x4d\x8b\x9c\x47\x0e\x80\xef\xf3\x2b\x9a\x3e\x2f\xed\x2a\x7d\xd7\x9c\x8c\x3f\x76\x2f\x5e\x5f\xbc\x7b\x0a\x39\xe8\xab\x9c\x81\xc1\x0d\x33\x6d\x43\x08\xfe\xef\xa1\x27\x0e\x18\x67\x7c\xd5\x2b\xf4\x3e\x25\x3d\xd2\x1f\x37\x87\xc3\xf1\xdd\xf9\xe3\xbb\xfe\xd2\xf7\xc7\xdb\xc3\xf1\xcd\xdb\x57\xff\xff\xcf\xf1\x5f\xd7\xf0\xfb\xf3\x9b\xbb\xc7\x3c\x7f\xe9\x87\xdf\x8f\xb7\x87\xed\xf7\x8f\xfd\x14\x7f\x7d\xff\xf9\xf1\xd2\x0f\xaf\xcf\x9f\xf6\xdd\xc7\xe3\xed\xe1\x5a\xe3\x70\x38\xbe\xfd\xe4\x71\xdf\x75\xbc\x3d\x5c\x1e\x3e\x3f\x65\x1e\x0e\xc7\x7f\xdf\x77\x5f\xae\x75\xfb\xf2\xdb\xe9\xd2\x8f\x97\xe3\xb7\x0f\xaf\xce\xe7\xcb\xfb\x73\xf5\xe3\xf1\xf6\xf0\xcb\x53\xe8\x70\x38\xf6\xa7\x73\xf5\xed\x8b\x17\xe5\xde\xd0\x0a\x06\xa3\x4d\x7a\x11\x6c\x07\x37\x77\x2d\xe9\xb5\x98\x8a\x06\xa1\x2b\x23\x19\x96\x45\x21\x5a\x4f\x89\x36\xc8\xbd\x04\x70\x41\x71\x8e\x9e\xde\xac\x89\xa5\x0b\x13\x0b\xab\xaa\x6c\x17\x1b\xe2\x02\x81\x26\x40\xaa\x5c\x22\x7b\x31\x66\x29\x06\x23\x6f\xde\xfe\x92\xf4\xc4\x70\x9a\x66\xa7\x49\xeb\x96\x08\xbf\x61\x7f\xc7\xb8\x7a\x2c\x33\x56\xee\x50\x9d\x9a\xc0\xd5\xae\xb0\x6b\xce\xd4\x40\x55\xd1\xca\xb1\x72\xba\x8a\xc9\xd6\x84\x4e\x56\x2d\x1c\x56\x40\xd7\x84\xec\x10\xe5\x6a\xc2\xa9\xa4\xe4\xd3\x4d\x47\x93\x9a\x81\x22\x2c\xd1\x4d\xdb\xd5\x38\x06\x84\x2f\x2e\x91\x15\x38\x8b\x84\xaa\x73\xbc\x84\x21\xa7\x69\xeb\x04\x84\xa7\x29\xf4\x3c\x65\xce\xe6\x31\xcd\x4c\xd3\x04\x4b\xe8\xfa\xb7\x90\x15\x5b\xa6\xb2\xcc\x61\x6a\xc0\x84\xa3\x89\xc6\x54\xc4\xcd\xe1\xaa\xa9\xa3\x62\x12\xa0\xd4\x46\x9b\xbb\x77\x8c\x8e\x9e\x9e\x04\xb0\x28\x56\x83\xcc\x88\x06\xc4\x8a\x0a\xc3\x46\x48\x36\x49\x11\x6f\x90\xb4\x6a\x1d\x19\x94\x2f\x91\xff\x6a\xa3\xd8\x69\xa2\x3e\x41\x3e\x31\xfe\xfa\xcd\x83\xff\x3d\x5c\x65\xaa\xff\xfa\xdd\xfd\x87\x7e\xf8\xd2\x0f\xcf\x0a\x21\x73\x55\x04\x57\xf9\x84\x36\x8e\x3d\x3a\xb8\x82\xc6\x0e\xac\x16\x60\x19\x6b\x10\x02\x81\xa2\xe6\xe8\xa5\xbc\xb5\x76\x09\xaf\x32\xae\x94\x5a\x6e\xb4\x17\xc9\x74\x05\x4b\xf6\x10\xcb\xa1\xb0\xbb\xd0\xd2\xc5\x19\xd7\xd4\x74\xa0\xb0\x5e\x98\x09\x1a\xd5\x1b\x7d\xb6\x2e\xcf\xef\x85\x58\xf2\x7c\xab\x9b\x4c\x78\xb7\x24\xf8\x75\xea\x2c\xe8\x42\xa4\x6b\x8d\xb2\x5e\xd9\xa2\x20\x44\xde\xd8\xc3\xe0\x3a\x7d\xb4\xce\xb9\xaf\xd3\x18\xdd\x5b\x10\x46\x0e\x75\x2e\x19\x89\x21\xb0\x36\x17\xd1\xa2\xbd\xb0\x24\x4c\x5c\x89\x7d\xc4\x16\xf2\x80\xc5\x11\x5b\x58\xd7\x98\xea\x95\xd2\x65\x3f\x08\x31\x9f\xa7\xd4\xa1\xcd\x4a\x8c\x9e\x85\x4d\x66\x49\x14\xab\x46\x4f\x5d\xca\xa8\xb3\x61\xdb\xbe\x8a\x09\xdc\xde\x1c\x9e\xbe\x62\xa5\xf5\x90\x34\xc9\x6a\x4d\x5d\xe4\x92\xd0\x28\x30\x30\xf6\xda\x2c\xe9\x6d\x31\x9a\xc7\xc6\x40\x4c\x4a\x08\x59\xe4\x1a\xde\xed\x53\x99\x48\x28\x9b\x1a\x9f\x84\x58\x70\x02\x58\xa7\xa9\xf0\x4f\x21\x3e\x5c\xfc\x72\x97\x3f\x3d\x0d\x5e\x68\x7b\xd1\xc0\xe1\x46\x92\xa9\x63\x70\xa8\xcf\x8d\x21\x31\x66\x6c\xea\xcd\xab\x90\xda\x0a\x4b\x36\xd5\x84\xda\x80\x35\x29\xdc\x84\x45\x07\x38\x21\x17\x52\x6e\xaa\x8d\x41\x13\x72\xe4\x5c\x80\xb5\xd9\x2b\xb3\x8d\x64\x22\x4c\x1f\x65\x7b\xc7\x22\xe4\x00\x69\x56\x48\xf8\xfb\x34\x00\x5f\x9f\xf1\x93\xa5\x9b\x35\x17\x0a\x72\x8f\xc9\x6b\xda\x0e\xe3\x08\xdf\xaa\x74\xdd\xc1\x09\x5b\xb8\x74\xa4\x2c\x55\x1e\x32\x4d\x7b\x0f\x22\x18\xa5\xd4\x39\x24\x57\xdb\x1e\x95\xc1\xda\x3e\x08\xb6\x71\x6d\x53\x42\x2c\x8f\xa9\x3e\x41\x46\x97\x55\xf5\x8c\xda\xab\xa4\xb8\xa0\x9a\x42\x63\x5b\xaf\x85\x3f\x98\x80\xdf\x35\xf9\xe6\x70\xf8\x7a\xf3\xf5\xe6\xcf\x00\x00\x00\xff\xff\x0d\xfd\x12\x60\xf7\x05\x00\x00")

func ConfigCliFleetEthTestJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthTestJson,
		"../config/cli/fleet-eth.test.json",
	)
}

func ConfigCliFleetEthTestJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthTestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.test.json", size: 1527, mode: os.FileMode(0644), modTime: time.Unix(1580303056, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0x9c, 0xfe, 0x3f, 0x41, 0x7a, 0x28, 0x2e, 0x65, 0x8f, 0x35, 0x2b, 0xa4, 0x25, 0x93, 0x6c, 0x9, 0x62, 0xd8, 0x9a, 0x51, 0xb0, 0x7c, 0x1e, 0xe, 0x90, 0x24, 0x88, 0xfc, 0x97, 0xa3, 0x64}}
	return a, nil
}

var _ConfigCliLesEnabledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\xf2\xc9\x4c\xcf\x28\x71\x2d\xc9\x70\xce\xcf\x4b\xcb\x4c\x57\xb2\x52\x80\x88\x83\xe5\x5c\xf3\x12\x93\x72\x52\x53\x94\xac\x14\x4a\x8a\x4a\x53\xc1\xe2\xb5\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xa6\x74\x24\x05\x3a\x00\x00\x00")

func ConfigCliLesEnabledJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliLesEnabledJson,
		"../config/cli/les-enabled.json",
	)
}

func ConfigCliLesEnabledJson() (*asset, error) {
	bytes, err := ConfigCliLesEnabledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/les-enabled.json", size: 58, mode: os.FileMode(0644), modTime: time.Unix(1574771268, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xee, 0x27, 0xa7, 0x74, 0xa0, 0x46, 0xa1, 0x41, 0xed, 0x4d, 0x16, 0x5b, 0xf3, 0xf0, 0x7c, 0xc8, 0x2f, 0x6f, 0x47, 0xa4, 0xbb, 0x5f, 0x43, 0x33, 0xd, 0x9, 0x9d, 0xea, 0x9e, 0x15, 0xee}}
	return a, nil
}

var _ConfigCliMailserverEnabledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x0a\xcf\xc8\x2c\x2e\x48\x2d\x72\xce\xcf\x4b\xcb\x4c\x57\xb2\x52\x80\x08\x83\xa5\x5c\xf3\x12\x93\x72\x52\x53\x94\xac\x14\x4a\x8a\x4a\x53\x75\xd0\x25\xfc\x42\x02\x82\x2b\xf3\x92\x71\x49\xfb\x26\x66\xe6\x04\xa7\x16\x95\xa5\x16\x61\xaa\x40\xc8\x05\x24\x16\x17\x97\xe7\x17\x81\x2c\x51\x2a\x2e\x49\x2c\x29\x2d\xd6\xcd\x4f\x4b\xcb\xc9\xcc\x4b\xd5\xcd\xcc\x4b\xca\xaf\x50\x02\x6b\xaa\xe5\xaa\xe5\x02\x04\x00\x00\xff\xff\x7c\x73\xee\xbb\xb0\x00\x00\x00")

func ConfigCliMailserverEnabledJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliMailserverEnabledJson,
		"../config/cli/mailserver-enabled.json",
	)
}

func ConfigCliMailserverEnabledJson() (*asset, error) {
	bytes, err := ConfigCliMailserverEnabledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/mailserver-enabled.json", size: 176, mode: os.FileMode(0644), modTime: time.Unix(1574771268, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0xec, 0x81, 0x8b, 0x99, 0xb6, 0xdb, 0xc0, 0x8b, 0x46, 0x97, 0x96, 0xc7, 0x58, 0x30, 0x33, 0xef, 0x54, 0x25, 0x87, 0x7b, 0xb9, 0x94, 0x6b, 0x18, 0xa4, 0x5b, 0x58, 0x67, 0x7c, 0x44, 0xa6}}
	return a, nil
}

var _ConfigStatusChainGenesisJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6f\x13\x31\x10\x85\xef\xf9\x15\x96\xcf\x1c\xc6\xf6\x78\x66\xbd\x37\x4a\x59\x81\xc4\x8d\x5f\x30\xb6\xc7\xcd\xaa\x9b\x6c\x94\x6c\xa4\x16\xd4\xff\x8e\x92\x2c\xa1\x42\x9c\xf0\xcd\x7e\x33\xef\x7b\x7e\x3f\x37\xc6\x58\x99\xa6\xb9\xd8\xde\x5c\x2e\xc6\x18\x9b\x07\x47\x58\x24\xa0\x0b\x9e\x04\x42\x8e\xc8\x05\xe2\x43\xc0\x90\xfd\x67\xef\x74\xf8\xa8\x1e\x73\xfa\xb3\x62\x6c\x96\x49\xf6\x45\x6d\x6f\x2c\xbc\x38\x18\xe0\xd3\x00\x84\x8f\x8f\x31\x79\xb8\x1c\x7b\x1d\x7c\xfb\xb0\x22\x3c\x44\x89\x15\x94\x7d\x6b\x14\x81\x53\x2b\x92\x33\x0a\x05\x0d\xa1\xfa\x4e\x84\xaa\x36\x5f\xfe\x03\xb1\x59\x31\xb6\xcc\xfb\x36\x3e\xdd\x1d\x6c\xd9\xca\xb8\xff\x5a\x6d\x6f\x98\xf9\x16\xc4\x6e\xe7\x9d\x9e\x16\x95\xfa\x30\xcd\xe5\xd9\xf6\x06\x56\xa1\xca\x3c\xcc\xc7\xe7\xef\xe7\xc3\x61\x3e\x2e\xb6\x37\xcb\xf1\xac\xab\x96\x5f\x7f\xc8\x7e\x19\xcf\xbb\xbf\x97\x74\x3c\xb8\x08\x5f\xe4\xb4\xbd\x85\x8c\xa0\xa4\x35\xa3\x26\xa8\x89\x1c\x49\xe9\x72\x63\xe7\x92\x6a\xe0\x82\x80\x5d\x41\x27\x15\x52\xf0\x1d\x31\xa9\xcb\x21\xd5\x42\x9d\x80\x96\x96\x43\xb5\xef\x7d\xe3\x3f\x69\xdd\xfd\xf5\xfe\xef\x3a\xb6\x36\x96\xf3\xb4\xbc\xfe\xae\xea\xda\xce\x55\xd3\x97\xe5\x28\x8f\xb2\xc8\x1a\x30\x30\x92\x63\xe4\xc8\x01\x03\x75\xe4\x28\x91\x7a\x88\xc0\x9e\x12\xd3\x45\xa3\xe8\x21\x22\x45\xbe\xcc\x26\x52\x62\x0f\xa8\x14\x19\x99\xa9\xb1\xa7\x7c\xb3\x7e\x92\xd3\xb7\x71\x37\x2e\xef\xa1\x60\x37\x6f\x9b\x5f\x01\x00\x00\xff\xff\x91\xc6\xb3\x58\x64\x02\x00\x00")

func ConfigStatusChainGenesisJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigStatusChainGenesisJson,
		"../config/status-chain-genesis.json",
	)
}

func ConfigStatusChainGenesisJson() (*asset, error) {
	bytes, err := ConfigStatusChainGenesisJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/status-chain-genesis.json", size: 612, mode: os.FileMode(0644), modTime: time.Unix(1574771268, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0xf0, 0xc, 0x1, 0x95, 0x65, 0x6, 0x55, 0x48, 0x8f, 0x83, 0xa0, 0xb4, 0x81, 0xda, 0xad, 0x30, 0x6d, 0xb2, 0x78, 0x1b, 0x26, 0x4, 0x13, 0x12, 0x9, 0x6, 0xae, 0x3a, 0x2c, 0x1, 0x71}}
	return a, nil
}

var _keysBootnodeKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x4b\x01\x80\x40\x08\x04\xd0\xbb\x69\x58\x96\x6f\x1c\x66\x94\xfe\x11\x7c\xbe\x65\xab\x03\x07\x43\x1b\x87\x5b\x17\x8e\x9e\x23\x02\x11\x1a\x57\x51\x9d\x32\xf7\x24\x99\x1b\x08\xd8\xcb\xcf\x2d\xf4\xba\x3e\x7f\x00\x00\x00\xff\xff\x4a\x3d\x56\xc6\x41\x00\x00\x00")

func keysBootnodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_keysBootnodeKey,
		"keys/bootnode.key",
	)
}

func keysBootnodeKey() (*asset, error) {
	bytes, err := keysBootnodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/bootnode.key", size: 65, mode: os.FileMode(0644), modTime: time.Unix(1532696448, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0xcf, 0x27, 0xd4, 0x96, 0x2e, 0x32, 0xcd, 0x58, 0x96, 0x2a, 0xe5, 0x8c, 0xa0, 0xf1, 0x73, 0x1f, 0xd6, 0xd6, 0x8b, 0xb, 0x73, 0xd3, 0x2c, 0x84, 0x1a, 0x56, 0xa4, 0x74, 0xb6, 0x95, 0x20}}
	return a, nil
}

var _keysFirebaseauthkey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x52\x85\x20\x18\x00\xe0\x7d\xef\xc2\xcc\x71\x4a\xc4\x76\x3f\x29\x43\x5c\x34\x2d\x4d\x59\x6a\xa5\x8d\x24\xde\x42\x7b\xfb\x3e\x00\x00\x9e\x87\xfa\xfe\xf3\xf9\x11\x5e\x20\x0e\x3a\xf6\x7b\xb8\xf2\x03\xc7\xd9\x4a\x10\xec\x46\x74\xa7\x26\x9a\xfd\x71\xec\xeb\xea\x98\x84\xb2\x9b\x6c\x92\x5b\xaa\x0d\x0e\x7c\x71\x71\xb8\xb1\xb1\xf2\x62\xcc\x61\xfb\x59\x91\xa2\x6f\x69\x6f\x29\x09\xdf\x07\x99\xb5\x09\x2a\x5f\x5b\x69\xa2\xa5\x91\x33\xa9\xa5\x67\x2d\x5d\xdd\xe1\xf0\xac\x82\xb0\xcf\xec\xd7\x72\x3d\x9c\x4f\x54\x4c\x3c\x2d\xad\x8b\xac\x32\x57\x8c\x06\xfc\x5d\x24\xd3\x7e\xf7\x1f\x00\x00\xff\xff\xd6\xa2\x00\x4a\x99\x00\x00\x00")

func keysFirebaseauthkeyBytes() ([]byte, error) {
	return bindataRead(
		_keysFirebaseauthkey,
		"keys/firebaseauthkey",
	)
}

func keysFirebaseauthkey() (*asset, error) {
	bytes, err := keysFirebaseauthkeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/firebaseauthkey", size: 153, mode: os.FileMode(0644), modTime: time.Unix(1532696448, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0x69, 0x23, 0x64, 0x7d, 0xf9, 0x14, 0x37, 0x6f, 0x2b, 0x1, 0xf0, 0xb0, 0xa4, 0xb2, 0xd0, 0x18, 0xcd, 0xf9, 0xeb, 0x57, 0xa3, 0xfd, 0x79, 0x25, 0xa7, 0x9c, 0x3, 0xce, 0x26, 0xec, 0xe1}}
	return a, nil
}

var _keysTestAccount1StatusChainPk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xdd\x8a\xe4\x40\x08\x05\xe0\x77\xf1\x3a\x01\xb5\x4c\x55\x99\xb7\x51\xcb\x62\x9b\xf9\x6b\x92\x66\xd8\x65\xe8\x77\x5f\x32\xcb\x32\x97\x82\x7e\x1c\xcf\x17\x7c\xe6\x71\xde\x3e\xde\x61\x2f\x0b\xdc\x06\xec\xd0\x29\xb2\x25\xe9\xca\xd4\x71\x15\xe4\xbe\xba\x2a\xae\x68\x52\x94\x7c\x56\x33\x84\x05\x6c\x8c\x23\xcf\x13\x76\xf0\x49\x55\xc2\x8a\x50\xe1\x6a\x58\x7c\x93\x16\xb8\x79\x91\xe2\x9c\x4c\x39\x2d\x59\x5c\x61\x81\x38\xfe\xdc\x1f\x1f\xb0\x7f\x41\xdc\xee\xbf\xf2\x78\xe4\xef\x07\xec\xb0\x35\x17\xb1\x6e\xd4\x67\x6f\x8a\xea\xce\xd1\x4c\x95\x98\x5c\x54\x8b\xa9\xb7\x31\x2c\x89\x46\xe9\x53\x23\x31\x91\x42\x9a\x8c\x51\x6d\x9b\xf5\x92\xbf\xbd\xbb\x1d\xf6\x76\x5e\xfe\xed\x13\x76\x30\xc3\xad\x17\xec\x93\x38\x2a\x73\xca\xa8\x38\x34\xb0\x59\x6a\x2f\x2d\xe1\xf9\xff\xf0\x5a\xce\x73\x25\xee\x6b\x3c\x0e\x58\xe0\x65\x4c\xd8\xe1\xfc\x0e\xfc\x6f\xfc\xb1\xc7\xcb\x6b\x5e\x85\xf1\x02\xa7\xbd\x5e\x0f\xb8\x57\xc1\x62\x9e\x8d\xb3\xb6\x9a\xcc\x64\x82\xc6\x81\x6d\x93\xd9\xe8\x4a\xae\x54\x44\xab\x78\x20\x99\x85\x52\x99\x21\x65\x23\x1a\x19\x05\x16\x78\x87\xbd\x93\xf2\x02\x07\xec\x7d\x81\x3b\xec\xf4\x5c\xe0\xcd\x02\x76\x68\x9d\xb1\x0d\xa4\x40\x2f\x51\x49\xad\x4f\x51\x47\xd6\xda\xbd\x56\xaf\xc5\xc2\x37\x66\xec\x41\x45\xc8\xb4\x8c\xd0\x4a\x6d\xe0\x4c\x95\x9e\x09\xcf\xe7\xdf\x00\x00\x00\xff\xff\xd2\xdb\x1b\x65\xe9\x01\x00\x00")

func keysTestAccount1StatusChainPkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount1StatusChainPk,
		"keys/test-account1-status-chain.pk",
	)
}

func keysTestAccount1StatusChainPk() (*asset, error) {
	bytes, err := keysTestAccount1StatusChainPkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account1-status-chain.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1532696448, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xba, 0x35, 0x1, 0x2b, 0x9d, 0xad, 0xf0, 0x2d, 0x3c, 0x4d, 0x6, 0xb5, 0x22, 0x2, 0x47, 0xd4, 0x1c, 0xf4, 0x31, 0x2f, 0xb, 0x5b, 0x27, 0x5d, 0x43, 0x97, 0x58, 0x2d, 0xf0, 0xe1, 0xbe}}
	return a, nil
}

var _keysTestAccount1Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4b\x8e\x24\x3b\x08\x45\xf7\xc2\x38\x42\xb2\x31\xd8\xd8\xf3\x57\xfb\xc0\x80\xf5\x52\xf5\x4b\x45\xa4\x4a\xdd\x2a\xd5\xde\x5b\x91\x83\xee\x19\x20\x74\xee\x3d\xdf\xa0\xee\x47\x9c\x27\x0c\x78\x29\xfc\x5f\x2a\xc8\xae\x2e\x2d\xb0\xd6\x6c\x14\x2f\x9d\xb3\xb3\x34\x6c\x51\x9d\xa5\x38\x1b\x6c\x60\xc7\xef\xfb\xe3\x13\xc6\x37\xd8\xed\xfe\x7f\x1c\x30\x40\xe3\xdc\x33\xca\x6e\x8f\xe3\x7a\x78\x9e\x1f\xf1\xeb\x01\x03\x48\x02\x7d\x89\xb7\xb4\x64\xae\x42\xea\x1a\x9c\x66\x9a\x29\x4a\x96\xa4\xa5\x63\xd0\x9c\xb9\x89\x66\xa5\x82\xe4\x66\x92\x08\x5b\x4c\x6a\x95\xd6\x5f\xde\x5d\x0f\x7d\x3f\xaf\xd8\xdb\xd7\xc5\x2d\xc4\xa6\xb4\xb0\xd8\xcc\x19\xbb\xf6\x9e\x5b\x0e\xe9\x5a\x3b\xb2\x24\xf8\xd9\xe0\xd5\x17\x0c\x38\x9f\x85\xe1\xb9\xfe\x83\xf8\xeb\x5b\x7c\xc0\x28\xb8\xc1\x07\x0c\xac\x98\x89\x36\xb8\xc3\xc8\x1b\x1c\x30\x64\x83\x53\xdf\x2e\x81\xdc\x99\xb1\xc9\x9c\x46\xab\x68\x22\xb1\xa4\xe2\xad\x79\x70\xca\x54\x8b\xa1\x08\xf6\x59\x9e\xb3\x06\xad\x1e\xc8\x68\x58\xda\xc2\xa9\xd6\xae\x22\xef\x6a\x30\xa0\xa3\x97\x60\xd2\xde\x22\xbc\x74\xcf\x8b\x6a\xc3\xb6\x12\x13\x55\x26\x4c\xcb\x78\x95\x6c\x6d\x51\xb4\x14\x42\x55\xa7\x75\x76\x5b\x2e\x53\xf0\x49\xba\x39\x0c\x98\x35\x11\x59\x95\xbd\x74\xa3\x9d\xaa\xfb\x2e\x39\xe3\x8e\x16\x8c\xd9\x19\x6d\x31\x6c\xf0\x15\xc7\x79\xfb\xbc\x24\x7f\xfe\x04\x00\x00\xff\xff\x0d\x85\xaf\xaf\xeb\x01\x00\x00")

func keysTestAccount1PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount1Pk,
		"keys/test-account1.pk",
	)
}

func keysTestAccount1Pk() (*asset, error) {
	bytes, err := keysTestAccount1PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account1.pk", size: 491, mode: os.FileMode(0644), modTime: time.Unix(1532696448, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x43, 0xc2, 0xf4, 0x8c, 0xc6, 0x64, 0x25, 0x8c, 0x7, 0x8c, 0xa8, 0x89, 0x2b, 0x7b, 0x9b, 0x4f, 0x81, 0xcb, 0xce, 0x3d, 0xef, 0x82, 0x9c, 0x27, 0x27, 0xa9, 0xc5, 0x46, 0x70, 0x30, 0x38}}
	return a, nil
}

var _keysTestAccount2StatusChainPk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xdb\x8a\x1c\x41\x08\x80\xe1\x77\xf1\xba\x1b\x2c\xb5\x8e\x6f\x63\xa9\x45\x86\x3d\x0d\xdd\xc3\x92\xb0\xcc\xbb\x87\xde\x10\xf6\xd2\x8b\xff\x43\xfd\x82\xcf\x38\xce\xdb\xc7\x3b\x0c\xde\xe0\xe6\x30\x60\x9a\x69\xa3\x4c\xfb\x4a\x9a\x76\x59\xa1\xbb\xd6\x25\x3b\x17\x12\x49\x94\x8c\xd0\x60\x03\x75\x3f\xe2\x3c\x61\x00\x61\xd6\xec\x18\x95\xd6\x2a\x19\x6b\x5f\xa6\x73\x8a\x16\x0e\x66\xa7\xa6\x5a\x3c\x16\x5d\x91\x1d\x7f\xee\x8f\x0f\x18\x5f\x60\xb7\xfb\xaf\x38\x1e\xf1\xfb\x01\x03\xa4\xf6\x5c\x3d\x2c\xa8\xba\x4a\x11\x66\x77\xf4\x9c\x27\x77\x5f\x69\x61\xd7\xe0\x1e\x5c\x98\xe6\x42\xed\xc6\xce\x4b\x71\x52\x42\xd1\xa6\x34\x2f\xf9\xdb\xbb\xeb\xa1\x6f\xe7\xe5\xdf\x3e\x61\x80\x75\xae\x91\x7b\x23\x69\xa4\x8e\x3d\x73\x2f\x09\xb5\xf6\x98\xdd\x4a\x15\x78\xfe\x0f\x61\x80\xc6\xb9\x27\x6a\xbb\x3d\x0e\xd8\xe0\xc5\x17\x0c\x38\xbf\x17\xfe\x37\xfe\xd8\xfe\xf2\x1a\xd7\xc3\x68\x83\x53\x5f\xaf\x03\xd8\xb4\x18\xb7\x94\x5b\xc9\x92\x75\x22\x1b\x49\x14\x94\x42\x86\xc9\xc9\x5b\x53\xa9\xc2\x5c\xb4\x7a\x12\xd4\xa6\x4b\x94\x32\x16\x66\xce\x15\x61\x83\x77\x18\x2d\x75\xda\xe0\x80\xd1\x36\xb8\xc3\x48\xcf\x0d\xde\xd4\x60\x00\x56\x47\x67\x6a\xd6\xb1\x36\x2b\xd1\x66\x89\x55\x72\xe5\x54\xa8\xab\x72\x4c\x6a\xd1\x91\x49\x1a\x2f\xa1\x99\x45\xcd\x94\x85\x5c\x22\xb1\x34\x78\x3e\xff\x06\x00\x00\xff\xff\x4e\x39\x80\x7d\xe9\x01\x00\x00")

func keysTestAccount2StatusChainPkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount2StatusChainPk,
		"keys/test-account2-status-chain.pk",
	)
}

func keysTestAccount2StatusChainPk() (*asset, error) {
	bytes, err := keysTestAccount2StatusChainPkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account2-status-chain.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1532696448, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xf8, 0x5c, 0xe9, 0x92, 0x96, 0x2d, 0x88, 0x2b, 0x8e, 0x42, 0x3f, 0xa4, 0x93, 0x6c, 0xad, 0xe9, 0xc0, 0x1b, 0x8a, 0x8, 0x8c, 0x5e, 0x7a, 0x84, 0xa2, 0xf, 0x9f, 0x77, 0x58, 0x2c, 0x2c}}
	return a, nil
}

var _keysTestAccount2Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4d\x8a\x1c\x3d\x0c\x40\xef\xa2\x75\x15\xd8\xb2\x6c\x4b\xde\x7d\x7c\xe4\x20\xb2\x24\x93\x66\xfe\x9a\xaa\x66\x48\x18\xe6\xee\xa1\x7a\x91\x2c\x25\xc4\xd3\x7b\x5f\xa0\xee\x47\x9c\x27\x0c\xf8\x2f\x69\x16\xc4\x8c\x8d\x5d\x8a\x58\x51\xe9\x38\x57\xa5\x96\xfd\xff\x9c\x56\x17\x4e\x3f\x38\x13\x6c\x60\xc7\xef\xfb\xe3\x03\xc6\x17\xd8\xed\xfe\x33\x0e\x18\xa0\x71\xee\x19\x79\xb7\xc7\x71\x1d\x3c\xd7\x8f\xf8\xf5\x80\x01\xac\x2b\xc9\x5c\x9a\x50\x69\xf5\xa8\x2b\x17\x2d\xcc\x33\x8a\x64\xb7\x95\xc4\x6a\x36\xa6\x65\x2c\xc8\x84\x19\x31\x45\xea\xd6\x72\x4b\x84\x75\xf1\x5f\xde\x5d\x0f\x7d\x3b\xaf\xb7\xb7\x4f\x18\xd0\x75\x56\xd1\xa0\x2e\xb9\xf6\x1e\x1d\x3d\x9a\xd7\xe9\xac\x14\x48\xa1\xf0\xbd\xc1\x8b\x2f\x18\x70\x3e\x85\xe1\x39\xfe\x83\xf8\xcb\x6b\xbc\xc3\x28\xb8\xc1\x3b\x0c\x6c\x98\x89\x36\xb8\xc3\xc8\x1b\x1c\x30\x78\x83\x53\x5f\xaf\x00\xec\xd1\x6c\x72\xe4\x10\x4f\xd6\xdb\x9a\x73\x39\x91\x99\x22\xd5\xd2\x92\x2f\xa1\x24\xd3\x4c\xd4\x68\x51\x10\xdb\xa5\x35\xeb\x72\x9e\x49\xfa\x25\xf2\xa6\x76\x29\x2f\xf7\x59\x44\x3a\x7a\xcf\xb8\x26\x8a\x52\x59\x39\x72\xd4\x92\x4a\xe4\xc2\x1e\x26\x66\xa8\x2b\x66\xc2\xda\x82\xb5\xa7\x8a\xae\x54\xa4\x5b\xbb\x48\x37\x87\x01\x93\x51\xba\x4a\xde\x25\x05\xed\x24\x5e\x77\x6d\x4b\x76\xb6\x92\x2a\xf5\xc9\xd1\x14\x36\xf8\x8c\xe3\xbc\x7d\x5c\x91\xdf\x7f\x02\x00\x00\xff\xff\x80\x42\xa2\x5c\xeb\x01\x00\x00")

func keysTestAccount2PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount2Pk,
		"keys/test-account2.pk",
	)
}

func keysTestAccount2Pk() (*asset, error) {
	bytes, err := keysTestAccount2PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account2.pk", size: 491, mode: os.FileMode(0644), modTime: time.Unix(1532696448, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x72, 0xd5, 0x95, 0x5c, 0x5a, 0x99, 0x9d, 0x2f, 0x21, 0x83, 0xd7, 0x10, 0x17, 0x4a, 0x3d, 0x65, 0xc9, 0x26, 0x1a, 0x2c, 0x9d, 0x65, 0x63, 0xd2, 0xa0, 0xfc, 0x7c, 0x0, 0x87, 0x38, 0x9f}}
	return a, nil
}

var _keysTestAccount3BeforeEip55Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xdb\x8a\x1c\x31\x0c\x44\xff\x45\xcf\xdd\x20\x4b\xbe\xc8\xfe\x1b\x59\x96\xc8\xb0\xb7\xa1\x7b\x58\x12\x96\xf9\xf7\xd0\x59\xc2\x3e\xd6\x43\x1d\x4e\xd5\x17\x7c\xfa\x71\xde\x3e\xde\x61\xf0\x06\xb7\x05\x03\xd0\x96\xb9\x85\xed\x46\x61\x7b\x26\x4d\xbb\xf8\x2a\x7b\x26\x33\xec\xd4\x16\x2f\x81\x0d\x74\xad\xc3\xcf\x13\x06\xb0\x2e\xce\x5e\xbb\xac\x2c\x58\x35\x16\xca\xe4\xd2\x67\x27\x8c\x62\x75\x56\x9a\x55\xdc\x33\x6c\x60\xc7\x9f\xfb\xe3\x03\xc6\x17\xd8\xed\xfe\xcb\x8f\x87\xff\x7e\xc0\x00\xa2\xd2\xbb\x98\x77\x56\x2d\x93\x5a\x6a\xa5\x60\xc9\x9c\xd2\x52\x31\x6b\x53\xa8\x24\x6a\x2b\x23\x5a\xa7\x16\xca\xc2\x0d\x3d\x27\xa6\x4e\x66\x97\xce\x37\xef\xae\x87\xbe\x9d\x17\xff\xf6\x09\x03\xa4\x27\x6a\xd9\x49\x5b\xa3\xb6\x34\xd9\xd2\xb4\xc8\x6c\x12\xfb\x94\x89\xf0\xfc\x5f\x84\x01\xea\xe7\x9e\x48\x76\x7b\x1c\xb0\xc1\xcb\x0a\x18\x70\xfe\x13\xfe\x8e\x3f\xec\xf5\xf2\xea\xd7\x61\xb4\xc1\xa9\xaf\xd7\x80\x45\x93\x50\xb5\xd5\x2c\x11\xd8\xc9\x98\x51\x1a\x51\xc6\xf0\x5c\x83\xc2\xd8\x53\x66\xa6\xc9\x42\x9a\x05\x25\x6a\xc1\xc9\x56\xa5\x4b\x2d\x13\x36\x78\x87\x21\xa9\xd3\x06\x07\x0c\xd9\xe0\x0e\x23\x3d\x37\x78\x53\xbb\xd4\x10\x33\x63\x13\x89\xd5\x66\xa0\x93\xbb\xd7\x48\x5c\x4a\xcb\xa5\x27\x8e\xe2\x14\x25\x65\xaa\x1a\x9d\x58\x8a\x22\xba\x9b\xa6\x28\xd6\x98\x12\x3c\x9f\x7f\x03\x00\x00\xff\xff\x4c\x6d\xd5\xbe\xe9\x01\x00\x00")

func keysTestAccount3BeforeEip55PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount3BeforeEip55Pk,
		"keys/test-account3-before-eip55.pk",
	)
}

func keysTestAccount3BeforeEip55Pk() (*asset, error) {
	bytes, err := keysTestAccount3BeforeEip55PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account3-before-eip55.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1532696448, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x40, 0x56, 0xc1, 0x5e, 0x10, 0x6e, 0x28, 0x15, 0x3, 0x4e, 0xc4, 0xc4, 0x71, 0x4d, 0x16, 0x99, 0xcc, 0x1b, 0x63, 0xee, 0x10, 0x20, 0xe4, 0x59, 0x52, 0x3f, 0xc0, 0xad, 0x15, 0x13, 0x72}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../config/README.md":                   ConfigReadmeMd,
	"../config/cli/fleet-eth.beta.json":     ConfigCliFleetEthBetaJson,
	"../config/cli/fleet-eth.prod.json":     ConfigCliFleetEthProdJson,
	"../config/cli/fleet-eth.staging.json":  ConfigCliFleetEthStagingJson,
	"../config/cli/fleet-eth.test.json":     ConfigCliFleetEthTestJson,
	"../config/cli/les-enabled.json":        ConfigCliLesEnabledJson,
	"../config/cli/mailserver-enabled.json": ConfigCliMailserverEnabledJson,
	"../config/status-chain-genesis.json":   ConfigStatusChainGenesisJson,
	"keys/bootnode.key":                     keysBootnodeKey,
	"keys/firebaseauthkey":                  keysFirebaseauthkey,
	"keys/test-account1-status-chain.pk":    keysTestAccount1StatusChainPk,
	"keys/test-account1.pk":                 keysTestAccount1Pk,
	"keys/test-account2-status-chain.pk":    keysTestAccount2StatusChainPk,
	"keys/test-account2.pk":                 keysTestAccount2Pk,
	"keys/test-account3-before-eip55.pk":    keysTestAccount3BeforeEip55Pk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"README.md": &bintree{ConfigReadmeMd, map[string]*bintree{}},
			"cli": &bintree{nil, map[string]*bintree{
				"fleet-eth.beta.json":     &bintree{ConfigCliFleetEthBetaJson, map[string]*bintree{}},
				"fleet-eth.prod.json":     &bintree{ConfigCliFleetEthProdJson, map[string]*bintree{}},
				"fleet-eth.staging.json":  &bintree{ConfigCliFleetEthStagingJson, map[string]*bintree{}},
				"fleet-eth.test.json":     &bintree{ConfigCliFleetEthTestJson, map[string]*bintree{}},
				"les-enabled.json":        &bintree{ConfigCliLesEnabledJson, map[string]*bintree{}},
				"mailserver-enabled.json": &bintree{ConfigCliMailserverEnabledJson, map[string]*bintree{}},
			}},
			"status-chain-genesis.json": &bintree{ConfigStatusChainGenesisJson, map[string]*bintree{}},
		}},
	}},
	"keys": &bintree{nil, map[string]*bintree{
		"bootnode.key":                  &bintree{keysBootnodeKey, map[string]*bintree{}},
		"firebaseauthkey":               &bintree{keysFirebaseauthkey, map[string]*bintree{}},
		"test-account1-status-chain.pk": &bintree{keysTestAccount1StatusChainPk, map[string]*bintree{}},
		"test-account1.pk":              &bintree{keysTestAccount1Pk, map[string]*bintree{}},
		"test-account2-status-chain.pk": &bintree{keysTestAccount2StatusChainPk, map[string]*bintree{}},
		"test-account2.pk":              &bintree{keysTestAccount2Pk, map[string]*bintree{}},
		"test-account3-before-eip55.pk": &bintree{keysTestAccount3BeforeEip55Pk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
