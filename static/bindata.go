// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../config/README.md (3.132kB)
// ../config/cli/fleet-eth.prod.json (3.232kB)
// ../config/cli/fleet-eth.staging.json (1.846kB)
// ../config/cli/fleet-eth.test.json (1.527kB)
// ../config/cli/les-enabled.json (58B)
// ../config/cli/mailserver-enabled.json (176B)
// ../config/status-chain-genesis.json (612B)
// keys/bootnode.key (65B)
// keys/firebaseauthkey (153B)
// keys/test-account1-status-chain.pk (489B)
// keys/test-account1.pk (491B)
// keys/test-account2-status-chain.pk (489B)
// keys/test-account2.pk (491B)
// keys/test-account3-before-eip55.pk (489B)

package static

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ConfigReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5d\x6f\xdb\x3a\x12\x7d\xd7\xaf\x18\xa8\x0f\xdb\x00\xa9\xe4\xc4\x76\x92\xab\x97\x6d\x9a\xa4\x37\xd9\x4d\xd3\xc0\x49\xf7\x3e\x14\x45\x44\x8b\x63\x89\xb7\x14\x47\x97\xa4\xec\xba\x8b\xfe\xf7\xc5\x50\x92\x3f\x92\xec\x02\x8b\x04\xb6\x45\xce\x1c\xce\x9c\x33\x9a\xe1\x1b\xb8\x31\xde\x92\x6c\x0b\xaf\xc8\x44\xd1\x63\xa5\x1c\x48\x2a\xda\x1a\x8d\x07\x89\xae\xb0\x6a\x8e\x0e\x7c\x85\x20\x96\x42\x69\x31\xd7\x08\xd4\xb0\xb5\x03\x65\xc2\xc6\x3f\x1e\x3e\xdf\x41\x41\x66\xa1\x4a\x58\x90\x85\xdc\x79\xe1\x5b\xf7\xae\xa4\x3c\x61\x48\x04\xe7\x6d\x5b\xf8\xd6\x22\xd0\xe2\x85\x0b\x9f\x88\x0b\x65\x50\x0e\x80\x5f\xf3\x46\x58\x51\xbb\xb4\xb3\x48\x4a\xca\xbf\xbd\x4d\x9f\xaf\x1d\xc0\x42\x69\x3c\x84\x55\xa5\x8a\x0a\x84\x76\xc4\x88\x5e\x28\xc3\x80\x5e\x28\x8d\x12\x0a\xaa\x39\x15\x07\x64\xa0\x46\x61\x94\x29\x39\x06\x14\x45\xd5\xa7\x91\x00\x47\x98\xdf\x91\xc4\x8b\x00\x9d\xf7\xe1\xf6\x51\x75\xc9\x97\x68\xd0\x0a\xdd\xc7\xdc\x5a\xc1\xae\xf0\x1d\xd7\x0e\x84\x0f\x16\x4f\x4f\x96\xc8\x3f\x3d\xed\xa5\xc8\x11\x26\x51\x74\xd3\x2d\x75\x7c\xf6\xe4\xd1\x02\x84\x59\x6f\xb8\x14\x16\xc1\x13\xc1\x52\x94\x2d\xc2\x02\x51\xc3\xc2\x22\xaf\xc1\x57\x6a\xd0\x80\x30\xa0\x9c\x6b\xf1\xdb\xdb\xca\xfb\xc6\x65\x69\x5a\x2a\x5f\xb5\xf3\xa4\xa0\x3a\xed\x19\x57\x9b\x5f\x25\xa5\xc1\xda\xa5\x06\x57\x07\x49\x14\x5d\xfd\x10\x75\xa3\x71\xa3\x93\xd2\xe8\xa0\x10\x06\xe6\x08\x4b\x85\xab\x5d\xf6\x3b\x9b\xb4\xd0\x8a\x79\xdf\x3e\x1d\xc0\x82\xb4\x44\x9b\x44\xd1\x1b\xb8\xa9\x1b\xb2\x5e\x18\x0f\x0f\x18\xaa\xc7\x75\x5a\x3f\x93\xd6\x21\xeb\xe6\x03\xbc\x27\x70\xb8\x0c\x3c\xba\xde\xa7\x63\xbf\x26\xe7\x41\x6d\x00\x89\x59\x67\x42\xb4\x72\xec\x39\x47\x4d\x2b\x3e\xf4\xcd\x9e\x4e\xdd\x79\xcc\xfa\x2b\x65\xd5\x4b\x94\x44\xd1\xb9\x01\xec\x93\xa7\xc5\xf3\xa3\x1c\x7a\xaf\x4c\xe9\x60\x45\xad\xe6\x18\x0b\xdd\x4a\xcc\xa2\x3c\xcf\xff\x74\x64\xa2\x7f\x47\x00\x00\xf1\x1d\xfa\x15\xd9\xef\x37\x97\x71\x06\x47\x87\xdd\xda\xa5\xf0\xe2\x52\xd9\x38\x83\x38\xf5\x75\xb3\x65\xfe\x9d\x14\x5e\xc4\xbd\x15\xc7\xfb\x4f\x5c\xb3\xd5\xd1\xf1\xf8\xaf\x15\x3e\xfb\x1c\xec\x66\x68\x24\xfe\x5c\x52\xeb\xe2\x0c\xbc\x6d\x71\xe3\x7f\xa9\x5c\x41\x4b\xb4\x8c\xb1\x10\xda\x0d\x3b\xb7\x4c\x8e\x39\x97\x32\x84\x30\x4a\xc2\x5f\x36\x1e\x8d\x47\x1b\xd0\x73\xb9\x44\xeb\x95\xc3\xc1\xea\xe8\x38\x19\x4f\x92\xe9\x49\x72\x7a\xb6\x3d\xb8\x64\x20\xfb\x48\x8d\x2a\xf8\xf0\xaf\xf1\xaa\x52\xae\x41\x5b\x0b\xa5\xe3\x6f\xd1\x2f\x26\x23\xd4\xf0\x9a\xda\xbf\x49\x58\x31\x6f\x9e\x00\x4d\x68\x06\x81\xf3\xd9\xfd\x05\x30\xa5\xbd\x89\x41\x94\x2f\x38\xbc\x7e\x7c\xbc\xbf\x0a\x3e\x72\x3f\x45\xde\xb8\x26\xe7\x77\xd2\x88\x77\xb6\xee\xc9\xf2\xd6\xd9\x74\x32\x1d\xd2\xba\xbf\xf9\x44\xb2\xd5\xc8\xe1\xc6\xe8\xab\x43\x83\xfe\x70\x85\xf3\xf1\xa1\x90\xb5\x32\xf1\x26\x66\x03\x64\x25\x5a\x0e\x57\xc8\x3f\x5b\xe7\x41\x53\x59\x72\x13\xd8\x08\xff\x3f\x22\xbe\xa5\xf2\xa3\xd2\x18\x14\x5e\x0a\x9b\x6a\x2a\xb7\x2a\x27\x9a\xca\x21\xcc\x5b\x2a\x6f\x71\x89\x9a\x2d\x6f\xee\x3e\x7e\xde\x59\xff\x24\x7e\x3c\xa8\x9f\x8c\x71\x3c\x1a\xed\x2d\x7f\x10\xc5\xf7\xb6\xe1\x14\xa6\xdb\xf5\x0b\xaa\x1b\x8b\xce\xcd\xc8\xf3\x4b\xd3\x13\xd5\xe7\xf3\x2f\xa1\x95\x84\x7c\x38\x2d\xdf\x26\x21\x2c\x66\x90\x5f\xcd\x66\x9f\x67\xf9\x21\xe4\x7f\x9c\xcf\xee\xf8\x9b\x63\xe1\xef\xcb\xab\x0f\x5f\x7e\xe7\x1f\x8f\xb3\xf3\x8b\xab\xbc\x7b\x93\xfe\xe8\x54\x1e\x9a\xde\xa0\x70\xa7\xef\x9a\x5a\x0b\x86\x64\x68\x40\x16\xb5\x58\x43\x6f\xff\xf6\xe1\xfa\xfa\x00\x1a\x4b\x9e\x0a\xd2\x50\xa3\x73\xa2\xc4\x8e\x47\xad\x37\xd5\xd1\xbf\x49\xe0\x2b\xe5\x5e\x10\xbb\x77\x74\x9c\x41\xb7\x1c\xb6\x5e\xab\x90\x9d\x8d\x4f\x42\xe9\x07\xb4\x4b\xb4\x2f\x2d\x6e\x55\x59\xf9\x0b\xad\xd0\xf8\xfd\x57\x25\xec\x6e\x3d\xef\x85\x73\x2b\xb2\x7c\x46\xdc\xcb\x49\x8b\x85\x56\x06\xdf\x29\x33\xa7\x1f\x71\x70\xfa\xd5\x93\x1e\xa6\xc3\x4b\xe7\x9c\x9b\x5b\xeb\x50\x86\x91\xe7\xd6\x75\x8d\xde\xaa\x02\xd0\x14\x76\x1d\x7a\x3a\x77\x9b\x4a\x39\x4f\x76\x0d\x16\xff\x6a\xd1\x79\x97\x44\xd1\x87\x35\x0f\x16\xd1\x6a\x0f\xca\xc3\x4a\x69\xcd\x30\x90\x6b\x96\x54\xce\x73\xc0\x7a\x8e\x52\xa2\x04\x6e\x23\x73\xe1\x30\x81\x47\x0a\x36\x0d\x39\x5f\x5a\xe4\xc1\xeb\x3c\x0a\x19\xe4\xe2\xca\x65\xc2\x23\x21\x65\x60\x9b\x1f\x82\x7c\x5d\x23\xcc\xa2\xe7\xec\x5f\xf6\xb8\x2f\xe8\x8f\xef\x7f\xff\xbf\x24\xf9\x32\xbb\x61\x0e\x87\xb0\xb2\x34\x6d\x1d\xda\xac\xe9\x29\x7a\x5f\x91\xf3\x19\xb7\x85\xbf\xf7\x53\x2e\xee\x7d\x7f\xed\x31\x1c\x3d\x3d\xdd\x7d\x7e\xbc\xca\x9e\x9e\xc2\x30\x18\xd8\x19\x60\x3a\x96\xe7\x6b\x78\x08\x5a\xc1\x79\xd3\x80\x30\x12\xbe\x72\x8e\xdc\xa3\x5c\x10\xc6\x6d\x07\xe3\x42\x23\x7a\x97\x74\xda\x26\xaa\x4e\x0f\x58\xac\xfc\x35\xad\xf3\x7e\xac\x5c\xe8\x96\x9b\xe0\xce\x64\x51\x6e\x98\x62\xb5\x30\xa1\xc2\x57\x95\xf0\xd0\x20\x5a\x17\xce\x9f\x13\x79\xe7\xad\x68\xc2\x7b\xe2\x3a\xce\x77\xee\x3e\x41\x25\x61\x8a\x30\x73\x0d\x16\x9e\x11\xd0\xb0\xea\xce\x0b\xcb\xc5\xb0\x2b\x4c\xbc\x17\xc2\x46\x81\x57\xd9\x8f\x3f\x72\x86\x7d\xf3\x4b\x1a\x4b\x72\xe8\x38\x1f\x88\x3c\x8f\x9c\xd0\xc8\x07\x59\x91\x03\xcc\xd2\x74\x3c\x99\xa2\xf5\xdd\xe7\xfb\xe3\x71\x32\x99\x26\x27\xa7\xc9\xd9\x6f\xd9\x78\x34\x19\x4d\x3a\x71\xbe\xf5\x40\x8f\x96\xa3\x91\xdb\xc2\x7f\x15\x71\x77\x92\xbd\xff\xed\x2c\x39\x3d\x49\xa6\x93\x64\x7c\x9c\x8d\x47\xd3\xe7\x88\x2c\x9f\x2a\xfe\x6b\x70\xbb\x73\xf1\xfd\xce\x9c\x0a\x13\x6d\xba\x0f\xb5\x1d\x96\x2f\xe0\x52\xd5\x4c\xd2\xb3\xd3\xe4\x64\x9a\x4c\xc6\xc9\xf1\x51\xea\x8b\x26\x1d\x8f\x4e\x47\xe3\x14\x7d\xb5\x9c\xa4\x47\x27\x5f\x54\x7b\x7c\x7d\x5e\x8f\x8f\x8e\x5f\xfd\xef\x8f\x8a\xb6\x05\x9a\x6f\x58\xcd\xa1\x42\xdd\x84\xbb\xc6\xab\x4a\x2f\x94\x91\x5d\x89\x84\x8b\xcd\x3a\xdc\x62\x6a\xb2\xb8\x73\xe5\xf0\x04\x95\x58\x72\x67\x14\x06\xf2\x1d\x56\x72\xe0\xcb\xf3\x4b\xe2\xf3\xcd\x1d\xd7\x22\x84\x21\xe6\x82\x93\xd0\x7a\x0d\x22\xb4\x8a\xae\x2a\xc9\x74\x95\x95\x44\x51\xfe\x8c\xa2\x3c\x38\x0b\x03\x42\x7b\xb4\x46\x78\xb5\xc4\x6d\x13\xe7\x16\x26\x89\xc7\x22\x67\xe6\x44\x8d\x01\x11\xe4\x70\xf5\x00\xe1\x60\x97\x05\x49\x49\xf4\x9f\x00\x00\x00\xff\xff\xb7\xa7\x30\xd0\x3c\x0c\x00\x00")

func ConfigReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_ConfigReadmeMd,
		"../config/README.md",
	)
}

func ConfigReadmeMd() (*asset, error) {
	bytes, err := ConfigReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/README.md", size: 3132, mode: os.FileMode(0644), modTime: time.Unix(1582203713, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x71, 0x14, 0x3e, 0x9d, 0x9c, 0x11, 0x40, 0xe1, 0xe9, 0x8b, 0xcc, 0x38, 0x17, 0x69, 0xb, 0xa7, 0xf2, 0x91, 0xa6, 0x4a, 0x9f, 0xd2, 0xc6, 0xf4, 0xff, 0x37, 0x5d, 0xd3, 0xed, 0x7c, 0xbd}}
	return a, nil
}

var _ConfigCliFleetEthProdJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x76\x5d\x8f\x9e\x45\x72\xf6\x39\xbf\x62\x34\xc7\xaf\x1e\xd7\x77\x77\xf9\xc8\xef\x12\x08\x62\x13\xc4\x2e\x0b\x81\x44\x39\xa8\xae\x0f\xe3\x2c\xf1\x10\x63\x5b\x81\x68\xff\x7b\x74\x1b\x47\xb0\x82\x39\x1a\xa9\xe7\x51\xf7\x75\x5f\x5f\x55\xff\xf3\xc1\xdd\xdd\xfd\x9f\xfb\x65\xf5\x4f\x6f\x1f\xde\xfc\x70\xff\xf4\xee\xf5\xab\x37\xfd\xff\xae\xd3\xcf\x1e\xfe\xe1\xc5\x0f\xf9\xf0\xb6\x5f\xfd\x78\xff\xf4\x6e\xe2\xbb\x1f\x7e\x3e\xff\xf0\xbb\x37\x3f\xbc\xee\x57\x1f\x3e\xbc\x9c\x17\xcf\xef\x9f\xde\x5d\x57\xdc\xdd\xdd\x7f\xf4\x32\xce\x77\x5d\xbf\xba\xe1\xee\xee\xfe\xe3\xef\xba\x5f\xdf\x3f\xbd\xbb\xef\xd7\xdf\xde\xbe\x7f\xf5\x50\xf7\xef\xff\xf1\x87\x87\x87\xd7\x9f\x3d\x54\x5f\x2f\xfe\xdb\xbb\xa3\xbb\xbb\xfb\x7e\xf9\x50\xfd\xf4\xc9\x13\x6b\x53\x95\x39\x0c\x2c\x87\x10\xd9\xf7\x64\xc1\x00\x6c\xca\x73\xec\x14\xb2\xa1\x37\xc6\xea\x65\x27\xcc\x1a\x37\x78\x44\x40\xea\x60\xa4\x72\x7a\xf4\xf2\x1c\x9a\x92\x58\x27\xf2\x20\x14\x12\x20\x6c\xf7\xc3\x0b\x72\xe9\x74\xa1\x1f\x77\x2c\x4f\xc8\x2a\xa0\xed\x18\x27\xea\x99\xac\xdb\xd2\x9b\xfb\x0d\xcd\x9f\x8a\xf0\x7b\xd4\xbf\x82\x28\x6c\x99\x36\xb6\xc4\x69\x4f\xa5\x87\xcf\x72\x87\x21\x17\x01\xa0\x63\x5b\x0b\x93\xd7\x00\x69\xe2\x69\x21\xc5\xad\x47\x0f\x0e\x38\xc0\x74\x0c\x66\x26\x85\x21\x03\xd9\x1e\x77\xb8\x7e\x16\xab\x48\x69\x78\x31\x50\x6e\x66\x0d\x4a\x0c\xa3\xc5\xd6\x4e\x4c\xe6\x98\xc9\xf1\x0c\xd7\xbe\x21\xed\x1b\xf2\xbb\xbf\xbf\x8f\x92\x69\xc6\x6a\xef\x65\x70\xc0\x65\x05\x57\xb7\x4a\xf6\x8c\xd4\xae\x35\x70\x24\x81\x38\xad\xa2\x58\xd4\xb6\xa1\x4e\x46\x6f\x6f\xb2\x4c\x5a\xca\x43\x7b\x90\x64\x6b\x08\xa2\xa5\xaf\x75\xda\x79\xc5\x22\x33\x45\x34\x75\x23\xd3\x08\x58\x6c\x47\xb9\xc4\x0e\x2d\x11\x23\xb7\x78\xc6\x72\x5b\x70\x71\x49\xf0\x08\x44\xe2\x82\x25\x70\x10\x1d\x9d\x75\x1b\x69\x2d\x2f\xc9\xc8\x55\x0a\xc1\x52\xcb\xdb\xd3\xbc\xd1\x36\x63\x6a\x2e\xd0\xc5\x4b\x57\xe0\x68\xad\xda\x5b\x14\xe1\xa4\xba\xd6\xea\x96\x0a\x4e\x54\xd8\x51\xb3\xd7\x39\xe9\xed\x64\x50\x1b\xa4\x07\x78\x76\x62\xf3\x1a\x9a\x43\x93\xe6\x97\xd6\x4a\x37\x04\xbb\x21\xac\xdf\xc7\xa8\xec\x1a\x71\xd6\x66\x1e\xec\x3c\xb6\xf0\xa8\x9f\x01\x25\xcc\x21\x20\x92\xe9\x8d\x46\x93\x5c\x64\x4b\xab\xe5\x02\xa2\xc6\x16\x4b\x3b\x99\x0a\xf9\x12\x39\x71\x4b\xcd\x2e\xac\x9a\xd8\xc0\x2e\xec\x60\x7b\x53\x85\x51\x48\x8d\x50\xc9\x64\x8e\x15\xae\x0d\x1b\xd5\x62\xaf\x5f\xc4\x16\xb8\xe1\x7e\x84\x49\x15\xd0\x54\xf0\x1a\xdb\x9c\x6e\xd4\x2b\x5d\x16\x1c\x52\x3c\xc7\x96\x57\x99\xaf\x3d\x9b\x4a\x8f\x98\x0f\x8e\xa5\x49\x21\x96\xc2\x9c\xd2\x2a\x9f\xb5\x01\xd3\xa2\x14\x87\x0f\x41\xe8\x58\xae\x99\x26\xd9\x99\x1e\x87\x88\x67\x9f\x3c\x71\xf9\x57\xce\xc1\x84\x1e\x72\x9d\x82\x67\xac\x37\x22\xbe\x11\xea\x0d\xd5\xde\x81\x7c\x87\xf1\xdf\xdf\x67\xfe\x2f\xaf\xae\xe2\xa8\x7f\x8e\x17\xdf\x7d\xd1\xaf\xde\xf6\xab\xdf\x0f\x3f\x58\x34\x48\x2c\x6c\xad\xb3\x6d\xc7\x22\xca\xb5\x82\x30\x37\x89\x44\xf3\x1e\x3c\x65\x17\xe3\x7b\x65\x5a\x4e\xef\x1d\x0c\xc6\x13\x98\x24\x6a\x4e\xc4\x34\x26\x23\x7a\x4a\x05\xf6\x74\x29\x32\x77\x9c\xdd\xb5\x36\x88\x33\xd3\x01\x19\x4f\x44\xe8\xc8\x35\x0b\x13\x8f\x90\xbf\x0f\x3f\xc9\xba\x11\xca\xef\x53\x9d\x42\xc3\xb6\x83\x78\xc2\xf7\x15\x29\x9b\x22\x59\x44\xb0\xd4\xc1\x88\x89\x49\xbc\xc7\x74\x15\x59\xb1\xae\x58\x6b\x89\x70\x74\x82\xd4\xc1\x43\x1e\x1c\x44\x3d\xdc\x2b\x55\x76\xe3\x16\xe7\xaa\x18\xc5\x60\x3c\x10\x5d\x06\xcb\xaf\x0f\x3d\xad\xd1\x9b\xf7\xe4\xc4\x70\x88\xff\xca\x10\x74\xd3\x47\x40\x76\xd3\x51\x3e\x10\xd9\x6e\x4e\x68\x2b\x04\x41\x51\x4e\x06\x03\x89\xb9\xd6\x19\x68\x0c\xdb\x8d\x35\xe3\x0b\xed\xf2\x21\xf4\x1c\x74\x1d\x90\x90\xe3\xbd\x17\xcf\xf1\xb3\x24\x72\x4b\xf5\x06\x44\xb0\x14\xd3\xb3\x9b\x8e\xa5\x0c\x94\xf3\xd9\x4b\xbc\x50\xd7\x3e\x93\x31\xc0\xfd\x0c\x41\x6e\xe8\xeb\x46\x57\x45\xc9\x23\x28\x29\x77\x35\xe7\x39\x74\xb5\x13\x43\x9e\xa3\x87\x1b\x80\x4f\x2e\xa2\x83\x64\xa3\xd1\xb3\xa9\x09\x94\x22\xae\x10\x53\x86\x4b\x43\xae\x28\x42\x6f\x65\x3e\xb1\xf7\x55\x0c\x5b\xfb\xd4\x06\xaa\x26\x30\x73\x26\x55\x66\x3d\x08\xc0\xb0\x4c\x34\x8e\xe2\x82\xde\xdb\x08\x8a\x62\xe3\x25\x37\x89\xdc\x88\xf0\xf6\x98\xdc\x2b\xc2\x64\x5f\x8e\x53\x75\x85\x43\xcd\xc5\x67\x88\x20\xc5\xad\x21\xa3\x25\x6a\xaa\x2e\x35\xb1\x0d\x8c\xda\x0e\xae\x15\x9d\xce\x27\x2d\x2b\x07\xe9\x1a\x5e\x02\x85\xa6\x17\xb0\x3e\x53\xa5\xa6\x8b\xbc\x42\x04\xd8\x76\xad\x94\x8a\x55\xa7\xa4\x00\xe4\x60\x24\xd0\x99\xfd\x77\x72\x93\x3d\xd2\xf5\x40\x88\x79\x6a\x63\x92\x0e\xac\x03\x1c\x80\x6e\xa5\xd6\x96\x2d\x06\x57\x5c\xb9\xce\x5a\x3c\x73\xe5\x36\x88\x94\x55\xd6\xc4\x94\x25\x58\x47\x5b\x14\x2b\x73\xd3\x09\xf6\x52\x57\x93\x9c\x53\xe7\x68\x53\xf6\x4a\xe4\x15\xda\xe7\x6c\x6d\xf7\xca\xc9\x15\x4b\xc7\x7d\x54\x9f\x5d\xd1\x67\xbb\xe9\xbe\x39\x3d\xe2\xc8\xad\x83\x25\x04\x3e\x34\xee\x15\x1b\x30\x06\x77\x9d\xbd\xd0\x5a\xb7\x04\xed\x28\x38\x95\xb2\xe6\x54\xd6\x1e\xb2\x98\x25\x75\xca\xd7\x24\x2d\x47\x11\xdb\xa0\xca\x9d\x2b\xcb\xc1\x29\xa6\x6d\x73\x55\x07\x36\x8c\x4f\xea\xc2\x3e\x79\xe4\x60\x6d\x5d\x79\xf1\xb0\xf7\x56\xae\xff\xd3\x1a\xc9\x6f\xfb\x11\x8c\x3b\x4c\x0e\x27\x8b\x07\x35\xf4\x48\x30\x75\x88\x1b\x78\x5f\x51\x64\x36\x39\x8d\x88\x40\xca\x49\x10\x95\xb8\x82\xb3\xcf\x49\xf6\x78\x67\xc7\xe2\x46\x3e\xa8\x17\xc9\xdd\x5a\xfb\xc2\x15\xfb\x04\x65\x01\x19\xa0\xb4\xad\x23\x18\x12\x67\x15\x5e\xcd\x6b\x2b\x83\x96\xd0\xfa\x3b\xad\xfd\x11\x43\x8a\xa0\x41\x13\xf5\x3e\x42\xa7\x98\x02\x2c\x51\x99\xd0\x74\xc2\x1b\xdc\xba\x4f\x57\xad\x09\x2b\x6b\x9d\x7d\x4e\x0f\x88\xc0\x49\x09\x51\xc7\x69\x36\xc5\xd3\xb6\xd1\x39\x56\x27\x90\x03\x61\xd6\x11\xbf\x1a\x15\x6b\x8d\x0f\xd6\x35\x78\x8f\x3b\x91\xb5\x0d\x7b\xac\xd0\x92\x9f\xab\x5e\xdf\x85\x86\x44\x7f\x5b\xf5\x5f\xbc\x8e\xd7\x2f\xf2\xd1\x05\x2f\x92\x5d\xf6\xa1\x84\xb5\x2d\x2e\xcb\xe3\x3a\x1b\x72\xb6\x79\x8e\xfa\x41\x07\xef\xe0\xc8\x2c\x51\x17\x89\x68\xd6\x33\xdb\x24\x13\xcc\x91\xac\x62\x9f\x4d\x35\x3d\x52\x35\xc4\x83\x65\x65\x47\xe4\xa0\x9a\xa6\xe4\x6c\xcc\x7d\x7c\x03\x5d\x36\x4f\x8b\x0e\x8c\xed\xc5\xd9\xf4\xbe\xe3\xf7\xc5\xf4\x23\x0d\xdf\xaa\x1e\xbc\xc2\x93\x45\x6a\x21\xf8\x29\x71\x58\x57\xb7\x94\x39\x00\x6c\xde\x78\xcd\x49\xd3\x9d\xc2\xa0\xd6\xc9\x16\x09\xc2\xcc\xfb\x94\xd3\xb5\x89\x1a\x08\xb7\x89\x1e\x13\xbf\xca\xd8\x86\x16\x01\x95\x2d\x5f\x6a\xe1\xb9\x72\x8c\xa6\x7a\x02\xf0\x50\x5b\x5c\x23\x7c\xf7\x33\x64\xb9\x11\xf8\x0d\xd9\x6e\x48\xfc\x5b\x8a\x7f\x59\xda\x7f\x43\xf3\x93\x17\xdf\xcb\x13\x5c\xf2\xf3\x72\x08\xd7\x30\xe3\x27\xaf\xf3\xfb\x27\x0c\x0b\xf8\x49\xbf\xfe\xf6\xad\x3c\x41\xfb\xf2\xc5\x1b\xfa\xe4\xff\xff\xe7\x9f\x3f\xf9\xfc\xa7\x8f\xf9\xd5\x9f\x9e\xab\x7e\xfe\xfc\x9b\xcf\xf3\x4f\x7f\xfd\xf1\xed\xe7\x5f\x7d\xe2\x2f\xe9\xdb\x7f\xf9\xe1\x9b\xcf\xbf\xfd\xf2\xd3\x3f\xfc\xab\xfd\xf5\xab\xff\xf8\xf4\x79\x7d\xf5\x0b\x51\xef\xde\xa0\x6b\x6b\xda\x7e\xdd\x7f\xd3\xf5\xf8\x13\xff\xf4\x5f\x7f\xf9\xfa\xcd\x37\xf2\xc5\xb1\x7f\xa4\xfd\xc9\x67\x0f\x0f\xf1\xf1\x97\x5f\x7f\xf9\xc7\x9f\xbe\xff\xe9\x8f\x5f\x7f\x98\xcf\x7f\xfc\xf4\xbf\x9f\xc7\x47\x1f\xd1\x0b\x7d\xfb\x72\xde\x7f\xe5\x07\x77\x77\x7f\xfb\xe0\x6f\x1f\xfc\x6f\x00\x00\x00\xff\xff\xbe\x15\x33\xaa\xa0\x0c\x00\x00")

func ConfigCliFleetEthProdJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthProdJson,
		"../config/cli/fleet-eth.prod.json",
	)
}

func ConfigCliFleetEthProdJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthProdJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.prod.json", size: 3232, mode: os.FileMode(0644), modTime: time.Unix(1582203948, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0xc3, 0xae, 0xf2, 0x48, 0x6c, 0x5, 0x81, 0xbb, 0x48, 0x51, 0x44, 0x82, 0xef, 0xe4, 0x68, 0xb4, 0xb6, 0x6, 0xbb, 0xf9, 0x76, 0x76, 0x1b, 0x54, 0xfa, 0xda, 0x7b, 0xd2, 0x49, 0xd, 0xe4}}
	return a, nil
}

var _ConfigCliFleetEthStagingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x5f\x6f\x54\xc9\xd1\xc6\xef\xf9\x14\xa3\xb9\x7e\x75\x5c\xd5\x5d\x5d\x5d\xe5\x2b\xbf\xb0\x36\xd6\x26\x20\x62\x16\xb2\x22\xca\x45\x77\xfd\xb1\x27\x76\x3c\xec\xcc\x98\x85\x8d\xf6\xbb\x47\x03\x48\x4b\x16\xb8\x3b\xaa\xa3\x53\xcf\x4f\x3f\x3d\xa7\xfe\xf3\x68\xb5\x5a\x5f\xc5\xbd\xc7\x6f\xef\xb6\x0f\xfb\xf5\xe9\xea\xb0\x7b\x88\xff\x3b\x4e\x9f\x6f\x7f\xd8\xec\x6d\xfb\x2e\x76\x1f\xd6\xa7\xab\x1c\x77\xfb\x4f\xf3\x27\x77\x0f\xfb\x43\xec\x9e\x6c\xef\x73\x73\xbd\x3e\x5d\x1d\x57\xac\x56\xeb\xf3\xfb\x31\xef\xc2\xbf\xd8\xb0\x5a\xad\x2f\xee\x22\x0e\xeb\xd3\xd5\x3a\x0e\x37\xcb\xfe\x30\xae\x37\xf7\xd7\xeb\xcf\xef\x1e\x6f\xb7\x87\xe7\x5b\x8f\x63\xe8\x3f\x3e\x8e\x56\xab\x75\xdc\x6f\x3d\x4e\x4f\x4e\xb8\xc2\x84\x4a\xc5\x06\x85\xb6\x56\xb2\x41\x47\x9a\x6c\x12\x45\x9c\xb5\xb5\x69\x90\x8e\x14\x5d\x1b\xa4\xd6\x69\x75\x96\x29\x66\x62\x98\x75\xb2\x23\x54\x4f\xe6\x6c\x38\xb0\x7a\xef\x75\x36\x9f\x90\x58\x81\x19\x73\x36\xeb\x53\x72\x14\x34\x12\x51\x30\x26\xeb\x3a\x09\x47\xe3\x41\x0a\x67\xd4\x17\xc5\xa5\x14\x5d\x88\x4e\x89\xea\x67\xea\x2f\x10\xb3\x6b\xce\xaa\xa8\xd9\x8b\x8d\xc6\x30\x1c\xa8\x92\x9b\x55\xe9\x63\x66\x10\x06\x30\x73\x01\x8c\xe9\xc3\x87\x84\x07\x10\x17\x6a\x74\x44\x8a\x09\xcd\x7c\x60\xcb\x22\xdd\x8b\xd1\x74\x69\x3e\x04\x13\x62\x96\xe6\x30\x48\x78\xce\x69\xe2\x49\xa5\x4f\xed\x38\xac\x61\xab\x75\x3a\x40\xc6\x19\x76\x5a\xb0\xca\x82\xd0\x97\x52\xf5\xdb\x94\x08\xa3\x8b\x61\xd7\xa2\xa3\x03\x6a\x24\x8d\x51\x0a\xa9\xf7\x0a\x25\x3b\x8f\x90\x01\x9c\x04\xb3\xb8\x89\xcc\x3e\x2b\xc6\xcc\xa4\xc1\xa5\xe6\x9c\x44\xf3\xf8\xd8\x87\xcd\x51\x94\x0d\x2d\xbc\xf6\xde\x5c\x31\x67\xa0\x10\x57\xc3\x06\xda\x07\x8f\xca\xe9\xb3\x98\x00\x65\xd6\xb4\x36\x6b\x3b\xab\x6d\x29\x55\x16\x3d\x32\x7e\x32\xf9\x11\xf1\x9f\x9f\x5b\xf0\xd3\xee\xd8\x26\x7f\x36\x36\x77\x2f\x63\xf7\x2e\x76\xdf\xac\xc3\xec\x24\x4d\xb1\xb3\x69\x6f\xe8\x15\x69\x44\x64\x5a\xe1\x30\x4d\x61\x1e\x84\xa5\xb7\x12\xdd\x3d\x4c\x71\xa2\x02\xca\x40\x89\x6e\x36\xc4\xb9\x76\xcb\x28\x16\x6e\x53\x7b\x49\x89\xc9\xe4\x82\x9c\xd3\xdb\xa4\x10\xb5\x1e\x62\x3d\xbd\x7b\xca\xc0\x5a\x34\x07\x55\x9f\x02\x13\x66\xc6\xb1\x0e\xad\x2c\x0a\x0b\x36\xfe\xb6\x68\x3e\xf6\x60\x8e\xd1\x13\x7b\x29\x8e\x88\x43\x4c\x8d\xc5\xaa\x8e\x8a\x54\x21\xd4\x1b\x77\xd6\x96\x8c\x20\x59\xd1\x6c\xb2\xb9\x24\x0c\xcf\x24\x55\x8c\x9e\x6e\x43\x72\xf4\x0e\xd1\xdb\x34\x19\xed\xb8\xa7\x7b\x21\x56\xb0\x69\x02\x01\x20\xd8\x5b\x12\x18\xb6\xee\x9c\xdc\x45\x9c\xe4\xac\x00\x2f\x28\xba\x14\x82\x05\xbf\x03\x19\x94\x86\x60\x98\xdc\x4c\x46\xb8\xd4\x61\x85\xa7\xe1\xcc\x59\x70\x50\x33\xc3\x21\xad\xc1\x68\x02\xbd\x9b\x78\xf1\x28\x03\x02\xcc\x51\x82\x20\x9d\x20\x7b\x70\x76\x87\xe2\xc6\xe6\xc0\x2a\x65\x02\x92\x85\x88\x73\x10\x4b\x2f\x2d\x8f\xb6\xb1\x4a\x68\x93\x23\x1f\x00\x94\xd1\xf3\x53\x1b\x74\x41\xad\x0b\xe1\xd7\x6d\x78\x79\x18\x87\x8d\x7d\xf7\x2a\x28\x92\xc1\xac\x90\xa5\xcf\x31\x2b\x18\x7a\x7a\x45\x1f\xde\xb9\x95\x41\x9c\x3e\xb4\x76\x68\x54\x46\x04\x4e\xe0\x42\x2a\x13\x2b\xb5\x08\x50\xac\x8c\x34\x65\x6a\xd4\x10\xe2\x52\x42\x68\xf4\x02\xd5\x9a\x34\x19\x81\xae\x82\x9a\x5c\x47\x58\x60\x8d\x60\x96\xa0\x64\x66\x01\xae\x2a\x7a\x86\xdc\x17\x3d\xe2\x2f\x48\xf2\x6d\xc5\xc5\x45\xbb\xf1\x31\x40\x49\x53\xdd\x12\xa1\x74\x4d\x80\xd0\x29\xb5\x34\x43\xc9\xe8\x39\x5a\x71\x6e\xd2\x0a\x0c\xef\x33\x94\xa1\x9b\x54\x00\x99\x54\x26\xf0\x88\x74\x3d\xb6\x16\xd3\xc7\x6c\x1d\xb3\xd6\x51\x86\x56\xa9\x99\xda\xad\x29\x68\x78\xc3\xe4\x7a\xfc\xa8\x92\x62\x2d\xb5\xc7\x51\x31\x6a\x59\x60\x11\xfe\x5a\xf0\x1f\xa7\xfe\x2b\xc9\x27\x9b\xb7\x74\xf2\x3f\x7f\xeb\xc9\xc1\xde\x9e\x54\xe8\x50\x4f\xe2\x70\xf3\x8e\x4e\x90\x5f\x6d\x1e\xca\xe5\xff\xff\x9b\x9f\xea\xfe\x87\x67\xb7\xbb\xc7\xf4\xf3\x68\xe7\x97\xf5\xcd\xfb\xe2\x1f\xf6\x4f\xde\x5f\x5c\x3f\xfe\xe9\xe5\xd5\x6f\xd7\x37\x1b\xab\x6f\xf4\x70\x75\x71\xf5\xfc\xfc\x0f\x45\x1f\x13\xfe\x74\xb5\xbe\x9f\x21\xaf\xde\xfc\xfc\xea\xf2\xfc\xc5\x9b\xdd\xdb\x1f\xa7\xfd\xad\x7e\x78\x7d\x71\xc9\xaf\x0e\x7f\xd9\xfd\xba\x7f\xca\xff\xba\xa4\xb1\xe9\xe5\xc5\x7e\xfe\x35\x5f\x5f\xcc\x3f\x65\x7c\x79\xbc\xbf\x1f\x70\x75\x7f\x28\xe7\x1f\xb6\xb7\xf7\x37\x75\x3c\xbc\xbf\xa1\xfc\xf1\xd7\xdb\xab\xeb\x5f\x6e\x2f\xf1\xfa\x97\xdd\xdf\x9f\xc6\x5e\x5e\xdc\xe2\x6d\x7d\xf6\x9a\xde\x3f\x7c\xb6\xf8\x68\xb5\xfa\xfd\xd1\xef\x8f\xfe\x1b\x00\x00\xff\xff\x65\xd3\x4d\x3f\x36\x07\x00\x00")

func ConfigCliFleetEthStagingJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthStagingJson,
		"../config/cli/fleet-eth.staging.json",
	)
}

func ConfigCliFleetEthStagingJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthStagingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.staging.json", size: 1846, mode: os.FileMode(0644), modTime: time.Unix(1582203948, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x84, 0x88, 0xaa, 0x22, 0xdd, 0x82, 0xc4, 0x48, 0x29, 0x2c, 0x7d, 0x69, 0x98, 0x45, 0x47, 0x44, 0x8a, 0x75, 0x99, 0xac, 0x12, 0x7, 0x2d, 0x65, 0xc9, 0xc, 0xe7, 0x52, 0x4e, 0xb0, 0xbc}}
	return a, nil
}

var _ConfigCliFleetEthTestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x3b\x8b\x9c\xc7\x12\x86\xf3\xfd\x15\xc3\xc4\x87\x51\x77\x55\x75\x5d\x36\x12\xba\x9c\x93\xe8\x28\x91\x1d\x19\x07\x75\x6b\x79\x61\xd1\xc0\xee\x48\x60\x8c\xfe\xbb\x99\x95\x02\x21\xaf\xd3\xfa\x8a\xfa\x5e\x9e\xf7\xa1\xff\xba\x39\x1c\x8e\xef\xce\x1f\xdf\xf5\x97\xbe\x3f\xde\x1e\x8e\x6f\xde\xbe\xfa\xf5\x7f\xc7\xff\x5c\xc7\xef\xcf\x6f\xee\x1e\xf3\xfc\xa5\x1f\xfe\x3c\xde\x1e\xb6\xdf\x3f\xf6\xd3\xfc\xf5\xfd\xe7\xc7\x4b\x3f\xbc\x3e\x7f\xda\x77\x1f\x8f\xb7\x87\xeb\x8d\xc3\xe1\xf8\xf6\x93\xc7\x7d\xd7\xf1\xf6\x70\x79\xf8\xfc\xb4\x79\x38\x1c\xff\x7b\xdf\x7d\xb9\xde\xed\xcb\x1f\xa7\x4b\x3f\x5e\x8e\xdf\x3f\xbc\x3a\x9f\x2f\xef\xcf\xd5\x8f\xc7\xdb\xc3\x6f\x4f\xa3\xc3\xe1\xd8\x9f\xce\xd5\xb7\x2f\x5e\x94\x7b\x43\x0b\x28\x8c\x56\x6e\x23\xd8\x0e\xae\xee\x52\xdc\x66\x8b\x8a\x06\xa1\xcb\x42\x52\x2c\x8d\x42\xd4\x9e\x1c\xad\x90\xdb\x18\xd0\xa0\x56\x8e\x9e\xde\x4b\x12\x4b\x0c\x13\x0b\xab\xaa\x74\xd7\x52\x44\x03\x86\x26\x40\xaa\x34\xe6\x6d\x0b\xb3\x04\x63\xe1\xda\x6b\xfb\x4b\x92\xd3\x82\xd3\x54\x3d\x4d\xb2\x5b\x22\xfc\x1e\xfb\x87\x8c\xd6\xc3\x54\x97\xac\x0e\x91\x29\x09\xab\xda\x05\x76\xcd\x99\x12\x28\xc2\x52\x39\x2c\xa7\x0b\x2b\x6f\x49\xe8\x5c\x22\x85\x43\x0b\xe8\xba\x90\x1d\x2c\xab\x9a\x70\x0a\x09\xf9\x74\x95\xd1\x24\xaa\x20\x08\xc6\xb2\x69\xbb\xe8\x8a\x01\xe1\xb6\x8a\xd9\x02\x67\x11\x53\x75\x8e\x97\x30\xf8\x34\xd5\x4e\x40\x78\x9a\x4c\xcf\xa7\xcc\xd9\x6b\x4c\x55\x95\x54\xc6\x62\xba\xfe\x2d\xd8\x62\xf3\x94\xc5\x73\xa8\x28\x2c\xc2\xd1\x44\x63\x0a\xe2\x5e\xe1\x22\x29\xa3\x62\x12\x20\xd7\x46\x9d\xbb\x77\x8c\x8e\x9e\x9e\x04\x60\x14\xd6\xc0\x33\xa2\x01\xb1\xa2\x42\xb1\x11\x72\x29\x27\xb3\x37\x70\x6a\xb5\x8c\x0c\xca\x97\xb8\xbe\x61\x64\x3d\x4d\x94\xa7\x90\x4f\x19\x7f\xff\xee\xc1\x2f\x0f\x57\x99\xea\xff\x7e\x77\xff\xa1\x1f\xbe\xf4\xc3\xb3\x42\xf0\xb4\x8a\x58\x55\x3e\xa1\x75\xc5\x1e\x1d\xab\x82\xc6\x0e\xac\x66\x58\x3c\x6c\x10\x02\x81\xa0\xe4\x68\x93\xb5\xa5\x76\xf1\xb2\xd2\x55\xc9\x65\xae\xb4\x8d\x78\xba\x80\xe6\xf2\x60\xcd\x21\xb0\xbb\x50\xd3\xd9\x17\xda\x94\x74\xa0\xd0\x36\xcc\x04\x89\xea\x8d\x3e\x5b\xcc\xf3\x47\x21\x8c\x9f\x47\xdd\xa4\xbc\x76\x73\x82\x5f\x5b\x5f\x8c\xce\x44\x62\x36\x4a\xdb\xb2\x59\x80\x89\xbc\xb1\x87\xc2\xb5\x7d\xd4\xce\xb9\xaf\x6d\x8c\xee\xcd\x08\x23\x87\xf8\x2a\x1e\x89\xc1\x60\x7b\x15\x91\xd1\x36\x2c\x0e\x65\x17\x5a\x3e\x62\x33\x79\x80\xad\x88\xcd\x4b\x6c\x4c\xf1\x4a\xee\xd2\x9f\x84\x98\xcf\xa7\x94\x21\xbd\x84\x16\x7a\x16\x36\xa9\x26\x51\x58\x8d\x9e\x62\xb2\x50\x66\xc3\xd6\x7d\x15\x13\x56\x7b\xaf\xf0\x74\x0b\x4b\xed\xc1\xa9\x9c\xd5\x92\x62\xe4\x9c\xd0\xc8\x30\x30\xb6\xed\xc5\xe9\xad\x31\x7a\x8d\x8d\x81\x98\x94\x10\x6c\xe4\x12\xde\xed\x53\x16\x11\x53\x36\x35\x3e\x09\x61\x70\x02\xb0\xd3\x14\xf8\xa7\x10\x1f\x2e\x7e\xb9\xcb\x7f\x7d\x1a\x66\x4d\x43\xc6\xd5\x63\x2e\x9b\xba\x43\x57\x84\x6f\x11\xba\xfa\x3d\x61\xf3\x2a\x19\xc9\x26\xb2\x06\x4f\x95\xde\x83\x08\x46\x09\x75\x0e\x4e\x6b\xdd\xa3\x32\x96\xb4\x0f\x82\xad\xab\xb6\x0a\x21\x96\xc7\x14\x9f\xc0\xa3\x4b\xab\x7a\x46\x6d\x2b\xae\x55\x50\x4d\x21\xb1\xb5\xcd\xf0\x27\xca\xf8\x3c\xe5\xbd\x0c\x1d\x44\x70\x46\x8e\xad\x1d\x43\xb5\xa1\xd0\x00\x20\xa1\x96\xd5\x0e\x8b\x3d\x02\x6d\x8d\x12\x57\xd0\x5a\xb3\xd5\xc3\x7a\xe8\xde\x3b\xca\x6c\xb2\x2b\xec\x32\xc3\x9c\x3e\x74\xe4\x92\x84\x28\x19\x5d\x9c\xc8\x9b\xd4\xdc\xd8\xaa\xd9\xc4\xf7\x36\x1c\xaa\x15\xdd\xd3\xed\x1b\x65\x3a\xe1\x3c\xcd\xa1\x3f\x40\xbe\x39\x1c\xbe\xde\x7c\xbd\xf9\x3b\x00\x00\xff\xff\x92\xe7\x13\xce\xf7\x05\x00\x00")

func ConfigCliFleetEthTestJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthTestJson,
		"../config/cli/fleet-eth.test.json",
	)
}

func ConfigCliFleetEthTestJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthTestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.test.json", size: 1527, mode: os.FileMode(0644), modTime: time.Unix(1582203948, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0x84, 0xa8, 0x1a, 0x79, 0x23, 0xd0, 0x4, 0xb7, 0x98, 0xd9, 0xeb, 0x5b, 0x5, 0x23, 0x7a, 0xcb, 0xf9, 0x57, 0xf9, 0xa, 0xe3, 0x27, 0xe2, 0xaf, 0xc1, 0xdf, 0xf5, 0x58, 0xda, 0xb9, 0x64}}
	return a, nil
}

var _ConfigCliLesEnabledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\xf2\xc9\x4c\xcf\x28\x71\x2d\xc9\x70\xce\xcf\x4b\xcb\x4c\x57\xb2\x52\x80\x88\x83\xe5\x5c\xf3\x12\x93\x72\x52\x53\x94\xac\x14\x4a\x8a\x4a\x53\xc1\xe2\xb5\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xa6\x74\x24\x05\x3a\x00\x00\x00")

func ConfigCliLesEnabledJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliLesEnabledJson,
		"../config/cli/les-enabled.json",
	)
}

func ConfigCliLesEnabledJson() (*asset, error) {
	bytes, err := ConfigCliLesEnabledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/les-enabled.json", size: 58, mode: os.FileMode(0644), modTime: time.Unix(1576772083, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xee, 0x27, 0xa7, 0x74, 0xa0, 0x46, 0xa1, 0x41, 0xed, 0x4d, 0x16, 0x5b, 0xf3, 0xf0, 0x7c, 0xc8, 0x2f, 0x6f, 0x47, 0xa4, 0xbb, 0x5f, 0x43, 0x33, 0xd, 0x9, 0x9d, 0xea, 0x9e, 0x15, 0xee}}
	return a, nil
}

var _ConfigCliMailserverEnabledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x0a\xcf\xc8\x2c\x2e\x48\x2d\x72\xce\xcf\x4b\xcb\x4c\x57\xb2\x52\x80\x08\x83\xa5\x5c\xf3\x12\x93\x72\x52\x53\x94\xac\x14\x4a\x8a\x4a\x53\x75\xd0\x25\xfc\x42\x02\x82\x2b\xf3\x92\x71\x49\xfb\x26\x66\xe6\x04\xa7\x16\x95\xa5\x16\x61\xaa\x40\xc8\x05\x24\x16\x17\x97\xe7\x17\x81\x2c\x51\x2a\x2e\x49\x2c\x29\x2d\xd6\xcd\x4f\x4b\xcb\xc9\xcc\x4b\xd5\xcd\xcc\x4b\xca\xaf\x50\x02\x6b\xaa\xe5\xaa\xe5\x02\x04\x00\x00\xff\xff\x7c\x73\xee\xbb\xb0\x00\x00\x00")

func ConfigCliMailserverEnabledJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliMailserverEnabledJson,
		"../config/cli/mailserver-enabled.json",
	)
}

func ConfigCliMailserverEnabledJson() (*asset, error) {
	bytes, err := ConfigCliMailserverEnabledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/mailserver-enabled.json", size: 176, mode: os.FileMode(0644), modTime: time.Unix(1576772083, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0xec, 0x81, 0x8b, 0x99, 0xb6, 0xdb, 0xc0, 0x8b, 0x46, 0x97, 0x96, 0xc7, 0x58, 0x30, 0x33, 0xef, 0x54, 0x25, 0x87, 0x7b, 0xb9, 0x94, 0x6b, 0x18, 0xa4, 0x5b, 0x58, 0x67, 0x7c, 0x44, 0xa6}}
	return a, nil
}

var _ConfigStatusChainGenesisJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6f\x13\x31\x10\x85\xef\xf9\x15\x96\xcf\x1c\xc6\xf6\x78\x66\xbd\x37\x4a\x59\x81\xc4\x8d\x5f\x30\xb6\xc7\xcd\xaa\x9b\x6c\x94\x6c\xa4\x16\xd4\xff\x8e\x92\x2c\xa1\x42\x9c\xf0\xcd\x7e\x33\xef\x7b\x7e\x3f\x37\xc6\x58\x99\xa6\xb9\xd8\xde\x5c\x2e\xc6\x18\x9b\x07\x47\x58\x24\xa0\x0b\x9e\x04\x42\x8e\xc8\x05\xe2\x43\xc0\x90\xfd\x67\xef\x74\xf8\xa8\x1e\x73\xfa\xb3\x62\x6c\x96\x49\xf6\x45\x6d\x6f\x2c\xbc\x38\x18\xe0\xd3\x00\x84\x8f\x8f\x31\x79\xb8\x1c\x7b\x1d\x7c\xfb\xb0\x22\x3c\x44\x89\x15\x94\x7d\x6b\x14\x81\x53\x2b\x92\x33\x0a\x05\x0d\xa1\xfa\x4e\x84\xaa\x36\x5f\xfe\x03\xb1\x59\x31\xb6\xcc\xfb\x36\x3e\xdd\x1d\x6c\xd9\xca\xb8\xff\x5a\x6d\x6f\x98\xf9\x16\xc4\x6e\xe7\x9d\x9e\x16\x95\xfa\x30\xcd\xe5\xd9\xf6\x06\x56\xa1\xca\x3c\xcc\xc7\xe7\xef\xe7\xc3\x61\x3e\x2e\xb6\x37\xcb\xf1\xac\xab\x96\x5f\x7f\xc8\x7e\x19\xcf\xbb\xbf\x97\x74\x3c\xb8\x08\x5f\xe4\xb4\xbd\x85\x8c\xa0\xa4\x35\xa3\x26\xa8\x89\x1c\x49\xe9\x72\x63\xe7\x92\x6a\xe0\x82\x80\x5d\x41\x27\x15\x52\xf0\x1d\x31\xa9\xcb\x21\xd5\x42\x9d\x80\x96\x96\x43\xb5\xef\x7d\xe3\x3f\x69\xdd\xfd\xf5\xfe\xef\x3a\xb6\x36\x96\xf3\xb4\xbc\xfe\xae\xea\xda\xce\x55\xd3\x97\xe5\x28\x8f\xb2\xc8\x1a\x30\x30\x92\x63\xe4\xc8\x01\x03\x75\xe4\x28\x91\x7a\x88\xc0\x9e\x12\xd3\x45\xa3\xe8\x21\x22\x45\xbe\xcc\x26\x52\x62\x0f\xa8\x14\x19\x99\xa9\xb1\xa7\x7c\xb3\x7e\x92\xd3\xb7\x71\x37\x2e\xef\xa1\x60\x37\x6f\x9b\x5f\x01\x00\x00\xff\xff\x91\xc6\xb3\x58\x64\x02\x00\x00")

func ConfigStatusChainGenesisJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigStatusChainGenesisJson,
		"../config/status-chain-genesis.json",
	)
}

func ConfigStatusChainGenesisJson() (*asset, error) {
	bytes, err := ConfigStatusChainGenesisJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/status-chain-genesis.json", size: 612, mode: os.FileMode(0644), modTime: time.Unix(1576772083, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0xf0, 0xc, 0x1, 0x95, 0x65, 0x6, 0x55, 0x48, 0x8f, 0x83, 0xa0, 0xb4, 0x81, 0xda, 0xad, 0x30, 0x6d, 0xb2, 0x78, 0x1b, 0x26, 0x4, 0x13, 0x12, 0x9, 0x6, 0xae, 0x3a, 0x2c, 0x1, 0x71}}
	return a, nil
}

var _keysBootnodeKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x4b\x01\x80\x40\x08\x04\xd0\xbb\x69\x58\x96\x6f\x1c\x66\x94\xfe\x11\x7c\xbe\x65\xab\x03\x07\x43\x1b\x87\x5b\x17\x8e\x9e\x23\x02\x11\x1a\x57\x51\x9d\x32\xf7\x24\x99\x1b\x08\xd8\xcb\xcf\x2d\xf4\xba\x3e\x7f\x00\x00\x00\xff\xff\x4a\x3d\x56\xc6\x41\x00\x00\x00")

func keysBootnodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_keysBootnodeKey,
		"keys/bootnode.key",
	)
}

func keysBootnodeKey() (*asset, error) {
	bytes, err := keysBootnodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/bootnode.key", size: 65, mode: os.FileMode(0644), modTime: time.Unix(1576772083, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0xcf, 0x27, 0xd4, 0x96, 0x2e, 0x32, 0xcd, 0x58, 0x96, 0x2a, 0xe5, 0x8c, 0xa0, 0xf1, 0x73, 0x1f, 0xd6, 0xd6, 0x8b, 0xb, 0x73, 0xd3, 0x2c, 0x84, 0x1a, 0x56, 0xa4, 0x74, 0xb6, 0x95, 0x20}}
	return a, nil
}

var _keysFirebaseauthkey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x52\x85\x20\x18\x00\xe0\x7d\xef\xc2\xcc\x71\x4a\xc4\x76\x3f\x29\x43\x5c\x34\x2d\x4d\x59\x6a\xa5\x8d\x24\xde\x42\x7b\xfb\x3e\x00\x00\x9e\x87\xfa\xfe\xf3\xf9\x11\x5e\x20\x0e\x3a\xf6\x7b\xb8\xf2\x03\xc7\xd9\x4a\x10\xec\x46\x74\xa7\x26\x9a\xfd\x71\xec\xeb\xea\x98\x84\xb2\x9b\x6c\x92\x5b\xaa\x0d\x0e\x7c\x71\x71\xb8\xb1\xb1\xf2\x62\xcc\x61\xfb\x59\x91\xa2\x6f\x69\x6f\x29\x09\xdf\x07\x99\xb5\x09\x2a\x5f\x5b\x69\xa2\xa5\x91\x33\xa9\xa5\x67\x2d\x5d\xdd\xe1\xf0\xac\x82\xb0\xcf\xec\xd7\x72\x3d\x9c\x4f\x54\x4c\x3c\x2d\xad\x8b\xac\x32\x57\x8c\x06\xfc\x5d\x24\xd3\x7e\xf7\x1f\x00\x00\xff\xff\xd6\xa2\x00\x4a\x99\x00\x00\x00")

func keysFirebaseauthkeyBytes() ([]byte, error) {
	return bindataRead(
		_keysFirebaseauthkey,
		"keys/firebaseauthkey",
	)
}

func keysFirebaseauthkey() (*asset, error) {
	bytes, err := keysFirebaseauthkeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/firebaseauthkey", size: 153, mode: os.FileMode(0644), modTime: time.Unix(1574347314, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0x69, 0x23, 0x64, 0x7d, 0xf9, 0x14, 0x37, 0x6f, 0x2b, 0x1, 0xf0, 0xb0, 0xa4, 0xb2, 0xd0, 0x18, 0xcd, 0xf9, 0xeb, 0x57, 0xa3, 0xfd, 0x79, 0x25, 0xa7, 0x9c, 0x3, 0xce, 0x26, 0xec, 0xe1}}
	return a, nil
}

var _keysTestAccount1StatusChainPk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xdd\x8a\xe4\x40\x08\x05\xe0\x77\xf1\x3a\x01\xb5\x4c\x55\x99\xb7\x51\xcb\x62\x9b\xf9\x6b\x92\x66\xd8\x65\xe8\x77\x5f\x32\xcb\x32\x97\x82\x7e\x1c\xcf\x17\x7c\xe6\x71\xde\x3e\xde\x61\x2f\x0b\xdc\x06\xec\xd0\x29\xb2\x25\xe9\xca\xd4\x71\x15\xe4\xbe\xba\x2a\xae\x68\x52\x94\x7c\x56\x33\x84\x05\x6c\x8c\x23\xcf\x13\x76\xf0\x49\x55\xc2\x8a\x50\xe1\x6a\x58\x7c\x93\x16\xb8\x79\x91\xe2\x9c\x4c\x39\x2d\x59\x5c\x61\x81\x38\xfe\xdc\x1f\x1f\xb0\x7f\x41\xdc\xee\xbf\xf2\x78\xe4\xef\x07\xec\xb0\x35\x17\xb1\x6e\xd4\x67\x6f\x8a\xea\xce\xd1\x4c\x95\x98\x5c\x54\x8b\xa9\xb7\x31\x2c\x89\x46\xe9\x53\x23\x31\x91\x42\x9a\x8c\x51\x6d\x9b\xf5\x92\xbf\xbd\xbb\x1d\xf6\x76\x5e\xfe\xed\x13\x76\x30\xc3\xad\x17\xec\x93\x38\x2a\x73\xca\xa8\x38\x34\xb0\x59\x6a\x2f\x2d\xe1\xf9\xff\xf0\x5a\xce\x73\x25\xee\x6b\x3c\x0e\x58\xe0\x65\x4c\xd8\xe1\xfc\x0e\xfc\x6f\xfc\xb1\xc7\xcb\x6b\x5e\x85\xf1\x02\xa7\xbd\x5e\x0f\xb8\x57\xc1\x62\x9e\x8d\xb3\xb6\x9a\xcc\x64\x82\xc6\x81\x6d\x93\xd9\xe8\x4a\xae\x54\x44\xab\x78\x20\x99\x85\x52\x99\x21\x65\x23\x1a\x19\x05\x16\x78\x87\xbd\x93\xf2\x02\x07\xec\x7d\x81\x3b\xec\xf4\x5c\xe0\xcd\x02\x76\x68\x9d\xb1\x0d\xa4\x40\x2f\x51\x49\xad\x4f\x51\x47\xd6\xda\xbd\x56\xaf\xc5\xc2\x37\x66\xec\x41\x45\xc8\xb4\x8c\xd0\x4a\x6d\xe0\x4c\x95\x9e\x09\xcf\xe7\xdf\x00\x00\x00\xff\xff\xd2\xdb\x1b\x65\xe9\x01\x00\x00")

func keysTestAccount1StatusChainPkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount1StatusChainPk,
		"keys/test-account1-status-chain.pk",
	)
}

func keysTestAccount1StatusChainPk() (*asset, error) {
	bytes, err := keysTestAccount1StatusChainPkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account1-status-chain.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1576772083, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xba, 0x35, 0x1, 0x2b, 0x9d, 0xad, 0xf0, 0x2d, 0x3c, 0x4d, 0x6, 0xb5, 0x22, 0x2, 0x47, 0xd4, 0x1c, 0xf4, 0x31, 0x2f, 0xb, 0x5b, 0x27, 0x5d, 0x43, 0x97, 0x58, 0x2d, 0xf0, 0xe1, 0xbe}}
	return a, nil
}

var _keysTestAccount1Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4b\x8e\x24\x3b\x08\x45\xf7\xc2\x38\x42\xb2\x31\xd8\xd8\xf3\x57\xfb\xc0\x80\xf5\x52\xf5\x4b\x45\xa4\x4a\xdd\x2a\xd5\xde\x5b\x91\x83\xee\x19\x20\x74\xee\x3d\xdf\xa0\xee\x47\x9c\x27\x0c\x78\x29\xfc\x5f\x2a\xc8\xae\x2e\x2d\xb0\xd6\x6c\x14\x2f\x9d\xb3\xb3\x34\x6c\x51\x9d\xa5\x38\x1b\x6c\x60\xc7\xef\xfb\xe3\x13\xc6\x37\xd8\xed\xfe\x7f\x1c\x30\x40\xe3\xdc\x33\xca\x6e\x8f\xe3\x7a\x78\x9e\x1f\xf1\xeb\x01\x03\x48\x02\x7d\x89\xb7\xb4\x64\xae\x42\xea\x1a\x9c\x66\x9a\x29\x4a\x96\xa4\xa5\x63\xd0\x9c\xb9\x89\x66\xa5\x82\xe4\x66\x92\x08\x5b\x4c\x6a\x95\xd6\x5f\xde\x5d\x0f\x7d\x3f\xaf\xd8\xdb\xd7\xc5\x2d\xc4\xa6\xb4\xb0\xd8\xcc\x19\xbb\xf6\x9e\x5b\x0e\xe9\x5a\x3b\xb2\x24\xf8\xd9\xe0\xd5\x17\x0c\x38\x9f\x85\xe1\xb9\xfe\x83\xf8\xeb\x5b\x7c\xc0\x28\xb8\xc1\x07\x0c\xac\x98\x89\x36\xb8\xc3\xc8\x1b\x1c\x30\x64\x83\x53\xdf\x2e\x81\xdc\x99\xb1\xc9\x9c\x46\xab\x68\x22\xb1\xa4\xe2\xad\x79\x70\xca\x54\x8b\xa1\x08\xf6\x59\x9e\xb3\x06\xad\x1e\xc8\x68\x58\xda\xc2\xa9\xd6\xae\x22\xef\x6a\x30\xa0\xa3\x97\x60\xd2\xde\x22\xbc\x74\xcf\x8b\x6a\xc3\xb6\x12\x13\x55\x26\x4c\xcb\x78\x95\x6c\x6d\x51\xb4\x14\x42\x55\xa7\x75\x76\x5b\x2e\x53\xf0\x49\xba\x39\x0c\x98\x35\x11\x59\x95\xbd\x74\xa3\x9d\xaa\xfb\x2e\x39\xe3\x8e\x16\x8c\xd9\x19\x6d\x31\x6c\xf0\x15\xc7\x79\xfb\xbc\x24\x7f\xfe\x04\x00\x00\xff\xff\x0d\x85\xaf\xaf\xeb\x01\x00\x00")

func keysTestAccount1PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount1Pk,
		"keys/test-account1.pk",
	)
}

func keysTestAccount1Pk() (*asset, error) {
	bytes, err := keysTestAccount1PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account1.pk", size: 491, mode: os.FileMode(0644), modTime: time.Unix(1576772083, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x43, 0xc2, 0xf4, 0x8c, 0xc6, 0x64, 0x25, 0x8c, 0x7, 0x8c, 0xa8, 0x89, 0x2b, 0x7b, 0x9b, 0x4f, 0x81, 0xcb, 0xce, 0x3d, 0xef, 0x82, 0x9c, 0x27, 0x27, 0xa9, 0xc5, 0x46, 0x70, 0x30, 0x38}}
	return a, nil
}

var _keysTestAccount2StatusChainPk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xdb\x8a\x1c\x41\x08\x80\xe1\x77\xf1\xba\x1b\x2c\xb5\x8e\x6f\x63\xa9\x45\x86\x3d\x0d\xdd\xc3\x92\xb0\xcc\xbb\x87\xde\x10\xf6\xd2\x8b\xff\x43\xfd\x82\xcf\x38\xce\xdb\xc7\x3b\x0c\xde\xe0\xe6\x30\x60\x9a\x69\xa3\x4c\xfb\x4a\x9a\x76\x59\xa1\xbb\xd6\x25\x3b\x17\x12\x49\x94\x8c\xd0\x60\x03\x75\x3f\xe2\x3c\x61\x00\x61\xd6\xec\x18\x95\xd6\x2a\x19\x6b\x5f\xa6\x73\x8a\x16\x0e\x66\xa7\xa6\x5a\x3c\x16\x5d\x91\x1d\x7f\xee\x8f\x0f\x18\x5f\x60\xb7\xfb\xaf\x38\x1e\xf1\xfb\x01\x03\xa4\xf6\x5c\x3d\x2c\xa8\xba\x4a\x11\x66\x77\xf4\x9c\x27\x77\x5f\x69\x61\xd7\xe0\x1e\x5c\x98\xe6\x42\xed\xc6\xce\x4b\x71\x52\x42\xd1\xa6\x34\x2f\xf9\xdb\xbb\xeb\xa1\x6f\xe7\xe5\xdf\x3e\x61\x80\x75\xae\x91\x7b\x23\x69\xa4\x8e\x3d\x73\x2f\x09\xb5\xf6\x98\xdd\x4a\x15\x78\xfe\x0f\x61\x80\xc6\xb9\x27\x6a\xbb\x3d\x0e\xd8\xe0\xc5\x17\x0c\x38\xbf\x17\xfe\x37\xfe\xd8\xfe\xf2\x1a\xd7\xc3\x68\x83\x53\x5f\xaf\x03\xd8\xb4\x18\xb7\x94\x5b\xc9\x92\x75\x22\x1b\x49\x14\x94\x42\x86\xc9\xc9\x5b\x53\xa9\xc2\x5c\xb4\x7a\x12\xd4\xa6\x4b\x94\x32\x16\x66\xce\x15\x61\x83\x77\x18\x2d\x75\xda\xe0\x80\xd1\x36\xb8\xc3\x48\xcf\x0d\xde\xd4\x60\x00\x56\x47\x67\x6a\xd6\xb1\x36\x2b\xd1\x66\x89\x55\x72\xe5\x54\xa8\xab\x72\x4c\x6a\xd1\x91\x49\x1a\x2f\xa1\x99\x45\xcd\x94\x85\x5c\x22\xb1\x34\x78\x3e\xff\x06\x00\x00\xff\xff\x4e\x39\x80\x7d\xe9\x01\x00\x00")

func keysTestAccount2StatusChainPkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount2StatusChainPk,
		"keys/test-account2-status-chain.pk",
	)
}

func keysTestAccount2StatusChainPk() (*asset, error) {
	bytes, err := keysTestAccount2StatusChainPkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account2-status-chain.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1576772083, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xf8, 0x5c, 0xe9, 0x92, 0x96, 0x2d, 0x88, 0x2b, 0x8e, 0x42, 0x3f, 0xa4, 0x93, 0x6c, 0xad, 0xe9, 0xc0, 0x1b, 0x8a, 0x8, 0x8c, 0x5e, 0x7a, 0x84, 0xa2, 0xf, 0x9f, 0x77, 0x58, 0x2c, 0x2c}}
	return a, nil
}

var _keysTestAccount2Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4d\x8a\x1c\x3d\x0c\x40\xef\xa2\x75\x15\xd8\xb2\x6c\x4b\xde\x7d\x7c\xe4\x20\xb2\x24\x93\x66\xfe\x9a\xaa\x66\x48\x18\xe6\xee\xa1\x7a\x91\x2c\x25\xc4\xd3\x7b\x5f\xa0\xee\x47\x9c\x27\x0c\xf8\x2f\x69\x16\xc4\x8c\x8d\x5d\x8a\x58\x51\xe9\x38\x57\xa5\x96\xfd\xff\x9c\x56\x17\x4e\x3f\x38\x13\x6c\x60\xc7\xef\xfb\xe3\x03\xc6\x17\xd8\xed\xfe\x33\x0e\x18\xa0\x71\xee\x19\x79\xb7\xc7\x71\x1d\x3c\xd7\x8f\xf8\xf5\x80\x01\xac\x2b\xc9\x5c\x9a\x50\x69\xf5\xa8\x2b\x17\x2d\xcc\x33\x8a\x64\xb7\x95\xc4\x6a\x36\xa6\x65\x2c\xc8\x84\x19\x31\x45\xea\xd6\x72\x4b\x84\x75\xf1\x5f\xde\x5d\x0f\x7d\x3b\xaf\xb7\xb7\x4f\x18\xd0\x75\x56\xd1\xa0\x2e\xb9\xf6\x1e\x1d\x3d\x9a\xd7\xe9\xac\x14\x48\xa1\xf0\xbd\xc1\x8b\x2f\x18\x70\x3e\x85\xe1\x39\xfe\x83\xf8\xcb\x6b\xbc\xc3\x28\xb8\xc1\x3b\x0c\x6c\x98\x89\x36\xb8\xc3\xc8\x1b\x1c\x30\x78\x83\x53\x5f\xaf\x00\xec\xd1\x6c\x72\xe4\x10\x4f\xd6\xdb\x9a\x73\x39\x91\x99\x22\xd5\xd2\x92\x2f\xa1\x24\xd3\x4c\xd4\x68\x51\x10\xdb\xa5\x35\xeb\x72\x9e\x49\xfa\x25\xf2\xa6\x76\x29\x2f\xf7\x59\x44\x3a\x7a\xcf\xb8\x26\x8a\x52\x59\x39\x72\xd4\x92\x4a\xe4\xc2\x1e\x26\x66\xa8\x2b\x66\xc2\xda\x82\xb5\xa7\x8a\xae\x54\xa4\x5b\xbb\x48\x37\x87\x01\x93\x51\xba\x4a\xde\x25\x05\xed\x24\x5e\x77\x6d\x4b\x76\xb6\x92\x2a\xf5\xc9\xd1\x14\x36\xf8\x8c\xe3\xbc\x7d\x5c\x91\xdf\x7f\x02\x00\x00\xff\xff\x80\x42\xa2\x5c\xeb\x01\x00\x00")

func keysTestAccount2PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount2Pk,
		"keys/test-account2.pk",
	)
}

func keysTestAccount2Pk() (*asset, error) {
	bytes, err := keysTestAccount2PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account2.pk", size: 491, mode: os.FileMode(0644), modTime: time.Unix(1576772083, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x72, 0xd5, 0x95, 0x5c, 0x5a, 0x99, 0x9d, 0x2f, 0x21, 0x83, 0xd7, 0x10, 0x17, 0x4a, 0x3d, 0x65, 0xc9, 0x26, 0x1a, 0x2c, 0x9d, 0x65, 0x63, 0xd2, 0xa0, 0xfc, 0x7c, 0x0, 0x87, 0x38, 0x9f}}
	return a, nil
}

var _keysTestAccount3BeforeEip55Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xdb\x8a\x1c\x31\x0c\x44\xff\x45\xcf\xdd\x20\x4b\xbe\xc8\xfe\x1b\x59\x96\xc8\xb0\xb7\xa1\x7b\x58\x12\x96\xf9\xf7\xd0\x59\xc2\x3e\xd6\x43\x1d\x4e\xd5\x17\x7c\xfa\x71\xde\x3e\xde\x61\xf0\x06\xb7\x05\x03\xd0\x96\xb9\x85\xed\x46\x61\x7b\x26\x4d\xbb\xf8\x2a\x7b\x26\x33\xec\xd4\x16\x2f\x81\x0d\x74\xad\xc3\xcf\x13\x06\xb0\x2e\xce\x5e\xbb\xac\x2c\x58\x35\x16\xca\xe4\xd2\x67\x27\x8c\x62\x75\x56\x9a\x55\xdc\x33\x6c\x60\xc7\x9f\xfb\xe3\x03\xc6\x17\xd8\xed\xfe\xcb\x8f\x87\xff\x7e\xc0\x00\xa2\xd2\xbb\x98\x77\x56\x2d\x93\x5a\x6a\xa5\x60\xc9\x9c\xd2\x52\x31\x6b\x53\xa8\x24\x6a\x2b\x23\x5a\xa7\x16\xca\xc2\x0d\x3d\x27\xa6\x4e\x66\x97\xce\x37\xef\xae\x87\xbe\x9d\x17\xff\xf6\x09\x03\xa4\x27\x6a\xd9\x49\x5b\xa3\xb6\x34\xd9\xd2\xb4\xc8\x6c\x12\xfb\x94\x89\xf0\xfc\x5f\x84\x01\xea\xe7\x9e\x48\x76\x7b\x1c\xb0\xc1\xcb\x0a\x18\x70\xfe\x13\xfe\x8e\x3f\xec\xf5\xf2\xea\xd7\x61\xb4\xc1\xa9\xaf\xd7\x80\x45\x93\x50\xb5\xd5\x2c\x11\xd8\xc9\x98\x51\x1a\x51\xc6\xf0\x5c\x83\xc2\xd8\x53\x66\xa6\xc9\x42\x9a\x05\x25\x6a\xc1\xc9\x56\xa5\x4b\x2d\x13\x36\x78\x87\x21\xa9\xd3\x06\x07\x0c\xd9\xe0\x0e\x23\x3d\x37\x78\x53\xbb\xd4\x10\x33\x63\x13\x89\xd5\x66\xa0\x93\xbb\xd7\x48\x5c\x4a\xcb\xa5\x27\x8e\xe2\x14\x25\x65\xaa\x1a\x9d\x58\x8a\x22\xba\x9b\xa6\x28\xd6\x98\x12\x3c\x9f\x7f\x03\x00\x00\xff\xff\x4c\x6d\xd5\xbe\xe9\x01\x00\x00")

func keysTestAccount3BeforeEip55PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount3BeforeEip55Pk,
		"keys/test-account3-before-eip55.pk",
	)
}

func keysTestAccount3BeforeEip55Pk() (*asset, error) {
	bytes, err := keysTestAccount3BeforeEip55PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account3-before-eip55.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1576772083, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x40, 0x56, 0xc1, 0x5e, 0x10, 0x6e, 0x28, 0x15, 0x3, 0x4e, 0xc4, 0xc4, 0x71, 0x4d, 0x16, 0x99, 0xcc, 0x1b, 0x63, 0xee, 0x10, 0x20, 0xe4, 0x59, 0x52, 0x3f, 0xc0, 0xad, 0x15, 0x13, 0x72}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../config/README.md": ConfigReadmeMd,

	"../config/cli/fleet-eth.prod.json": ConfigCliFleetEthProdJson,

	"../config/cli/fleet-eth.staging.json": ConfigCliFleetEthStagingJson,

	"../config/cli/fleet-eth.test.json": ConfigCliFleetEthTestJson,

	"../config/cli/les-enabled.json": ConfigCliLesEnabledJson,

	"../config/cli/mailserver-enabled.json": ConfigCliMailserverEnabledJson,

	"../config/status-chain-genesis.json": ConfigStatusChainGenesisJson,

	"keys/bootnode.key": keysBootnodeKey,

	"keys/firebaseauthkey": keysFirebaseauthkey,

	"keys/test-account1-status-chain.pk": keysTestAccount1StatusChainPk,

	"keys/test-account1.pk": keysTestAccount1Pk,

	"keys/test-account2-status-chain.pk": keysTestAccount2StatusChainPk,

	"keys/test-account2.pk": keysTestAccount2Pk,

	"keys/test-account3-before-eip55.pk": keysTestAccount3BeforeEip55Pk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"README.md": &bintree{ConfigReadmeMd, map[string]*bintree{}},
			"cli": &bintree{nil, map[string]*bintree{
				"fleet-eth.prod.json":     &bintree{ConfigCliFleetEthProdJson, map[string]*bintree{}},
				"fleet-eth.staging.json":  &bintree{ConfigCliFleetEthStagingJson, map[string]*bintree{}},
				"fleet-eth.test.json":     &bintree{ConfigCliFleetEthTestJson, map[string]*bintree{}},
				"les-enabled.json":        &bintree{ConfigCliLesEnabledJson, map[string]*bintree{}},
				"mailserver-enabled.json": &bintree{ConfigCliMailserverEnabledJson, map[string]*bintree{}},
			}},
			"status-chain-genesis.json": &bintree{ConfigStatusChainGenesisJson, map[string]*bintree{}},
		}},
	}},
	"keys": &bintree{nil, map[string]*bintree{
		"bootnode.key":                  &bintree{keysBootnodeKey, map[string]*bintree{}},
		"firebaseauthkey":               &bintree{keysFirebaseauthkey, map[string]*bintree{}},
		"test-account1-status-chain.pk": &bintree{keysTestAccount1StatusChainPk, map[string]*bintree{}},
		"test-account1.pk":              &bintree{keysTestAccount1Pk, map[string]*bintree{}},
		"test-account2-status-chain.pk": &bintree{keysTestAccount2StatusChainPk, map[string]*bintree{}},
		"test-account2.pk":              &bintree{keysTestAccount2Pk, map[string]*bintree{}},
		"test-account3-before-eip55.pk": &bintree{keysTestAccount3BeforeEip55Pk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
