// Code generated by go-bindata.
// sources:
// ../config/cli/fleet-eth.beta.json
// ../config/cli/fleet-eth.staging.json
// ../config/cli/fleet-eth.test.json
// ../config/cli/les-enabled.json
// ../config/status-chain-genesis.json
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ConfigCliFleetEthBetaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x96\x4d\x73\x55\xc7\xd1\xc7\xf7\xfe\x14\x2a\xad\x9f\xba\x9a\x7e\x9f\xd1\x8a\xc7\x6f\x21\x76\x42\x61\x63\x08\x24\x95\x45\x4f\x77\x8f\x50\xc0\xba\x44\xba\x52\x02\x29\x7f\xf7\xd4\x11\xd8\x01\xca\x88\xc5\xad\x3a\x35\xdd\xf7\xf4\xef\xfc\xeb\xdf\xdd\xf3\x9f\x2f\x8e\x8e\x8e\x8e\x8e\x1f\xd4\xe1\x5f\xfb\xcb\x17\x7f\xcc\xe3\xd3\x23\xfa\xbf\xb7\x67\x5f\xfb\xc1\xbf\x3e\xbf\x3c\x3e\x3d\x3a\xde\x9d\xec\xea\xf0\xbc\x2e\xeb\xfa\xe7\x43\x5d\x1d\x4e\x7e\xdc\xbf\xba\x3a\xd4\xc5\xf1\xbb\xcc\xef\xeb\xf5\xa3\xc3\xfe\xb2\xee\xce\x3e\x79\x51\xaf\xaf\xb6\xb4\x5f\xff\xf6\x60\xff\xf5\xf9\x55\xec\x6f\xea\xf2\xf5\xf1\xe9\xd1\xe1\xf2\xba\xde\x05\x7e\xac\x8b\xac\x37\x37\xfb\xeb\xab\x0f\xcf\xbf\x7a\x79\x7d\x75\xa8\xcb\xaf\xf6\x17\xeb\xfc\xec\xf8\xf4\xe8\x2d\xfc\x6d\xe8\x9b\x0b\x9f\x2f\x2b\x3f\xc8\xbf\x0d\x7c\xfb\xb2\xea\xb0\x51\xd5\xe1\xf9\x6e\xd6\xc1\x8f\xdf\x0b\x7e\xb9\xdf\x1f\x1e\xec\xb3\xb6\x3a\x7f\xfb\xed\xf8\x36\x54\x17\xfb\xac\xd3\x93\x13\x26\x8d\xd0\xa5\xc6\x03\xfb\xca\x18\x3e\x96\x8d\xd1\x16\x0e\xe6\xd6\x70\x6a\x97\x84\x20\x5b\x0d\x25\x60\x16\xa3\x40\x97\x29\x13\x56\x1b\xad\xad\xf2\x05\x11\x81\xae\x40\x0d\xb5\xaf\x31\xda\x96\xe6\x96\x28\xb8\xc8\xa8\x61\x74\x22\x71\x0c\x70\x45\x23\xad\x81\x84\x3a\x20\x82\xfc\x1e\x18\xef\x80\xfa\x0e\x9a\xec\x90\xe9\x94\x1a\x37\x7e\xef\x23\x3e\xa0\x15\x1a\xe2\x3e\xad\x13\x2d\xa8\x98\x6a\x30\x65\xcc\xd5\x04\x21\x16\x36\x44\x5e\xd5\x41\x71\x05\x25\xaa\x49\x16\x57\x71\x8a\x92\xba\x49\x05\x61\x02\x6d\x94\x01\x9d\x73\xf5\x84\xcc\xe5\xbd\xd1\x60\x1a\x4d\x7b\xc7\x74\x45\xe7\x5c\x8c\xc9\x2b\x62\x69\x82\xf5\xd6\x41\xd4\xbb\xdd\xc3\xa6\x3b\xe8\x63\x23\xdd\x89\xdd\x0d\x6b\x8c\x96\xab\xa8\xcf\xe4\x58\x16\xd2\xe7\x1c\xca\xdb\xeb\x74\xf9\x44\xb1\x8e\x15\x54\xda\x58\xbd\x37\x21\xb2\xd6\x10\x63\xba\x63\x07\x21\xad\x9e\xca\x15\x09\xb3\x61\xc1\xea\xcb\xd0\xb4\x17\x0e\xc9\xa6\x28\x7d\x3a\x53\xf6\x4e\x8d\x73\x36\xed\xa5\x0b\x19\xcc\xab\xcf\x98\xc3\xf5\x1e\x34\xde\x81\xf0\xae\xf7\x1d\xe0\x67\x94\xad\x59\xcb\x27\x8d\xa9\x63\xce\x59\xca\xd9\x23\xbb\xce\x32\x95\x49\xb3\x48\x34\x7b\xf0\x44\x56\x6d\x4b\x25\x79\x10\x30\x79\x0b\xe6\x45\x3d\xba\x38\x8a\x51\x6b\x60\x7d\x59\x67\x91\x81\x0e\xb3\x11\x61\x07\x10\xc6\x1a\x2e\x1d\x3b\x44\x27\x99\x3e\x33\x4d\x6e\x1f\xa6\x72\xad\x80\x7b\x24\x3b\x6c\xb8\x1b\x63\x87\xc8\xef\x58\x7f\x43\xfd\xfb\x7b\xa6\xfe\xe9\x72\xeb\x92\xfc\xb3\x9f\xbf\x7c\x54\x97\x37\x75\x79\x87\xbb\x83\x71\x91\x76\x47\x5a\x3e\x7a\x95\xb0\xae\x44\x36\xc4\x66\x32\x9a\x22\x21\x21\x8f\x5a\x2a\x96\xa8\x49\x62\x6e\x66\xcc\xe4\x15\x9b\xac\x30\x71\x38\x39\x62\x2d\x2a\x0b\xe1\x5e\xd0\x79\x50\xa6\x2f\x01\x27\x98\xcd\x2b\xb5\xd9\x98\xa9\x35\x4b\xbc\x3a\xf5\x15\xcb\x17\x39\x8f\x0f\xfc\x02\x8a\xa7\xd4\xe4\x0e\xc3\xb8\x2b\xf7\xd4\xea\x22\x43\xda\xc4\xa2\xa4\xb9\x10\x5b\xf0\xd0\x6a\xe1\xc5\x9e\x2b\x73\x83\x81\xd2\xa6\x58\x3a\xc1\xcc\x2b\x06\xcd\xd0\xc8\x58\x80\x1d\x63\x72\x4b\x50\xd1\x41\x58\x73\x65\x8a\x8a\xe1\x48\x67\x6e\xa4\x3d\x2d\x38\xdd\x72\x26\x67\x6b\x3c\xc1\xa3\xe1\x5c\xfd\x23\xda\x71\x37\x6d\x77\xe5\x49\x41\x3c\x1c\xab\xd5\x62\x27\x2c\xe7\xa1\x6d\xd4\xa6\x05\x91\xf2\x2c\x00\x68\x28\x14\xd8\x3c\x03\xcc\x29\x6a\xce\xa0\xe1\x08\xa3\x24\xa9\x80\x26\x08\x44\xab\x2a\xc9\x5e\x6d\x0d\xef\xd3\x31\xb2\xa1\x36\xe0\x52\x9b\x0c\xce\x3e\x2d\x21\x25\x53\x2d\x1c\xb7\xd6\xfa\x88\xb6\x7f\x46\xdb\xac\x31\x8a\x63\xc2\x24\x41\x9a\x89\x1a\x8e\x80\xa4\x43\xb8\xe9\xe6\x6a\x0b\x43\xf0\xe4\x45\x25\xd1\x11\x2a\x07\x70\x07\x69\x51\x1a\x85\x65\xa8\x04\x86\xb4\x35\x29\xb4\xe5\x01\x2b\x05\xb7\xf1\x31\x67\x2e\x12\x91\x6a\x42\x36\x7c\xd9\x10\x90\x02\xb0\x91\x4e\x16\x41\x39\x37\x7f\xc3\xd6\x88\x63\x87\xd0\xee\x66\x6d\x20\x85\xb8\x34\x12\x27\x73\x74\x17\x98\x69\x8e\xb7\x25\xd0\xa0\x36\xf3\x86\xa5\x2d\x41\x26\x34\x18\xaa\xe2\xc6\x43\x75\x61\x3a\x8b\x26\xf6\x02\xe1\xea\xa4\xb3\x4a\xdb\xc0\xc9\xa9\x5d\x57\xa9\x15\x11\xa8\x88\x74\x0d\xb1\x69\xd0\x67\xd1\x18\x16\xa0\x38\x12\x19\xd4\x6e\x7b\x11\x75\x87\xb0\x83\xcf\x98\x40\x08\x0a\x05\x2b\x86\xea\xb4\xea\xb4\x44\xa8\x07\x8c\xb9\x20\xb2\x8c\x3a\x44\xd8\xe0\xd1\x50\x5d\x8b\xc7\x98\x5a\x63\xf4\xd2\x21\x26\xe0\x9e\x0b\x35\x39\x46\x4f\x71\x2e\x9f\x6b\x5a\xd4\x4a\x82\xa0\xe8\x3d\xb5\x35\x37\x93\x05\x5c\x29\xd6\x41\xb0\x79\xef\x15\x89\x92\x4e\xa1\x6f\x51\xb7\x9f\xed\xec\x57\xd6\xdf\x1d\x1b\x8f\x0e\x7e\x38\x8f\xcf\x6c\x43\x57\x47\x1f\x93\xdc\x62\xce\xe6\x20\xe9\xc6\xd4\x40\xc8\x6a\x4e\x17\x1e\x31\x46\x2b\x22\x14\x2f\xeb\x05\x68\xe8\xb0\x4d\x88\x28\x90\x96\x8d\xb6\xbd\x32\xbb\x47\xd7\x88\x6d\x49\x2d\x5c\x4a\x3a\xa0\x58\x6d\x9b\x99\xad\xaf\x86\xa9\x40\x68\x66\xc2\xc1\x19\x91\x6a\x46\x73\x48\x7d\xd4\x81\xa6\xa7\xd4\xe8\xd3\xe2\x63\xb3\x12\xca\x31\x97\x6e\x83\x9a\x19\x8a\xd2\xa7\x93\x2e\xa1\xb9\x66\x7a\x9b\xda\xc6\xc8\xe9\xc3\xbb\x8a\xaf\x50\xd4\xe6\x98\x28\xb4\x66\x77\x51\x37\x74\xee\x32\xba\xf3\xb2\xe9\x68\x60\x03\x03\x8b\xbd\x17\x38\x93\x7b\x2d\x5b\xc4\x5d\x36\xb3\xb5\xe8\xd1\xb1\x2d\xa5\x5b\x5f\xbe\x15\x7f\xdb\x31\x3b\x95\x77\xa8\xbf\xab\xfd\xff\x2e\x3c\x9f\xd0\xff\xe4\xfc\x15\x9f\x7c\x74\x13\x38\x39\xc4\xab\x13\x6a\xd6\xe8\xa4\x0e\xcf\x6f\xf8\x04\xf4\xf1\xf9\x35\xde\xff\xff\x9f\x7f\xbc\xff\xf0\xcd\xb7\x74\xf9\xc3\x99\xc8\xc3\xb3\x67\x0f\xe3\x87\x17\xaf\x6f\x1e\x3e\xb9\x3f\x2e\xf0\xf9\x5f\xae\x9e\x3d\x7c\xfe\xf8\xbb\x2f\xff\xaa\x2f\x9e\xfc\xe3\xbb\xb3\x7c\xf2\xb1\x76\xb7\x95\x3e\xdc\xe2\x9f\x2e\xf4\xa7\x7f\xfe\xf4\xf4\xfa\x19\x3f\x9a\xfa\x07\xec\xf7\x1f\xec\xf7\xfe\xed\xe3\xa7\x8f\xbf\x7f\xf3\xea\xcd\xf7\x4f\xbf\x8a\xb3\xd7\xdf\xfd\xfb\xcc\xbf\xf9\x06\xcf\xe5\xe6\x62\xbd\xf7\xe5\xb7\x4f\xbf\x7c\xf1\xcb\x17\xff\x0d\x00\x00\xff\xff\xe2\xef\x72\xab\x7e\x0a\x00\x00")

func ConfigCliFleetEthBetaJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthBetaJson,
		"../config/cli/fleet-eth.beta.json",
	)
}

func ConfigCliFleetEthBetaJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthBetaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.beta.json", size: 2686, mode: os.FileMode(420), modTime: time.Unix(1536838782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ConfigCliFleetEthStagingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\x4f\x6f\x1b\x47\x0f\xc6\xef\xf9\x14\x82\xce\x2f\x56\xe4\x70\xfe\x70\x74\xf2\x6b\x3b\x6d\xda\xc0\x06\xe2\x34\x6d\xd3\xa2\x07\xce\x90\x4c\x54\x3b\x92\x22\xad\xdd\xda\x45\xbe\x7b\xb1\x8e\x9b\xda\x41\x9c\xde\x06\x7c\x38\xcb\x1f\x1f\xce\xf2\xaf\x27\xb3\xd9\x6c\x36\x3f\xb5\xf1\x8f\xcd\xee\xfc\x3b\x9d\x2f\x67\xf4\xbf\x8f\xb1\x63\x19\xe5\x78\xb5\x9b\x2f\x67\xf3\x61\x31\xd8\xf8\xd6\x76\x76\xf9\x6e\xb4\xfd\xb8\x38\xdb\x6c\xf7\xa3\xad\xe7\x77\x99\xcf\xed\xfa\xe5\xb8\xd9\xd9\xd7\xb3\x17\xe7\x76\xbd\x9f\xd2\xfe\xb9\x76\xba\x39\x5e\xed\xfb\xe6\xca\x76\xd7\xf3\xe5\x6c\xdc\x5d\xda\x9d\x70\x66\x6b\xb5\x9b\xab\xcd\xe5\xfe\x61\xfc\xe8\xe2\x72\x3f\xda\xee\x68\xb3\xf6\xd5\x9b\xf9\x72\xf6\x11\xfe\x56\x7a\xba\x96\x76\x61\xfa\x20\xff\x56\xf8\xe6\xc2\x6c\x9c\xa8\x6c\x7c\x3b\xec\x47\x79\xb3\x5a\xbf\x99\xdf\xd3\x0f\x37\x9b\xf1\x74\xa3\x36\x95\xfa\xf5\x53\xf8\x56\xb2\xf5\x46\x6d\xb9\x58\x20\x48\xe1\x8e\xa5\x86\x2a\x05\xb0\x9a\x47\x91\x10\x62\xd5\x42\x10\xbc\x64\x31\x16\xc8\x1e\xa1\x05\xed\xcc\xad\x34\x42\x6b\xee\x51\x72\x20\x6f\x2d\xc6\x36\x1d\x8b\xf4\x26\xa1\xe6\x8e\xdd\x94\x4a\x49\x5a\xd1\x9b\x21\xc7\x4c\x1d\x13\xd4\x22\x59\x28\xbb\xb6\xd0\x19\xa2\x3b\x79\x4f\x8d\xd2\x01\xa5\x21\x10\x0f\xb5\x0c\x81\xe2\x92\x20\x42\xbc\xd7\xc2\x03\x56\x2f\xd5\x1b\x55\xac\x5e\x42\x97\x94\x41\x14\x22\x45\xed\x9d\xb8\x48\x73\x8b\x68\x90\x73\x0e\x80\xd6\x54\x54\xd8\xd4\x20\xe6\x10\x53\x14\x24\xb5\x06\xa9\xab\x60\xf2\xc0\x45\x43\x8f\x4d\x39\xa9\x30\x3a\x58\x0b\x49\x41\x22\xe7\xd6\x5a\x67\xf5\x18\x4a\xab\x05\xa5\x27\x4c\x44\x4d\x01\xdc\x0e\xb0\xc4\x01\x89\x07\x84\x89\xb6\xde\xd1\x7e\x82\xfd\xed\x9e\xf5\x3f\xec\xa6\x71\xea\x89\xac\x2e\x5e\xda\xee\xca\x76\x5f\x99\x41\x9e\x1a\x6a\x22\xc5\xb1\x84\xa0\x88\x28\xdc\x6b\xcf\xdc\xa9\x0a\x61\x24\xb0\xaa\x29\x97\x5c\x93\x67\x04\x76\xc2\xde\x5b\xee\xca\x0e\xa2\xee\xb1\x56\xb4\xe2\xda\x85\x5d\x4a\x01\x2b\xa9\x75\x96\x34\x7d\xa7\x68\x88\xb9\x42\x6f\x9d\xc1\x00\x18\x4b\xf2\x08\x1d\x53\xd1\xec\xb9\x30\x6b\xe4\x83\x00\x79\x40\xae\x43\x88\x30\x60\x5e\x12\xa4\xc7\x87\x60\xd1\x3b\x42\x47\xcf\xa9\xb3\x98\x32\x49\x0f\xb9\x75\x6c\xde\x02\x4a\x4c\xbd\xa3\x70\x4a\x20\x89\xa1\x94\xce\x1a\xd4\x82\x80\x41\x57\x64\x8b\xe0\x1a\xc1\x8b\x65\x2f\x0a\x41\x7b\xee\x0a\xb9\x72\x68\x80\xb1\x1b\xb3\x66\x8b\x99\x4b\x48\xee\x16\x3a\x12\x5b\x4d\x3c\x71\x02\x40\x90\xe2\x1f\x1f\x4c\x1d\xb0\xd2\x10\xf1\x8e\xf5\x8b\x23\x78\x39\xca\xb8\xea\xff\xf1\xfe\x2b\xc6\x0e\x8d\xc0\x43\x69\xd2\x08\x3a\xaa\x2b\xa1\x8a\x96\x9c\x82\xc4\xec\x2a\x95\x0a\xa4\x18\xc4\x0c\x1b\xe4\x10\x2b\x37\xa4\x98\xcc\xa0\x22\x65\x8c\x8d\x5b\x35\x32\x8e\x39\x04\xe3\x28\x25\x00\xf5\xc4\x89\xc5\x50\x2b\x63\xf5\x4c\x62\xdd\x90\xcc\x72\x66\x8b\x9e\x73\x66\xc8\x54\xb9\x1e\x60\x2e\x43\x9d\xda\x19\x30\xf2\x92\x80\x20\x3d\x66\x7d\x50\xae\xa5\xe7\xa9\x50\x8d\xd5\xab\x76\x47\x08\xa5\x3a\x80\xd5\xc6\x14\x52\x47\x76\x2b\x2e\x29\x68\x4e\x9c\x02\x88\x96\x66\x35\x43\xe9\x4c\x00\xdc\x62\x68\x90\xc5\x5c\x6b\xe9\x6e\xe8\x2a\x2d\x15\x74\x22\x09\x52\x89\xc9\xbd\x96\x9e\x2a\x54\xd3\x84\x9e\x69\xba\x44\xb1\x22\x05\x2a\x36\x59\x8f\x35\x0c\x30\x70\xbe\x23\xfd\xa2\xf1\xff\xae\xb8\x47\xcc\x5f\xac\xb6\x71\xf1\xd9\xcf\xb4\x18\xfb\x76\x41\x50\x80\x16\x36\xbe\xbd\x8a\x0b\xcc\xaf\x56\x97\xe1\xd9\xff\xcf\xaf\xbf\x7f\x66\x36\xbe\x88\xc7\xa7\x5b\x8d\xa7\xbf\x84\xf5\x78\xf3\xe7\xc9\x26\xa4\x9b\xae\xdb\xab\x6f\x5f\x9c\xbd\x3f\x3f\x4e\xdb\xc3\x7a\xf8\x34\x9f\xbd\xfa\xdc\xba\xdb\x4a\x0f\x56\xcc\xa3\x75\xde\xe1\xfe\xc7\xeb\x9f\xdf\x9d\x9f\x9c\xfe\xae\x76\xfc\xd3\xfb\xe7\xe1\x72\xd7\xae\x8f\x68\x73\xf8\x6c\xc5\x27\xc7\xdb\x23\x7d\x7d\xbe\xde\xe3\xfa\xb5\xf8\xfb\x9b\x7b\x8d\xdf\x9e\x3e\x3c\xf9\xf0\xe4\xef\x00\x00\x00\xff\xff\x7d\x3c\xe1\x6a\x6f\x06\x00\x00")

func ConfigCliFleetEthStagingJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthStagingJson,
		"../config/cli/fleet-eth.staging.json",
	)
}

func ConfigCliFleetEthStagingJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthStagingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.staging.json", size: 1647, mode: os.FileMode(420), modTime: time.Unix(1536838782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ConfigCliFleetEthTestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6e\x1c\xc6\x0d\xc6\xef\x7e\x0a\x41\xe7\x62\x3d\xc3\xff\xd4\xc9\x88\x9d\x16\x45\x53\x1f\xea\xf6\x54\xf4\x40\x0e\x39\xb1\x10\x55\x0b\xac\x56\x2e\xdc\x22\xef\x5e\xac\x2c\xa7\x4e\xd0\x38\xb7\xc1\x7c\x9c\xe1\xc7\x99\x1f\xf9\x9f\x17\x57\x57\x57\x57\xd7\x6f\xfb\xfc\xaf\xe3\xe9\x87\x3f\xd6\xf5\xcd\x95\xaa\xfe\xee\xd3\xee\x9b\x38\xc7\x9b\xdb\xd3\xf5\xcd\xd5\xf5\xe1\xe5\xa1\xcf\xef\xfb\xd4\x8f\xff\x3c\xf7\xc3\xf9\xe5\xbb\x73\x9c\x1f\x1f\x5e\xbf\x8f\xdb\xfb\xeb\xe7\xe8\x3f\xf5\xc7\x77\xe7\xe3\xa9\x7f\xfb\xc4\xcb\x1f\xfa\xe3\xc3\x25\xf4\xf3\xd1\xb7\xc7\x37\xb7\x0f\xeb\xf8\xa1\x4f\x1f\xaf\x6f\xae\xce\xa7\xc7\x7e\x16\xfe\xd2\xf7\xd5\xff\xfe\x70\x7c\x7c\xb8\xbe\xb9\xda\x71\xf7\xf0\x59\xf8\xee\xf8\xfd\x77\xfd\xa1\xef\x2e\x99\xde\x7c\xfb\xcd\xdf\xfe\xf0\xf9\xaa\xd7\x77\x8f\x0f\xe7\x3e\xbd\x3e\xde\xef\xdb\xef\xaf\x6f\xae\x3e\x15\xf8\x24\x7d\x7b\x1f\x79\xd7\xf5\xb3\x0c\x4f\xc2\xef\xef\xba\xcf\x97\x9b\xfa\xfc\xfe\x70\x31\x7b\xfd\x85\xf8\xcd\xf1\x78\x7e\x7b\xac\xbe\x38\xf8\xfb\x4f\xdb\x4f\x52\xdf\x1f\xab\x6f\x5e\xbe\xac\x88\x86\x56\x30\x18\x6d\xd2\x4e\xb0\x03\xc2\x22\xb4\xa4\xdd\x99\x8a\x06\x61\x28\x23\x19\x96\x65\x21\x5a\x4f\xc9\x36\x58\xdb\x05\xd0\xa1\x78\x8d\x9e\xd1\xac\x0b\x4b\x1d\x17\x16\x56\x55\xd9\x2e\x36\x44\x07\x81\x26\x40\xaa\xe5\x22\xdb\x19\x57\x29\x26\x23\x6f\xde\xf1\x8a\xf4\xc0\x70\x98\x66\x87\x49\x7e\x83\x83\x06\x7d\x51\xc2\xcf\xbc\x7a\x0f\x37\x63\xe5\x4e\xd5\xa9\x0b\xb8\x3a\x14\x76\xcd\xb9\x34\x51\x55\xb4\xd6\xf0\x35\x43\xc5\x64\xeb\x82\x5e\xac\x5a\x38\xac\x80\x2e\x01\xab\x53\x94\xab\x09\xa7\x92\x52\xcc\x30\x1d\x4d\x6a\x06\x8a\xe0\xa2\x9b\x76\xa8\x71\x0e\xc8\x70\x2e\x11\x4f\x9c\x45\x42\xd5\x6b\xbc\x82\x21\x87\x69\x7e\x00\xc2\xc3\x14\xfa\xba\xdb\x35\x9b\xc7\x34\x33\x5d\x26\x58\x42\x97\xac\x29\x9e\x5b\xa6\xb2\xcc\x61\x6a\xc0\x84\xa3\x89\xc6\x54\xc4\xcd\x19\xaa\x4b\x47\xe5\x24\x40\xa9\x8d\x36\x77\xef\x1c\x9d\x3d\x63\x11\x80\x53\x7a\x83\xcc\xcc\x06\xc4\xca\x4a\xc3\x46\x58\x6c\xb2\x44\xa2\x41\x96\x55\xeb\x58\x49\xeb\x15\xf2\xa7\x67\x15\x3b\x4c\xd4\x67\xb3\x3f\x79\xfd\xc7\x17\x9c\xfc\xf5\x74\x01\xaf\xfe\x1c\xb7\x77\xef\xfa\xf4\xa1\x4f\x5f\x01\xc6\x99\xd6\x10\x19\x18\xd2\xca\x9c\x7b\xb7\xbb\x83\x4c\xde\xa4\xcc\x46\x96\x15\x1e\x51\x15\x4a\xe5\x30\x22\x70\xd6\x2c\x6b\xda\x32\x00\x6a\x31\x4b\xad\x10\x15\xdb\x16\x63\x3b\xb1\x6f\xd6\x54\x70\x1e\x5e\x89\xcb\x12\x33\x6d\xc4\xda\x59\x16\x30\x01\x87\xe9\x96\x95\xa5\x59\x5f\x02\xe3\x72\x83\x83\x7f\xfd\x0b\x9a\x4c\x78\xb7\x2c\x88\x0b\x15\x2c\x18\x42\xa4\xee\xa3\xac\x7d\xb5\x28\x08\x51\x34\xf6\x30\xb8\xd0\x81\xd6\x6b\xee\xcb\x2f\x8d\xee\x2d\x08\x63\x0d\x0d\x2e\x19\x0b\x53\xc0\x37\x17\x91\xd3\x76\x2c\x49\x93\x50\xe2\x18\xb9\x85\x22\xc1\x39\x73\x0b\xab\x8f\xa9\x51\x4b\xba\xec\x17\xc0\xcc\xaf\xbb\xd5\xa1\xcd\x4a\x8c\xb1\x0a\x9b\xcc\x16\x51\x7a\x8d\x9e\xea\xca\xa8\xb3\x61\xdb\xbe\x00\x0c\xdc\xd1\x9c\xb1\xc2\xd3\x97\xf5\x90\x65\xb2\xaa\x75\xa9\x53\xc8\x82\x46\x81\x81\xb9\x7d\xb3\xac\x68\xcb\xd1\x3c\x36\x26\xe2\xa2\x05\x29\x4e\xa1\x19\xdd\x31\x95\x89\x84\x56\x53\xe3\x13\x30\x0e\x07\x00\x3f\x4c\x85\x67\xb3\xff\x17\x98\xcb\x40\xbc\x5d\xbf\x31\x5a\xa2\xd0\xb6\xd3\xc0\x11\x46\xb2\x96\x8e\xc1\xa9\x31\x37\xa6\xe4\x98\xb9\xa9\x37\x7b\x21\xb5\x15\x96\x6c\xaa\x09\xb5\x01\x6b\x52\x86\x09\x8b\x0e\x08\x42\x2e\xa4\xb5\xa9\x36\x26\x4d\x58\x63\x4d\x07\xac\xcd\x51\x6b\xb5\x91\x4c\x84\x19\xa3\x6c\xef\x74\x42\x4e\x90\x66\x85\x05\x9f\x47\x0b\xf0\xa5\xac\x4b\xb3\xe2\xe0\x5f\x7b\xfb\x59\xd3\x51\x90\x7b\x4c\xf6\x69\x3b\x8d\x33\x63\xab\xd2\xa5\x77\x27\x6c\xe1\xd2\xb1\xc4\x55\x79\xc8\x34\xed\x3d\x88\x60\x94\x52\xaf\x21\xcb\xdb\xf6\xa8\x95\xac\x1d\x83\x60\x1b\xd7\x36\x25\xc4\x8a\x9c\x1a\x13\x64\x74\x59\x55\xcf\xac\xed\x25\xc5\x05\xd5\x94\x9a\xdb\xda\x1d\x7f\x41\x0a\x7e\xdd\xed\x66\xc7\x00\x55\x9c\xb9\xc6\xb6\xce\x61\xd6\x50\xe8\x00\xb0\xa0\xd8\x6b\xa7\xe7\x1e\x89\xce\xa3\x34\x0c\xac\x78\xb6\x45\x7a\x0f\xdb\x7b\x67\xb9\x4f\x09\x83\x5d\xee\xb8\x66\x0c\x1b\x8b\x75\x41\x96\x8e\x2e\x59\x28\x9b\xcc\xc3\xc5\xab\xc5\x35\xf6\x76\x1c\x66\x95\xdd\x33\xfc\x13\x29\x74\xc0\x79\x98\xc3\x9e\xbd\xfe\x0f\x94\xa7\xd5\x8f\x2f\x7e\x7c\xf1\xdf\x00\x00\x00\xff\xff\x71\x71\x1d\xe1\xa2\x07\x00\x00")

func ConfigCliFleetEthTestJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthTestJson,
		"../config/cli/fleet-eth.test.json",
	)
}

func ConfigCliFleetEthTestJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthTestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.test.json", size: 1954, mode: os.FileMode(420), modTime: time.Unix(1536838782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ConfigCliLesEnabledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\xf2\xc9\x4c\xcf\x28\x71\x2d\xc9\x70\xce\xcf\x4b\xcb\x4c\x57\xb2\x52\x80\x88\x83\xe5\x5c\xf3\x12\x93\x72\x52\x53\x94\xac\x14\x4a\x8a\x4a\x53\xc1\xe2\xb5\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xa6\x74\x24\x05\x3a\x00\x00\x00")

func ConfigCliLesEnabledJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliLesEnabledJson,
		"../config/cli/les-enabled.json",
	)
}

func ConfigCliLesEnabledJson() (*asset, error) {
	bytes, err := ConfigCliLesEnabledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/les-enabled.json", size: 58, mode: os.FileMode(420), modTime: time.Unix(1536838782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ConfigStatusChainGenesisJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6f\x13\x31\x10\x85\xef\xf9\x15\x96\xcf\x1c\xc6\xf6\x78\x66\xbd\x37\x4a\x59\x81\xc4\x8d\x5f\x30\xb6\xc7\xcd\xaa\x9b\x6c\x94\x6c\xa4\x16\xd4\xff\x8e\x92\x2c\xa1\x42\x9c\xf0\xcd\x7e\x33\xef\x7b\x7e\x3f\x37\xc6\x58\x99\xa6\xb9\xd8\xde\x5c\x2e\xc6\x18\x9b\x07\x47\x58\x24\xa0\x0b\x9e\x04\x42\x8e\xc8\x05\xe2\x43\xc0\x90\xfd\x67\xef\x74\xf8\xa8\x1e\x73\xfa\xb3\x62\x6c\x96\x49\xf6\x45\x6d\x6f\x2c\xbc\x38\x18\xe0\xd3\x00\x84\x8f\x8f\x31\x79\xb8\x1c\x7b\x1d\x7c\xfb\xb0\x22\x3c\x44\x89\x15\x94\x7d\x6b\x14\x81\x53\x2b\x92\x33\x0a\x05\x0d\xa1\xfa\x4e\x84\xaa\x36\x5f\xfe\x03\xb1\x59\x31\xb6\xcc\xfb\x36\x3e\xdd\x1d\x6c\xd9\xca\xb8\xff\x5a\x6d\x6f\x98\xf9\x16\xc4\x6e\xe7\x9d\x9e\x16\x95\xfa\x30\xcd\xe5\xd9\xf6\x06\x56\xa1\xca\x3c\xcc\xc7\xe7\xef\xe7\xc3\x61\x3e\x2e\xb6\x37\xcb\xf1\xac\xab\x96\x5f\x7f\xc8\x7e\x19\xcf\xbb\xbf\x97\x74\x3c\xb8\x08\x5f\xe4\xb4\xbd\x85\x8c\xa0\xa4\x35\xa3\x26\xa8\x89\x1c\x49\xe9\x72\x63\xe7\x92\x6a\xe0\x82\x80\x5d\x41\x27\x15\x52\xf0\x1d\x31\xa9\xcb\x21\xd5\x42\x9d\x80\x96\x96\x43\xb5\xef\x7d\xe3\x3f\x69\xdd\xfd\xf5\xfe\xef\x3a\xb6\x36\x96\xf3\xb4\xbc\xfe\xae\xea\xda\xce\x55\xd3\x97\xe5\x28\x8f\xb2\xc8\x1a\x30\x30\x92\x63\xe4\xc8\x01\x03\x75\xe4\x28\x91\x7a\x88\xc0\x9e\x12\xd3\x45\xa3\xe8\x21\x22\x45\xbe\xcc\x26\x52\x62\x0f\xa8\x14\x19\x99\xa9\xb1\xa7\x7c\xb3\x7e\x92\xd3\xb7\x71\x37\x2e\xef\xa1\x60\x37\x6f\x9b\x5f\x01\x00\x00\xff\xff\x91\xc6\xb3\x58\x64\x02\x00\x00")

func ConfigStatusChainGenesisJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigStatusChainGenesisJson,
		"../config/status-chain-genesis.json",
	)
}

func ConfigStatusChainGenesisJson() (*asset, error) {
	bytes, err := ConfigStatusChainGenesisJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/status-chain-genesis.json", size: 612, mode: os.FileMode(420), modTime: time.Unix(1531118119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../config/cli/fleet-eth.beta.json": ConfigCliFleetEthBetaJson,
	"../config/cli/fleet-eth.staging.json": ConfigCliFleetEthStagingJson,
	"../config/cli/fleet-eth.test.json": ConfigCliFleetEthTestJson,
	"../config/cli/les-enabled.json": ConfigCliLesEnabledJson,
	"../config/status-chain-genesis.json": ConfigStatusChainGenesisJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"cli": &bintree{nil, map[string]*bintree{
				"fleet-eth.beta.json": &bintree{ConfigCliFleetEthBetaJson, map[string]*bintree{}},
				"fleet-eth.staging.json": &bintree{ConfigCliFleetEthStagingJson, map[string]*bintree{}},
				"fleet-eth.test.json": &bintree{ConfigCliFleetEthTestJson, map[string]*bintree{}},
				"les-enabled.json": &bintree{ConfigCliLesEnabledJson, map[string]*bintree{}},
			}},
			"status-chain-genesis.json": &bintree{ConfigStatusChainGenesisJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

