// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../config/README.md (3.153kB)
// ../config/cli/fleet-eth.prod.json (4.925kB)
// ../config/cli/fleet-eth.staging.json (2.307kB)
// ../config/cli/fleet-eth.test.json (2.315kB)
// ../config/cli/les-enabled.json (58B)
// ../config/cli/mailserver-enabled.json (176B)
// ../config/status-chain-genesis.json (612B)
// keys/bootnode.key (65B)
// keys/firebaseauthkey (153B)
// keys/test-account1-status-chain.pk (489B)
// keys/test-account1.pk (491B)
// keys/test-account2-status-chain.pk (489B)
// keys/test-account2.pk (491B)
// keys/test-account3-before-eip55.pk (489B)

package static

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ConfigReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x51\x6f\xdb\x38\x12\x7e\xd7\xaf\x18\xa8\x0f\xd7\x00\xa9\xe4\xc4\x76\x92\xf5\xcb\x35\x4d\xd2\x6d\xee\xda\x34\x70\xd2\xeb\x43\x51\x44\xb4\x38\x92\xb8\xa1\x38\x5a\x92\xb2\xeb\x3d\xf4\xbf\x1f\x86\x92\x6c\x27\xce\x15\x58\x24\xb0\x2d\x72\xe6\xe3\xcc\xf7\x8d\x66\xf8\x0a\xae\x8d\xb7\x24\xdb\xdc\x2b\x32\x51\x74\x5f\x29\x07\x92\xf2\xb6\x46\xe3\x41\xa2\xcb\xad\x5a\xa0\x03\x5f\x21\x88\xa5\x50\x5a\x2c\x34\x02\x35\x6c\xed\x40\x99\xb0\xf1\xaf\xbb\xcf\x37\x90\x93\x29\x54\x09\x05\x59\xc8\x9c\x17\xbe\x75\x6f\x4a\xca\x12\x86\x44\x70\xde\xb6\xb9\x6f\x2d\x02\x15\x7b\x2e\x7c\x22\x16\xca\xa0\x1c\x00\xbf\x65\x8d\xb0\xa2\x76\x69\x67\x91\x94\x94\x7d\x7f\x9d\x3e\x5f\x3b\x80\x42\x69\x3c\x84\x55\xa5\xf2\x0a\x84\x76\xc4\x88\x5e\x28\xc3\x80\x5e\x28\x8d\x12\x72\xaa\x39\x15\x07\x64\xa0\x46\x61\x94\x29\x39\x06\x14\x79\xd5\xa7\x91\x00\x47\x98\xdd\x90\xc4\x8b\x00\x9d\xf5\xe1\xf6\x51\x75\xc9\x97\x68\xd0\x0a\xdd\xc7\xdc\x5a\xc1\xae\xf0\x88\x6b\x07\xc2\x07\x8b\x87\x07\x4b\xe4\x1f\x1e\x9e\xa4\xc8\x11\x26\x51\x74\xdd\x2d\x75\x7c\xf6\xe4\x51\x01\xc2\xac\x37\x5c\x0a\x8b\xe0\x89\x60\x29\xca\x16\xa1\x40\xd4\x50\x58\xe4\x35\xf8\x46\x0d\x1a\x10\x06\x94\x73\x2d\x7e\x7f\x5d\x79\xdf\xb8\x59\x9a\x96\xca\x57\xed\x22\xc9\xa9\x4e\x7b\xc6\xd5\xe6\x57\x49\x69\xb0\x76\xa9\xc1\xd5\x41\x12\x45\x57\x3f\x44\xdd\x68\xdc\xe8\xa4\x34\x3a\xc8\x85\x81\x05\xc2\x52\xe1\x6a\x97\xfd\xce\x26\xcd\xb5\x62\xde\xb7\x4f\x07\x50\x90\x96\x68\x93\x28\x7a\x05\xd7\x75\x43\xd6\x0b\xe3\xe1\x0e\x43\xf5\xb8\x4e\xeb\x67\xd2\x3a\x64\xdd\x7c\x80\xf7\x04\x0e\x97\x81\x47\xd7\xfb\x74\xec\xd7\xe4\x3c\xa8\x0d\x20\x31\xeb\x4c\x88\x56\x8e\x3d\x17\xa8\x69\xc5\x87\xbe\x7a\xa2\x53\x77\x1e\xb3\xfe\x42\x59\xf5\x12\x25\x51\x74\x6e\x00\xfb\xe4\xa9\x78\x7e\x94\x43\xef\x95\x29\x1d\xac\xa8\xd5\x1c\x63\xae\x5b\x89\xb3\x28\xcb\xb2\x3f\x1c\x99\xe8\xbf\x11\x00\x40\x7c\x83\x7e\x45\xf6\xf1\xfa\x32\x9e\xc1\xd1\x61\xb7\x76\x29\xbc\xb8\x54\x36\x9e\x41\x9c\xfa\xba\xd9\x32\xff\x46\x0a\x2f\xe2\xde\x8a\xe3\xfd\x37\xae\xd9\xea\xe8\x78\xfc\xe7\x0a\x9f\x7d\x0e\x76\x73\x34\x12\xff\x5a\x52\xeb\xe2\x19\x78\xdb\xe2\xc6\xff\x52\xb9\x9c\x96\x68\x19\xa3\x10\xda\x0d\x3b\x1f\x99\x1c\x73\x2e\x65\x08\x61\x94\x84\xbf\xd9\x78\x34\x1e\x6d\x40\xcf\xe5\x12\xad\x57\x0e\x07\xab\xa3\xe3\x64\x3c\x49\xa6\x27\xc9\xe9\xd9\xf6\xe0\x92\x81\xec\x3d\x35\x2a\xe7\xc3\xbf\xc5\xab\x4a\xb9\x06\x6d\x2d\x94\x8e\xbf\x47\x3f\x99\x8c\x50\xc3\x6b\x6a\xff\x21\x61\xc5\xbc\x79\x02\x34\xa1\x19\x04\xce\xe7\xb7\x17\xc0\x94\xf6\x26\x06\x51\xee\x71\xf8\xe1\xfe\xfe\xf6\x2a\xf8\xc8\xa7\x29\xf2\xc6\x07\x72\x7e\x27\x8d\x78\x67\xeb\x96\x2c\x6f\x9d\x4d\x27\xd3\x21\xad\xdb\xeb\x4f\x24\x5b\x8d\x1c\x6e\x8c\xbe\x3a\x34\xe8\x0f\x57\xb8\x18\x1f\x0a\x59\x2b\x13\x6f\x62\x36\x40\x56\xa2\xe5\x70\x85\xfc\xa3\x75\x1e\x34\x95\x25\x37\x81\x8d\xf0\xbf\x88\xf8\x23\x95\xef\x95\xc6\xa0\xf0\x52\xd8\x54\x53\xb9\x55\x39\xd1\x54\x0e\x61\x7e\xa4\xf2\x23\x2e\x51\xb3\xe5\xf5\xcd\xfb\xcf\x3b\xeb\x9f\xc4\x8f\x3b\xf5\x17\x63\x1c\x8f\x46\x4f\x96\xdf\x89\xfc\xb1\x6d\x38\x85\xe9\x76\xfd\x82\xea\xc6\xa2\x73\x73\xf2\xfc\xd2\xf4\x44\xf5\xf9\xfc\x47\x68\x25\x21\x1b\x4e\xcb\xb6\x49\x08\x8b\x33\xc8\xae\xe6\xf3\xcf\xf3\xec\x10\xb2\xaf\xe7\xf3\x1b\xfe\xe6\x58\xf8\xfb\xf2\xea\xdd\x97\xdf\xf9\xc7\xfd\xfc\xfc\xe2\x2a\xeb\xde\xa4\xaf\xe2\xb1\x1d\x3a\xde\x20\x6f\x27\xee\x9a\x5a\x0b\x86\x64\xe8\x3e\x16\xb5\x58\x03\x1b\xbf\xae\x49\xaa\x42\xa1\x84\xaf\x5d\x81\x1c\x40\x63\xc9\x53\x4e\x1a\x6a\x74\x4e\x94\xd8\xd1\xa9\xf5\xa6\x48\xfa\x17\x0a\x7c\xa5\xdc\x1e\xbf\xdb\x08\xe2\x19\x74\x6b\x61\xfd\xa5\x2a\xd9\xd9\xf8\x24\x94\xbe\x43\xbb\x44\xbb\x6f\xf1\xeb\x97\x32\x5d\x89\xc7\x36\xde\x31\xdf\x42\xdd\x0a\xe7\x56\x64\xf9\xd0\xb8\x77\xa2\xa2\xd0\xca\xe0\x1b\x65\x16\xf4\x23\x0e\x4e\x3f\x7b\x25\xc2\xc8\xd8\x77\xce\xb8\xe3\xb5\x0e\x65\x98\x83\x6e\x5d\xd7\xe8\xad\xca\x01\x4d\x6e\xd7\xa1\xd1\x73\x0b\xaa\x94\xf3\x64\xd7\x60\xf1\xcf\x16\x9d\x77\x49\x14\xbd\x5b\xf3\xb4\x11\xad\xf6\xa0\x3c\xac\x94\xd6\x0c\x03\x99\x66\x9d\xe5\x22\x03\xac\x17\x28\x25\x4a\xe0\x34\x16\xc2\x61\x02\xf7\x14\x6c\x1a\x72\xbe\xb4\xc8\xd3\xd8\x79\x14\x32\xc8\xc8\xe5\xcc\xf4\x47\x42\xca\xc0\x3d\x3f\x04\x59\xbb\xee\x38\x8b\x9e\x6b\x71\xd9\xe3\xee\xe9\x11\xdf\xfe\xfe\xb7\x34\xfa\x32\xbf\x66\x0e\x87\xb0\x66\x69\xda\x3a\xb4\xb3\xa6\xa7\xe8\x6d\x45\xce\xcf\xb8\x57\xfc\xb3\x1f\x7d\x71\xef\xfb\xf3\x09\xc3\xd1\xc3\xc3\xcd\xe7\xfb\xab\xd9\xc3\x43\x98\x10\x03\x3b\x03\x4c\xc7\xf2\x62\x0d\x77\x41\x2b\x38\x6f\x1a\x10\x46\xc2\x37\xce\x91\x1b\x97\x0b\xc2\xb8\xed\xb4\x2c\x34\xa2\x77\x49\xa7\x6d\xa2\xea\xf4\x80\xc5\xca\x5e\xd2\x3a\xeb\x67\xcd\x85\x6e\xb9\x33\xee\x8c\x1b\xe5\x86\xd1\x56\x0b\x13\xea\x7d\x55\x09\x0f\x0d\xa2\x75\xe1\xfc\x05\x91\x77\xde\x8a\x26\xbc\x3f\xae\xe3\x7c\xe7\x42\x14\x54\x12\x26\x0f\x83\xd8\x60\xee\x19\x01\x0d\xab\xee\xbc\xb0\x5c\x0c\xbb\xc2\xc4\x4f\x42\xd8\x28\xf0\x22\xfb\xf1\x7b\xce\xb0\xef\x88\x49\x63\x49\x0e\x6d\xe8\x1d\x91\xe7\x39\x14\xba\xfb\x20\x2b\x72\x80\xb3\x34\x1d\x4f\xa6\x68\x7d\xf7\xf9\xf6\x78\x9c\x4c\xa6\xc9\xc9\x69\x72\xf6\xdb\x6c\x3c\x9a\x8c\x26\x9d\x38\xdf\x7b\xa0\x7b\xcb\xd1\xc8\x6d\xe1\xbf\x88\xb8\x3b\xde\xde\xfe\x76\x96\x9c\x9e\x24\xd3\x49\x32\x3e\x9e\x8d\x47\xd3\xe7\x88\x2c\x9f\xca\xff\x6f\x70\xbb\xc3\xf2\xed\xce\xf0\x0a\x63\x6e\xfa\x14\x6a\x3b\x41\xf7\xe0\x52\xd5\x4c\xd2\xb3\xd3\xe4\x64\x9a\x4c\xc6\xc9\xf1\x51\xea\xf3\x26\x1d\x8f\x4e\x47\xe3\x14\x7d\xb5\x9c\xa4\x47\x27\x5f\x54\x7b\xfc\xe1\xbc\x1e\x1f\x1d\xbf\xf8\xdf\x1f\x15\x6d\x0b\x34\xdb\xb0\x9a\x41\x85\xba\x09\x17\x90\x17\x95\x2e\x94\x91\x5d\x89\x84\xdb\xce\x3a\x5c\x6d\x6a\xb2\xb8\x73\x0f\xf1\x04\x95\x58\x72\x9f\x14\x06\xb2\x1d\x56\x32\xe0\x1b\xf5\x3e\xf1\xd9\xe6\xe2\x6b\x11\xc2\x64\x73\xc1\x49\x68\xbd\x06\x11\x5a\x45\x57\x95\x64\xba\xca\x4a\xa2\x28\x7b\x46\x51\x16\x9c\x85\x01\xa1\x3d\x5a\x23\xbc\x5a\xe2\xb6\xa5\x73\x0b\x93\xc4\xb3\x92\x33\x73\xa2\xc6\x80\x08\x72\xb8\x8f\x80\x70\xb0\xcb\x82\xa4\x24\xfa\x5f\x00\x00\x00\xff\xff\x3b\x43\x02\x2d\x51\x0c\x00\x00")

func ConfigReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_ConfigReadmeMd,
		"../config/README.md",
	)
}

func ConfigReadmeMd() (*asset, error) {
	bytes, err := ConfigReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/README.md", size: 3153, mode: os.FileMode(0644), modTime: time.Unix(1609934130, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0xf1, 0x44, 0x5b, 0x33, 0xe5, 0xfa, 0xe6, 0x38, 0x77, 0x19, 0x91, 0x6e, 0xd8, 0x8e, 0x8d, 0xaa, 0x32, 0xb2, 0x8b, 0xf9, 0x4f, 0x3, 0xe, 0xc0, 0xca, 0x5e, 0x5d, 0xec, 0x37, 0x1d, 0xc3}}
	return a, nil
}

var _ConfigCliFleetEthProdJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\x4f\x6f\x95\xc7\x92\xc6\xf7\xf9\x14\x96\xd7\xa3\x43\xfd\xe9\xaa\xee\x66\xc5\x10\x4c\x2c\x12\x90\x21\xc1\xc0\x1d\xcd\xa2\xba\xfe\x80\xef\xe5\xda\x80\x0f\x4e\x60\x94\xef\x3e\x7a\x09\x57\x31\x09\x5e\xb3\xb2\xd4\x3e\x7a\xeb\x79\x9f\x7a\xea\xd7\xa7\xce\xff\x7d\x77\x70\x70\xf8\x24\xcf\x23\x3f\x5e\x5d\xbc\xbf\x3c\xbc\x7d\xb0\x7f\xf7\x3e\xff\x6b\x3b\x7d\x74\x71\xef\xec\xd2\x2f\xae\xf2\xdd\x87\xc3\xdb\x07\x65\xaf\x2f\xff\x38\xff\xfe\xf5\xfb\xcb\x7d\xbe\xfb\xfe\xe2\xbc\xce\x5e\x1e\xde\x3e\xd8\x1e\x71\x70\x70\x78\x74\x6e\xeb\x75\xc6\xb5\x27\x1c\x1c\x1c\xde\x7f\x9d\xb9\x3f\xbc\x7d\x70\x98\xfb\x57\xbb\x37\xef\x2e\xe2\xf0\xf3\x3f\xee\x5e\x5c\xec\x1f\x5d\x44\x6e\x15\xff\xe7\xd3\xd1\xc1\xc1\x61\x9e\x5f\x44\xde\xbe\x75\x4b\x53\x45\x5a\x2d\x06\x6e\x8b\x10\x79\x8e\xf2\x80\x02\x18\xe4\x6b\xe9\x0a\x64\xc5\x99\x68\x3d\xbb\x2e\x53\x4d\x1c\x30\xcd\x0c\x5c\x0a\xcd\x85\x7d\x5a\xf6\xe9\x45\x15\xcd\xfa\x32\x5f\x08\x81\x04\x08\x63\xce\xc5\x1d\xbc\x4b\x65\xe0\x5c\x73\x62\x4c\x07\x8f\x00\x1a\x13\x6d\x59\xdc\x69\x7d\xd7\x65\x37\xe7\x0e\x75\xde\x6e\x8d\x3f\xab\xbe\x26\xb1\xb1\xba\x6b\x69\x6f\x93\x46\x85\x4f\x9b\xd5\xe7\x84\xa2\xd9\x1a\x00\x2d\x1d\x12\xe8\xdc\x0b\x48\x1c\x57\x36\x12\x1c\xb2\x64\x61\xc1\x04\xa8\xb4\x42\x77\x27\x53\x64\x20\x1d\x35\x27\x6c\x1f\xb3\x1e\x24\x54\xdc\x19\xc8\x07\xb3\x18\x39\x9a\x52\x67\xcd\x49\x4c\x3a\xd1\x9d\xed\x0e\xf6\xb1\x43\x1a\x3b\xe4\x4f\x7f\xbf\xae\x92\xa9\x4a\x63\x8c\xae\xb0\x60\xb6\x6e\x1c\x99\xd2\x3c\xab\x5a\x8c\xe8\x05\xab\x39\x10\xbb\x86\x05\x37\xd1\xa1\x28\xe5\x96\x63\x26\xa9\x3b\x75\xe1\xa2\x51\x48\x6d\x88\x35\x44\xf5\xd9\xfb\xca\xc9\xdd\x3a\xa9\x0a\xa2\xca\x54\x52\x31\x83\xce\xba\x84\xa3\xe9\xa2\xde\x9a\xd2\x54\xbb\xc3\x6d\xd7\x61\xf3\x92\xe0\x06\x89\xc4\x01\xbd\xc1\x42\x9c\x38\x59\x86\x92\x44\x9f\xd1\xdc\xbc\x87\x80\x71\x8b\x3e\x73\xba\xce\x44\x1d\x8c\x2e\xde\x41\x3a\x77\xe9\x86\x25\xd1\x63\x8c\x26\x08\xcb\x65\x4a\xf4\xcc\x16\xc6\x8e\x02\xc3\xa2\x46\x5f\xcb\x67\x4e\x52\x88\x01\x2d\x0b\xb8\x86\x63\x72\x2f\xaa\x45\xe5\x3a\xb7\x5e\x0b\xed\x10\x74\x87\xd0\xbf\xae\x51\x78\x8a\xd9\xea\x83\xb9\x30\x7d\x69\xc7\x25\x73\x15\x08\xa1\x17\x01\x51\xab\x1c\xa8\x54\xce\x41\xda\x25\xb2\x6d\x42\x44\x59\xad\x4b\x3a\x53\x20\x6f\x4d\x76\x1c\x2d\x6a\x04\x46\x94\x0d\xe0\xd9\x78\x82\x8e\x41\x61\x4a\xd6\xa2\x1a\x45\x2b\xf7\xd2\xc0\x3e\x60\xa0\xa8\x8d\xfe\x67\xb3\x1b\xec\x70\xdc\xe0\xa4\x34\x10\x17\x98\x51\x3a\xd8\xa7\x52\x76\x9f\xad\xc3\x22\xc1\xb5\xb4\xcf\x08\x9d\x7d\xd4\xa0\x90\xd5\x74\x16\x96\xba\xb6\x40\x0c\x81\x5a\x21\x11\xb3\xfa\x00\x74\xb5\x10\x2c\x5e\x04\x26\xa5\xde\xab\x92\xda\x70\x9f\xb6\x88\xb8\xc6\xf2\x65\x5b\x7e\xdb\x5a\xe8\x90\x45\x53\x2a\xe0\x0e\xcb\x8e\x88\x77\x84\xb2\x43\xd1\x4f\x22\x3f\x69\xfc\xdf\xcf\x33\xff\xcb\xbb\x0d\x1c\xf1\xd0\xce\x5e\xff\x9c\xef\xae\xf2\xdd\xd7\x87\x1f\xd4\x12\x9a\x75\x4c\x89\x35\x74\x58\x27\xf2\xde\x8d\xd0\x07\xb5\x66\xc9\xa3\x70\x85\x6e\x8e\x8f\xee\xae\x5e\x39\x86\x31\x28\x97\xa1\x53\x13\x9d\x44\x4c\xa5\xad\x9a\xac\x90\x06\xa3\x32\x04\x99\xd3\xd6\xc8\xe8\x03\xda\x64\xa6\x05\xad\xa6\x23\x42\x9a\xf7\xea\xe8\xb8\x1a\xcd\xcf\xc3\x4f\xad\xef\x08\xdb\xd7\xad\xf6\x46\xc5\x3a\x8c\xb8\x6c\x8e\x6d\xa4\xb4\x82\x5a\x27\x82\x2e\x13\x94\x98\x98\xda\xcc\x52\xe9\x41\x1a\x2c\xdd\x7a\xef\xad\xb1\xa5\x43\x8b\x85\x8b\xa6\xb1\x11\x65\x71\x76\x97\x36\x12\x47\x9b\x1c\x61\x25\x68\x8c\x0b\x2c\x43\xa1\xcf\xed\x45\x57\x8a\xe5\xe0\x51\x5e\x56\x6c\x6d\x5e\x0b\x04\xed\xe4\x06\x91\x99\xb4\x84\x17\x98\xe7\xd4\x49\xa8\xdd\x1a\x82\x60\x5b\x6e\x0c\xd4\x74\x4a\xac\x82\x44\xd3\x91\x18\x55\xb3\xa3\x6e\x39\x84\xac\x85\x53\x0a\x9a\xb5\x35\x73\x74\xae\x35\x57\x6f\xe6\xa3\x45\x0e\x40\x04\xf5\xa6\xb2\x46\xd2\x52\x6f\x05\x31\x79\x8d\xde\x66\xa0\xf4\xb1\xca\xad\x80\xf3\x0e\x42\xdb\xe1\xec\x3b\xda\x10\xd5\x6e\x50\x49\x3e\x22\xd9\xd7\xa2\x8d\x4e\x0c\xbe\x96\x2c\x4e\x00\x5e\xde\x89\x16\x92\x96\x58\xd6\xa0\x24\x10\x32\xdb\x86\x98\xdc\x66\x4b\xf0\x6e\x41\x38\x53\x98\x97\x8d\xb1\x81\x61\x48\xae\x18\x40\x91\x04\xaa\x93\x49\x84\x59\x16\x02\x30\x74\x6d\x62\x4b\xb0\x43\x8e\xa1\x04\x41\x36\x70\x6b\x37\xb5\xb6\x23\xc2\xdd\x4d\xed\xee\x66\xda\xc6\x96\x38\x91\x29\xb0\x28\x39\x78\x15\x11\x78\x9b\x9a\xe0\x96\xcd\xa2\x22\xb6\x6e\x62\x2a\x28\xa5\x2e\xec\xdd\xd2\x27\x2f\x57\x0f\x2f\xa4\xed\xf2\x6a\x10\xa8\xb2\x09\xcb\x55\x11\xa2\xd2\x69\x86\xb5\x06\xac\x23\xba\xb7\xb0\x1e\x2b\x5a\x00\xb4\x85\xe6\x40\xab\xc6\x17\xed\x26\xbd\x81\xf5\x40\x88\xbe\x62\xa0\x93\x14\xf4\x05\x6c\x80\x53\x43\x34\xd5\xb3\x29\x6c\xe3\xca\xb1\x7a\xe7\xaa\x6d\x6e\x8d\x48\x58\x5a\x2f\xab\x50\x07\x4d\x4b\xb5\x60\x61\x4e\x5a\xc6\x33\x64\x8a\x36\xaf\x15\x6b\x49\x92\x67\x77\xe4\x6e\x92\x6b\x0d\xc9\x39\xc3\xcb\xbb\x75\xa9\x39\x4b\xe4\xce\x36\xfa\xac\x3b\x19\xbb\x49\x37\x24\x72\x48\x61\x34\x82\x59\x54\x73\x86\x0d\x40\x2b\x1c\xb1\x46\x47\x4d\x19\xcd\x68\x58\xc0\x0a\x6f\xbd\x56\x78\x8c\x22\xb5\xea\x2d\x56\xcc\x5e\x4e\x7d\x62\x6b\x3a\x40\x84\xd3\xbb\xc7\x84\x49\x56\xa9\x83\x23\xd2\x30\xa1\x66\xb9\x74\xcc\xe5\xab\x2d\x8c\x21\xdd\x37\x1f\xc6\x18\xc2\xf1\x9f\x5e\x23\xcd\xdd\xb8\x41\xe3\x30\x6d\x8b\x9d\xdb\x34\x4a\xc8\x6a\xc6\x94\xd6\xa6\xc2\xcc\x6d\x14\x99\xb5\xad\x44\x44\x20\x61\x27\xb0\x70\xec\xc6\x9e\x6b\x39\x4f\xfb\x14\xc7\xe0\x44\x5e\x28\x9b\xc9\x99\x12\x63\xd3\x65\x63\x19\x79\x00\x29\x60\x4b\xed\xab\xa1\x35\x5b\x3d\x70\x23\xaf\x76\x37\xea\x8d\xfa\x17\xbd\x9e\x37\x04\xb2\x35\x54\x48\xa2\x1c\xab\xd1\x0a\x26\x03\x75\x14\x26\x54\x29\x9b\x09\x53\x33\x57\x46\xf4\x32\x0d\x4d\xa9\xb1\x56\x16\xb4\x06\xcb\x9b\x35\x99\x58\xc9\x2a\xb8\x52\x07\x4e\xb6\x9e\x0e\x34\x81\xd0\x63\xb5\xb9\x11\x15\xa3\xd7\x2c\x8c\xed\xe2\x5d\x73\x12\x69\x6a\xf1\xb4\x6e\x12\xed\x0f\xd4\xcb\xa7\xa1\xa1\x26\x7f\x47\xfd\xc9\xfb\xcb\x57\x8f\x2e\xf6\x67\x75\xe6\xb6\x3f\xbb\x38\xbf\xfc\x0a\xf0\xa1\x7d\x6b\xd4\xff\x69\x2c\xb4\x6f\x8d\xf4\xeb\x5a\xbe\x35\xb9\xaf\x6b\xf9\xd6\x7c\xbe\xae\xe5\x5b\x73\xf8\xba\x96\x6f\x8d\xdb\x2f\xf2\xf2\x8d\xb9\x7a\x5d\xcb\xb7\xe6\xe7\x75\x2d\xdf\x1a\x93\x5f\x32\xf1\xe7\xbd\xed\xcf\xfc\xc6\xa5\x77\xf5\xbe\xaa\x9c\x66\x92\x4c\x2a\x06\x1c\xc0\x88\x11\x03\x09\x9a\xad\xd1\x24\xa5\xfa\x98\xc2\x4b\x96\x81\x8c\xee\xaa\x8c\x2b\xa7\xc3\xd8\xd6\x2d\x8e\xdc\xd2\xa2\xcd\x27\x28\x76\x2f\xc8\x8a\x2e\x0c\x23\x89\xac\x51\xf2\xf6\x5a\xb9\xd8\x03\xd7\x8a\x58\x81\x61\x3c\xaa\xb4\x0d\xce\xcf\xdf\x7b\x11\x76\xd8\x6f\xd8\x83\x6c\xac\x6d\x6f\xa1\x96\x98\x93\x6c\x90\xc2\x5c\x3c\xa1\xab\x96\x99\xa8\xd7\x16\xd7\xac\x21\x8b\xc8\x68\x09\x66\x9f\x8b\x99\x7d\x98\x65\xfa\x68\xd5\x57\x23\xed\xd9\x98\x32\x02\x7d\xa3\xb6\xb2\xb1\x05\x94\xf7\x50\x67\x43\x2d\x68\x6a\xa6\xcb\xa1\x6f\x9c\x84\x1c\xb0\x94\xd7\xf0\x6b\x77\xe3\x76\xef\xcc\xbf\xdf\x3b\x7f\xfe\x92\xf1\x37\x9f\x6f\x9d\xbd\x69\xb7\xae\x2f\xf6\xb7\xf6\xfe\xe6\x16\x43\x07\xbe\x95\xfb\x57\x57\xed\x16\xea\xd3\xb3\xf7\x74\xfc\xdf\xff\x3e\x1d\xc7\x6f\x67\xf2\xc7\x7f\xcf\x5f\x1e\x9e\x9e\xb4\x8f\xef\x4e\x8f\x2f\xf8\xee\x3f\xdf\x3e\x93\x7b\xba\xee\x9d\x9e\xea\xe9\xe3\xf3\xfd\xe3\xd0\xd1\xb3\xfd\xe9\xd2\xa7\x02\x7f\x59\xcb\x6f\xae\xf1\xe4\xf8\xe4\xe3\x7d\x7e\xf7\xf8\xa5\xc8\xc9\xcb\x17\x27\xfe\xf8\x5f\x1f\xae\x4e\x4e\x8f\xe7\x39\xbd\x7a\x76\xf9\xe2\xe4\xd5\xd3\x07\x77\xff\xa1\xff\x3a\xfd\xe7\x83\x97\x71\xfa\x97\x1a\xd7\x97\xea\x9b\x0b\xe8\x3f\x2e\x8f\x9e\xfc\xf4\x1b\xdd\xfd\xf5\xf4\x1e\x3d\x7d\x38\x7f\x3e\x3d\x39\x3f\x7f\xf8\x54\x1f\xdd\xfd\xe0\x3f\x8c\xe7\x27\xfb\xf7\xe3\xed\x8f\x1f\x2e\xc5\x7e\xbd\x7c\xfa\x97\x02\x5f\xac\xc4\x37\x57\x38\x3a\x3e\x7b\xb3\x3f\xbb\x77\x2f\xe6\xcb\xb7\x8f\x5e\x8c\x8b\xc7\x6f\x2f\xc6\xab\xe3\xa7\xcf\x1e\x1e\x3f\xf8\x58\xbf\xee\xc5\x7e\x7a\x12\xf7\xf4\x19\x7d\xf4\xe7\x4f\x6e\xb2\xe9\x8f\x85\xf6\xe6\x1a\x3f\xbd\xfd\xe5\xf9\xfb\x17\xed\xe7\xa5\x3f\xd0\x38\x7e\x74\x71\x61\xf7\x9f\x3e\x7f\xfa\xe3\xc7\x37\x1f\x7f\x7c\xfe\xbd\xbf\xfc\xf0\xe0\xb7\x97\x76\x74\x44\x67\x72\x75\x5e\x7f\xb5\xe9\x8b\x75\xf4\xe6\x12\x8f\x8f\x9e\xde\x3f\xa2\x17\xf6\xe0\xe2\x95\x5d\x3d\xdb\x1f\xff\x76\xf2\xcb\xd1\xfd\x2b\xbe\x3c\xfa\xe1\xc1\xfe\xde\xdb\xab\xfd\x0f\x47\x57\x7d\xdc\xbb\x7f\x71\xf4\xec\xf1\xfd\xcf\x69\xfb\xee\xe0\xe0\xf7\xef\x7e\xff\xee\xff\x03\x00\x00\xff\xff\x04\x71\x69\xb1\x3d\x13\x00\x00")

func ConfigCliFleetEthProdJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthProdJson,
		"../config/cli/fleet-eth.prod.json",
	)
}

func ConfigCliFleetEthProdJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthProdJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.prod.json", size: 4925, mode: os.FileMode(0644), modTime: time.Unix(1609934130, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x5a, 0x72, 0x64, 0x6b, 0xee, 0xe6, 0x97, 0xda, 0xe8, 0x53, 0x7c, 0x33, 0x25, 0x27, 0x55, 0xa8, 0xe0, 0x9a, 0xc2, 0x16, 0xcf, 0xc0, 0x91, 0x8a, 0xbc, 0x98, 0x5, 0xe5, 0x63, 0x83, 0x77}}
	return a, nil
}

var _ConfigCliFleetEthStagingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\x4f\x8f\x54\xd9\x0d\xc5\xf7\x7c\x8a\x52\xad\xa3\xd7\xf6\xbd\xbe\xbe\xbe\xbd\x22\x30\x40\x6b\x12\x10\x69\x06\x32\x22\xca\xc2\xd7\x7f\xba\x2b\xdd\xe9\x62\xaa\xaa\x19\x98\x68\xbe\x7b\x54\x80\x04\x33\x34\x6b\x76\x4f\x7e\x7a\x3e\x47\xc7\x3f\x3f\xff\xef\xde\x6a\xb5\x3e\x8f\x1b\x8f\xdf\xde\x6e\x6f\xf7\xeb\xd3\xd5\x61\x77\x1b\x7f\x39\x56\x9f\x6d\x7f\xd8\xec\x6d\xfb\x36\x76\xef\xd7\xa7\xab\xd4\xeb\xfd\xc7\xfa\xc3\xeb\xdb\xfd\x21\x76\x0f\xb7\x37\xb9\xb9\x58\x9f\xae\x8e\x2d\x56\xab\xf5\xa3\x1b\x9d\xd7\xe1\x5f\x74\x58\xad\xd6\x8f\xaf\x23\x0e\xeb\xd3\xd5\x3a\x0e\x97\xcb\xfe\xa0\x17\x9b\x9b\x8b\xf5\xa7\x77\x0f\xb6\xdb\xc3\xb3\xad\xc7\x51\xf4\x5f\x1f\x4a\xab\xd5\x3a\x6e\xb6\x1e\xa7\x27\x27\x5c\x61\x42\xa5\x62\x4a\x31\x5a\x2b\xd9\xa0\x23\x4d\x36\x89\x22\xce\xa3\xb5\x69\x90\x8e\x14\x7d\x34\xc8\x51\xa7\xd5\x59\xa6\x98\x89\x61\xd6\xc9\x8e\x50\x3d\x99\xb3\xa1\x62\xf5\xde\xeb\x6c\x3e\x21\xb1\x02\x33\xe6\x6c\xd6\xa7\xa4\x16\x34\x12\x19\x60\x4c\xd6\xc7\x24\xd4\xc6\x4a\x03\xee\x53\x5f\x06\x2e\xa5\x8c\x85\xe8\x94\xa8\x7e\x72\xfd\x85\xc5\xec\x23\x67\x1d\x38\xb2\x17\xd3\xc6\xa0\x0e\x54\xc9\xcd\xaa\x74\x9d\x19\x84\x01\xcc\x5c\x00\x63\xba\xba\x4a\x78\x00\x71\xa1\x46\x47\x4b\x31\xa1\x99\x2b\xb6\x2c\xd2\xbd\x18\x4d\x97\xe6\x2a\x98\x10\xb3\x34\x07\x25\xe1\x39\xa7\x89\x27\x95\x3e\x47\x47\xb5\x86\xad\xd6\xe9\x00\x19\xf7\xb1\xd3\x82\x55\x16\x84\xbe\x94\x3a\xee\x76\x89\xa0\x5d\x0c\xfb\x28\x43\x3b\xe0\x88\x24\xd5\x52\x68\x78\xaf\x50\xb2\xb3\x86\x28\x70\x12\xcc\xe2\x26\x32\xfb\xac\x18\x33\x93\x94\x4b\xcd\x39\x89\xe6\xf1\xb1\xab\x4d\x2d\x83\x0d\x2d\xbc\xf6\xde\x7c\x60\xce\x40\x21\xae\x86\x0d\x46\x57\xd6\xca\xe9\xb3\x98\x00\x65\xd6\xb4\x36\x6b\xbb\x5f\xdb\x52\xaa\x2c\xe3\xe8\xf1\x63\x92\x1f\x2c\xfe\xfb\x13\x05\x3f\xed\x8e\x34\xf9\x53\xdd\x5c\xbf\x88\xdd\xdb\xd8\xdd\x89\xc3\xec\x24\x6d\x60\x67\x1b\xbd\xa1\x57\x24\x8d\xc8\xb4\xc2\x61\x23\x85\x59\x09\x4b\x6f\x25\xba\x7b\xd8\xc0\x89\x03\x50\x14\x25\xba\x99\x8a\x73\xed\x96\x51\x2c\xdc\xe6\xe8\x25\x25\x26\x93\x0b\x72\x4e\x6f\x93\x42\x86\xf5\x10\xeb\xe9\xdd\x53\x14\x6b\x19\xa9\x54\x7d\x0a\x4c\x98\x19\x47\x1c\x5a\x59\x06\x2c\xd8\xf8\xee\xa0\xf9\xc8\xc1\x54\xed\x89\xbd\x14\x47\x44\x15\x1b\xc6\x62\x75\x68\x45\xaa\x10\xc3\x1b\x77\x1e\x2d\x19\x41\xb2\xa2\xd9\x64\x73\x49\x50\xcf\xa4\x31\x30\x7a\xba\xa9\xa4\xf6\x0e\xd1\xdb\x34\xd1\x76\xec\xd3\xbd\x10\x0f\xb0\x69\x02\x01\x20\xd8\x5b\x12\x18\xb6\xee\x9c\xdc\x45\x9c\xe4\x7e\x01\x5e\x50\xc6\x52\x08\x16\xfc\x86\xc9\xa0\x34\x04\xc3\xe4\x66\xa2\xe1\x52\xd5\x0a\x4f\xc3\x99\xb3\xa0\x52\x33\x43\x95\xd6\x40\x9b\x40\xef\x26\x5e\x3c\x8a\x42\x80\x39\x4a\x10\xa4\x13\x64\x0f\xce\xee\x50\xdc\xd8\x1c\x78\x48\x99\x80\x64\x21\xe2\x1c\xc4\xd2\x4b\xcb\x63\xda\x58\x25\x46\x93\xa3\x3f\x00\x28\xda\xf3\x23\x0d\x63\xc1\x51\x17\xc2\xaf\x69\x78\x7e\xbb\xbf\x7c\xb6\x3d\x6c\x72\x63\x7a\xd8\x6c\x6f\xf6\x77\x30\x01\xf4\xbd\x69\xf8\x9c\x2b\xd0\xf7\x1e\xfb\x97\x5e\xbe\xf7\x74\xd7\xf7\xfe\x30\xcc\x17\x07\x3d\x6c\xec\x9b\xbf\xf8\x81\x64\x30\x2b\x64\xe9\x53\x67\x05\x43\x4f\xaf\xe8\xea\x9d\x5b\x51\xe2\x74\x1d\xb5\x43\xa3\xa2\x11\x38\x81\x0b\x0d\x99\x58\xa9\x45\xc0\xc0\xca\x48\x53\xe6\x88\x1a\x42\x5c\x4a\x08\x69\x2f\x50\xad\x49\x13\x0d\xf4\x21\x38\x92\xab\x86\x05\xd6\x08\x66\x09\x4a\x66\x16\xe0\x3a\x64\xdc\x47\xee\xcb\x38\xb2\xb8\x20\xc9\xdd\xfb\x52\x5c\x46\x37\x3e\x0a\x0c\x1a\x39\xdc\x12\xa1\xf4\x91\x00\x31\xa6\xd4\xd2\x0c\x25\xa3\xa7\xb6\xe2\xdc\xa4\x15\x50\xef\x33\x06\x43\x37\xa9\x00\x32\xa9\x4c\x60\x8d\xf4\x71\x84\x0e\xd3\x75\xb6\x8e\x59\xab\x16\x1d\x55\x6a\xe6\xe8\xd6\x06\x8c\xf0\x86\xc9\xf5\xf8\x51\xa5\x81\xb5\xd4\x1e\xc7\x7d\xc1\x51\x16\x58\x84\xbf\xde\x96\xcf\x77\xfb\xab\x90\x4f\x36\x6f\xe8\xe4\xcb\x1b\x76\x72\xb0\x37\x27\x15\x3a\xd4\x93\x38\x5c\xbe\xa5\x13\xe4\x97\x9b\xdb\x72\xf6\xd7\xff\x9e\xdf\x1c\xca\xa3\xf7\xdb\xab\x9b\xcb\xaa\xb7\xef\x2e\x29\x7f\xfc\xf5\xea\xfc\xe2\x97\xab\x33\xbc\xf8\x65\xf7\xcf\x27\xb1\x97\xe7\x57\x78\x55\x9f\xbe\xa2\x77\xb7\x9f\x13\xfa\x20\xf0\xa7\x0b\xf4\x6d\x0d\x79\xf9\xfa\xe7\x97\x67\x8f\x9e\xbf\xde\xbd\xf9\x71\xda\x3f\xea\xfb\x57\x8f\xcf\xf8\xe5\xe1\x6f\xbb\x5f\xf7\x4f\xf8\x3f\x67\xa4\x9b\x5e\x9e\xef\xe7\xdf\xf3\xd5\xe3\xf9\x27\x8d\x3f\xdc\x8f\x6f\x2b\xf0\x93\xb1\xff\xe1\xe9\xd5\xee\x01\xfd\xac\xed\xd1\x59\x7d\xfd\xae\xf8\xfb\xfd\xc3\x77\x8f\x2f\x1e\xfc\xf4\xe2\xfc\xb7\x8b\xcb\x8d\xd5\xd7\xe3\x70\xfe\xf8\xfc\xd9\xa3\x4f\x29\xde\x5b\xad\x7e\xbf\xf7\xfb\xbd\xff\x07\x00\x00\xff\xff\x75\x33\x73\x32\x03\x09\x00\x00")

func ConfigCliFleetEthStagingJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthStagingJson,
		"../config/cli/fleet-eth.staging.json",
	)
}

func ConfigCliFleetEthStagingJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthStagingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.staging.json", size: 2307, mode: os.FileMode(0644), modTime: time.Unix(1609934130, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x55, 0x35, 0x5e, 0xf5, 0x90, 0x37, 0x0, 0xe4, 0x45, 0x8c, 0x19, 0x77, 0x14, 0xa0, 0x94, 0x1c, 0x9b, 0x78, 0xa7, 0x2e, 0x58, 0x45, 0x1b, 0xba, 0xf3, 0xfb, 0x62, 0x87, 0x97, 0xf8, 0x96}}
	return a, nil
}

var _ConfigCliFleetEthTestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\x4d\x6f\xdc\xb7\x11\xc6\xef\xfe\x14\x8b\x3d\x17\x2b\x72\xde\xa9\x93\x6d\x29\xb6\x11\x38\x46\x62\xbd\xb4\x4d\xd1\x03\x39\x33\xb4\x37\x95\xb5\x91\xf4\x97\x0a\xbb\xc8\x77\x2f\x56\x75\x11\xbf\xc8\x67\x5f\x87\x04\xe7\xc1\xf3\xfc\x38\xf3\x9f\x47\xab\xd5\xfa\xe5\xee\xcd\xcb\xbc\xcb\x8b\xf5\xe1\x6a\x7d\xfc\xc3\xd3\xb3\xe7\xeb\xbf\xec\xcb\xaf\x76\xc7\xdb\x1b\xdf\xdd\xe5\xf5\xfb\xf5\xe1\x6a\xf6\x8b\x9b\xbc\xaf\x1f\x5d\xdc\xde\x2c\x79\x7d\xb4\xbb\x9c\xdb\x37\xeb\xc3\xd5\xfe\x8d\xd5\x6a\xfd\xc3\x65\x1f\x17\x19\xeb\xc3\xd5\x72\x7d\x7b\x7f\x73\xb5\x5a\x3f\xbb\xc8\x5c\xf6\xef\xe6\xf2\x76\xb3\xe4\xcd\xb2\xfe\x78\xf0\x74\xb7\x5b\x5e\xed\x22\x6f\xd6\x87\xab\x7f\xdc\x97\x56\xab\x75\x5e\xee\x22\x0f\x0f\x0e\xa2\xf7\x84\x54\x30\x28\x69\x92\x8d\x60\x76\xe8\xd6\xbb\x86\x64\x6b\x4c\x41\x85\xb0\x2b\x23\x19\x86\x8d\x40\xb4\xac\x32\xd2\xc0\x67\x13\xc0\x06\xc1\x5e\xb2\xf6\x64\x75\x0c\x6d\xe8\x18\x18\x11\x61\x33\xd8\x10\x1b\x08\x24\x01\x52\x78\x13\x99\x8d\xd1\x43\x71\x30\xf2\xe4\xd9\x1f\x93\x6e\x18\x36\xd5\x6c\x53\xa9\x1d\x12\xe1\x47\xd9\x9f\x68\x6c\x59\x9a\x19\x2b\xe7\x50\xad\xea\xc0\x91\x5d\x61\x46\xad\xae\x03\x55\x45\xc3\x4b\xf3\xda\x55\x4c\xa6\x3a\xa4\xb3\x6a\x60\xb1\x00\xda\x5f\xf0\x1c\xa2\x1c\x49\x58\x95\x94\x7a\xed\xa6\x25\x49\xcd\x40\x11\x9a\xe8\xa4\xd9\xd5\x78\x14\x18\xbd\x71\x88\xb4\x81\x35\x48\x28\xd2\xcb\x63\x28\xb2\xa9\xd6\x36\x40\xb8\xa9\x42\x0f\xab\xf4\x9a\x5c\xaa\x99\xa9\x9b\x60\x08\xed\xbb\x0d\x69\x63\x4a\x55\x96\x5a\x4c\x0d\x98\xb0\x24\x51\xa9\x8a\x38\x79\x74\x55\xd7\x12\xa3\x12\xa0\xc4\x44\xab\x33\xe7\x28\x39\xb2\x76\x27\x80\x46\xa3\x25\x48\x1d\x23\x01\x31\x46\x0c\xc3\x44\x70\x36\x71\x91\x9e\x20\x6e\x91\x5a\x7c\x90\x3f\x46\xfe\x9f\x8d\x62\x9b\x8a\x7a\x2f\xf2\x5e\xe3\x3f\x3f\x72\x70\x7a\xbd\x87\x29\x7e\xea\xdb\x8b\x93\xbc\xbe\xcb\xeb\x07\x81\x90\xda\x62\x0c\x8e\xe8\x15\xd2\x78\xcc\x92\x83\x63\x50\x99\x03\x23\x05\x58\x4a\x2b\x84\x40\xa0\xa8\x5e\xb2\x29\x4f\x8d\x19\xc2\x2d\x8c\xc3\x25\x5a\x37\x9a\x8d\xa4\x76\x05\x73\xee\x43\xcc\x8b\xc2\xcc\x40\xf3\x2e\x9d\xb1\x55\xf5\x0e\x34\x2c\x1b\xba\x83\x8e\xc8\x89\xbd\xa6\xb6\xee\x9f\x02\xd1\xe4\x61\xab\x93\x4c\x78\xa6\x38\xf4\x7d\xea\x2c\xd8\x85\x48\x5b\x2b\x61\xd9\x3c\x45\x41\x88\x7a\x62\x16\x83\x7d\xfa\x68\xe9\x75\xee\xd3\x28\x99\x53\x10\x8a\x17\xed\x1c\x52\x1c\x87\x40\x9b\x1c\x44\x8d\x66\xc3\x90\x61\xd2\x95\xb8\x97\x31\x85\xfa\x80\xc6\x63\x4c\x61\x6d\xa5\x6a\x0f\x97\x0c\xfb\x02\x88\xfa\xb0\x4a\x2d\x9a\xac\xc4\xd8\x3d\x30\xc9\xcc\x89\x46\x8b\x92\x55\x9b\x32\x6a\x4d\x98\x36\xf7\x60\x02\x67\x4f\x1e\xdd\x7b\x1b\xcd\x2d\x8b\xb8\x89\x47\xaa\x6b\xa3\x2e\x0e\x89\x02\x05\xc7\x6c\x93\xc5\x7b\xda\x28\xc9\x65\xe2\x40\x74\x72\x18\xd2\xa8\xeb\xe8\x99\xbd\x2a\x13\x09\x79\x52\xe2\x3d\x10\x0d\x36\x00\x6d\x53\x15\xbe\x06\xe2\xe7\xdb\x9b\xb7\xaf\x76\xcb\x76\x6e\xbd\x2f\xdb\xdd\xe5\xcd\x03\x58\x14\xfa\xde\x40\xfc\x69\x6c\xa1\xef\x1d\xfc\xa7\x5a\xbe\x77\xbc\x9f\x67\x79\xb2\xf4\x65\xeb\xdf\x1c\xf3\x3d\xd0\x66\xa3\x82\xa5\x1b\x89\xbb\x96\xc2\x43\x7b\x9d\x38\x64\x94\x3a\x26\xe5\xe4\x16\x48\x69\x81\x21\x93\xa2\x42\x4c\xc0\xa8\x34\xba\x09\x8b\x16\xe8\x84\x1c\x48\x3e\x29\x26\x0e\xaa\xe0\xc5\x6b\x03\x8c\xc9\x3d\xdc\xd3\x48\x2a\x42\xed\x25\x6c\xce\xd1\x08\x79\x80\x24\x2b\x38\xfc\x7f\xcc\x03\xef\x91\xfc\xc6\x00\xad\x51\x1b\x0a\x72\x96\xca\xad\xda\x1c\xc6\x63\xf4\xa9\x4a\xfb\x79\x5a\x61\x0a\x87\x16\x97\xa6\xca\x45\xaa\x69\xce\x42\x04\x25\x94\xd2\x8b\x78\x4b\x9b\x25\x7c\xb0\x66\x2f\x04\xd3\x38\xa6\x29\x21\x46\x1f\x55\x7b\x05\x29\x19\x16\x91\x75\xc4\x6c\x21\xc1\x01\x91\x34\x74\x4c\xcb\xd6\xf0\x8b\x5f\x8d\x5f\x7f\x98\xd7\x79\x19\xf9\xe1\x6e\x77\x7b\xf3\x95\xd1\x07\xdb\xdf\xe9\xe0\xb3\x5d\x76\xb0\xf8\xef\x07\x58\xb4\xe0\x41\x2e\x6f\xef\xe8\xa0\xca\xd9\xf6\x16\x5e\x3c\x79\xd7\xce\xfb\x72\x75\x4d\xcf\xe7\xf9\xd1\xd5\xe5\xfb\xec\x3f\x2f\x47\xcf\xf0\xca\xe6\x07\xfb\xd7\xf1\xf1\xd9\x9b\xab\xbf\x9d\xcf\x67\xcf\xf5\xd7\x79\xf2\x44\xff\xfd\xa7\x4d\xf7\x1d\xbe\xd8\x44\xdf\xee\xf1\xf4\xe8\x2d\x8f\x37\x7f\xbf\x96\x73\x9c\xc7\xb7\x2f\xaf\xce\x3e\xdc\x2d\x27\x4f\x6e\x9e\x9d\xfe\xf2\xe3\xd1\x2f\x78\x7a\xfe\xe2\xd4\x96\x6e\xe3\xf4\x16\x7e\x7c\xf7\x45\x8f\xcf\xf7\xc8\xb7\x5b\xe0\x4f\x67\x57\xcb\xf3\xdf\xde\xe5\xf2\xfe\xd7\xf6\x92\x4e\x5e\xc1\x6b\xdb\xbd\x38\xfe\xeb\xdd\x93\xa3\x33\x4f\x07\x7e\xf9\xdb\x72\x7c\xcc\x79\xbb\x7d\xfd\xe2\xa3\x8f\x8f\x56\xab\x3f\x1e\xfd\xf1\xe8\xbf\x01\x00\x00\xff\xff\xe6\xca\xe5\xeb\x0b\x09\x00\x00")

func ConfigCliFleetEthTestJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthTestJson,
		"../config/cli/fleet-eth.test.json",
	)
}

func ConfigCliFleetEthTestJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthTestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.test.json", size: 2315, mode: os.FileMode(0644), modTime: time.Unix(1609934130, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x92, 0x14, 0x26, 0xa6, 0x12, 0xb1, 0x0, 0x2d, 0xbe, 0x9a, 0xb7, 0x55, 0xdb, 0xfc, 0x1f, 0x75, 0xe, 0xc2, 0x2b, 0xad, 0xfe, 0x44, 0x78, 0x2e, 0x7f, 0x8, 0x7f, 0xd1, 0x9e, 0x11, 0x2c}}
	return a, nil
}

var _ConfigCliLesEnabledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\xf2\xc9\x4c\xcf\x28\x71\x2d\xc9\x70\xce\xcf\x4b\xcb\x4c\x57\xb2\x52\x80\x88\x83\xe5\x5c\xf3\x12\x93\x72\x52\x53\x94\xac\x14\x4a\x8a\x4a\x53\xc1\xe2\xb5\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xa6\x74\x24\x05\x3a\x00\x00\x00")

func ConfigCliLesEnabledJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliLesEnabledJson,
		"../config/cli/les-enabled.json",
	)
}

func ConfigCliLesEnabledJson() (*asset, error) {
	bytes, err := ConfigCliLesEnabledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/les-enabled.json", size: 58, mode: os.FileMode(0644), modTime: time.Unix(1599559876, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xee, 0x27, 0xa7, 0x74, 0xa0, 0x46, 0xa1, 0x41, 0xed, 0x4d, 0x16, 0x5b, 0xf3, 0xf0, 0x7c, 0xc8, 0x2f, 0x6f, 0x47, 0xa4, 0xbb, 0x5f, 0x43, 0x33, 0xd, 0x9, 0x9d, 0xea, 0x9e, 0x15, 0xee}}
	return a, nil
}

var _ConfigCliMailserverEnabledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x0a\xcf\xc8\x2c\x2e\x48\x2d\x72\xce\xcf\x4b\xcb\x4c\x57\xb2\x52\x80\x08\x83\xa5\x5c\xf3\x12\x93\x72\x52\x53\x94\xac\x14\x4a\x8a\x4a\x53\x75\xd0\x25\xfc\x42\x02\x82\x2b\xf3\x92\x71\x49\xfb\x26\x66\xe6\x04\xa7\x16\x95\xa5\x16\x61\xaa\x40\xc8\x05\x24\x16\x17\x97\xe7\x17\x81\x2c\x51\x2a\x2e\x49\x2c\x29\x2d\xd6\xcd\x4f\x4b\xcb\xc9\xcc\x4b\xd5\xcd\xcc\x4b\xca\xaf\x50\x02\x6b\xaa\xe5\xaa\xe5\x02\x04\x00\x00\xff\xff\x7c\x73\xee\xbb\xb0\x00\x00\x00")

func ConfigCliMailserverEnabledJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliMailserverEnabledJson,
		"../config/cli/mailserver-enabled.json",
	)
}

func ConfigCliMailserverEnabledJson() (*asset, error) {
	bytes, err := ConfigCliMailserverEnabledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/mailserver-enabled.json", size: 176, mode: os.FileMode(0644), modTime: time.Unix(1599559876, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0xec, 0x81, 0x8b, 0x99, 0xb6, 0xdb, 0xc0, 0x8b, 0x46, 0x97, 0x96, 0xc7, 0x58, 0x30, 0x33, 0xef, 0x54, 0x25, 0x87, 0x7b, 0xb9, 0x94, 0x6b, 0x18, 0xa4, 0x5b, 0x58, 0x67, 0x7c, 0x44, 0xa6}}
	return a, nil
}

var _ConfigStatusChainGenesisJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6f\x13\x31\x10\x85\xef\xf9\x15\x96\xcf\x1c\xc6\xf6\x78\x66\xbd\x37\x4a\x59\x81\xc4\x8d\x5f\x30\xb6\xc7\xcd\xaa\x9b\x6c\x94\x6c\xa4\x16\xd4\xff\x8e\x92\x2c\xa1\x42\x9c\xf0\xcd\x7e\x33\xef\x7b\x7e\x3f\x37\xc6\x58\x99\xa6\xb9\xd8\xde\x5c\x2e\xc6\x18\x9b\x07\x47\x58\x24\xa0\x0b\x9e\x04\x42\x8e\xc8\x05\xe2\x43\xc0\x90\xfd\x67\xef\x74\xf8\xa8\x1e\x73\xfa\xb3\x62\x6c\x96\x49\xf6\x45\x6d\x6f\x2c\xbc\x38\x18\xe0\xd3\x00\x84\x8f\x8f\x31\x79\xb8\x1c\x7b\x1d\x7c\xfb\xb0\x22\x3c\x44\x89\x15\x94\x7d\x6b\x14\x81\x53\x2b\x92\x33\x0a\x05\x0d\xa1\xfa\x4e\x84\xaa\x36\x5f\xfe\x03\xb1\x59\x31\xb6\xcc\xfb\x36\x3e\xdd\x1d\x6c\xd9\xca\xb8\xff\x5a\x6d\x6f\x98\xf9\x16\xc4\x6e\xe7\x9d\x9e\x16\x95\xfa\x30\xcd\xe5\xd9\xf6\x06\x56\xa1\xca\x3c\xcc\xc7\xe7\xef\xe7\xc3\x61\x3e\x2e\xb6\x37\xcb\xf1\xac\xab\x96\x5f\x7f\xc8\x7e\x19\xcf\xbb\xbf\x97\x74\x3c\xb8\x08\x5f\xe4\xb4\xbd\x85\x8c\xa0\xa4\x35\xa3\x26\xa8\x89\x1c\x49\xe9\x72\x63\xe7\x92\x6a\xe0\x82\x80\x5d\x41\x27\x15\x52\xf0\x1d\x31\xa9\xcb\x21\xd5\x42\x9d\x80\x96\x96\x43\xb5\xef\x7d\xe3\x3f\x69\xdd\xfd\xf5\xfe\xef\x3a\xb6\x36\x96\xf3\xb4\xbc\xfe\xae\xea\xda\xce\x55\xd3\x97\xe5\x28\x8f\xb2\xc8\x1a\x30\x30\x92\x63\xe4\xc8\x01\x03\x75\xe4\x28\x91\x7a\x88\xc0\x9e\x12\xd3\x45\xa3\xe8\x21\x22\x45\xbe\xcc\x26\x52\x62\x0f\xa8\x14\x19\x99\xa9\xb1\xa7\x7c\xb3\x7e\x92\xd3\xb7\x71\x37\x2e\xef\xa1\x60\x37\x6f\x9b\x5f\x01\x00\x00\xff\xff\x91\xc6\xb3\x58\x64\x02\x00\x00")

func ConfigStatusChainGenesisJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigStatusChainGenesisJson,
		"../config/status-chain-genesis.json",
	)
}

func ConfigStatusChainGenesisJson() (*asset, error) {
	bytes, err := ConfigStatusChainGenesisJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/status-chain-genesis.json", size: 612, mode: os.FileMode(0644), modTime: time.Unix(1599559876, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0xf0, 0xc, 0x1, 0x95, 0x65, 0x6, 0x55, 0x48, 0x8f, 0x83, 0xa0, 0xb4, 0x81, 0xda, 0xad, 0x30, 0x6d, 0xb2, 0x78, 0x1b, 0x26, 0x4, 0x13, 0x12, 0x9, 0x6, 0xae, 0x3a, 0x2c, 0x1, 0x71}}
	return a, nil
}

var _keysBootnodeKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x4b\x01\x80\x40\x08\x04\xd0\xbb\x69\x58\x96\x6f\x1c\x66\x94\xfe\x11\x7c\xbe\x65\xab\x03\x07\x43\x1b\x87\x5b\x17\x8e\x9e\x23\x02\x11\x1a\x57\x51\x9d\x32\xf7\x24\x99\x1b\x08\xd8\xcb\xcf\x2d\xf4\xba\x3e\x7f\x00\x00\x00\xff\xff\x4a\x3d\x56\xc6\x41\x00\x00\x00")

func keysBootnodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_keysBootnodeKey,
		"keys/bootnode.key",
	)
}

func keysBootnodeKey() (*asset, error) {
	bytes, err := keysBootnodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/bootnode.key", size: 65, mode: os.FileMode(0644), modTime: time.Unix(1599559877, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0xcf, 0x27, 0xd4, 0x96, 0x2e, 0x32, 0xcd, 0x58, 0x96, 0x2a, 0xe5, 0x8c, 0xa0, 0xf1, 0x73, 0x1f, 0xd6, 0xd6, 0x8b, 0xb, 0x73, 0xd3, 0x2c, 0x84, 0x1a, 0x56, 0xa4, 0x74, 0xb6, 0x95, 0x20}}
	return a, nil
}

var _keysFirebaseauthkey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x52\x85\x20\x18\x00\xe0\x7d\xef\xc2\xcc\x71\x4a\xc4\x76\x3f\x29\x43\x5c\x34\x2d\x4d\x59\x6a\xa5\x8d\x24\xde\x42\x7b\xfb\x3e\x00\x00\x9e\x87\xfa\xfe\xf3\xf9\x11\x5e\x20\x0e\x3a\xf6\x7b\xb8\xf2\x03\xc7\xd9\x4a\x10\xec\x46\x74\xa7\x26\x9a\xfd\x71\xec\xeb\xea\x98\x84\xb2\x9b\x6c\x92\x5b\xaa\x0d\x0e\x7c\x71\x71\xb8\xb1\xb1\xf2\x62\xcc\x61\xfb\x59\x91\xa2\x6f\x69\x6f\x29\x09\xdf\x07\x99\xb5\x09\x2a\x5f\x5b\x69\xa2\xa5\x91\x33\xa9\xa5\x67\x2d\x5d\xdd\xe1\xf0\xac\x82\xb0\xcf\xec\xd7\x72\x3d\x9c\x4f\x54\x4c\x3c\x2d\xad\x8b\xac\x32\x57\x8c\x06\xfc\x5d\x24\xd3\x7e\xf7\x1f\x00\x00\xff\xff\xd6\xa2\x00\x4a\x99\x00\x00\x00")

func keysFirebaseauthkeyBytes() ([]byte, error) {
	return bindataRead(
		_keysFirebaseauthkey,
		"keys/firebaseauthkey",
	)
}

func keysFirebaseauthkey() (*asset, error) {
	bytes, err := keysFirebaseauthkeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/firebaseauthkey", size: 153, mode: os.FileMode(0644), modTime: time.Unix(1536843582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0x69, 0x23, 0x64, 0x7d, 0xf9, 0x14, 0x37, 0x6f, 0x2b, 0x1, 0xf0, 0xb0, 0xa4, 0xb2, 0xd0, 0x18, 0xcd, 0xf9, 0xeb, 0x57, 0xa3, 0xfd, 0x79, 0x25, 0xa7, 0x9c, 0x3, 0xce, 0x26, 0xec, 0xe1}}
	return a, nil
}

var _keysTestAccount1StatusChainPk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xdd\x8a\xe4\x40\x08\x05\xe0\x77\xf1\x3a\x01\xb5\x4c\x55\x99\xb7\x51\xcb\x62\x9b\xf9\x6b\x92\x66\xd8\x65\xe8\x77\x5f\x32\xcb\x32\x97\x82\x7e\x1c\xcf\x17\x7c\xe6\x71\xde\x3e\xde\x61\x2f\x0b\xdc\x06\xec\xd0\x29\xb2\x25\xe9\xca\xd4\x71\x15\xe4\xbe\xba\x2a\xae\x68\x52\x94\x7c\x56\x33\x84\x05\x6c\x8c\x23\xcf\x13\x76\xf0\x49\x55\xc2\x8a\x50\xe1\x6a\x58\x7c\x93\x16\xb8\x79\x91\xe2\x9c\x4c\x39\x2d\x59\x5c\x61\x81\x38\xfe\xdc\x1f\x1f\xb0\x7f\x41\xdc\xee\xbf\xf2\x78\xe4\xef\x07\xec\xb0\x35\x17\xb1\x6e\xd4\x67\x6f\x8a\xea\xce\xd1\x4c\x95\x98\x5c\x54\x8b\xa9\xb7\x31\x2c\x89\x46\xe9\x53\x23\x31\x91\x42\x9a\x8c\x51\x6d\x9b\xf5\x92\xbf\xbd\xbb\x1d\xf6\x76\x5e\xfe\xed\x13\x76\x30\xc3\xad\x17\xec\x93\x38\x2a\x73\xca\xa8\x38\x34\xb0\x59\x6a\x2f\x2d\xe1\xf9\xff\xf0\x5a\xce\x73\x25\xee\x6b\x3c\x0e\x58\xe0\x65\x4c\xd8\xe1\xfc\x0e\xfc\x6f\xfc\xb1\xc7\xcb\x6b\x5e\x85\xf1\x02\xa7\xbd\x5e\x0f\xb8\x57\xc1\x62\x9e\x8d\xb3\xb6\x9a\xcc\x64\x82\xc6\x81\x6d\x93\xd9\xe8\x4a\xae\x54\x44\xab\x78\x20\x99\x85\x52\x99\x21\x65\x23\x1a\x19\x05\x16\x78\x87\xbd\x93\xf2\x02\x07\xec\x7d\x81\x3b\xec\xf4\x5c\xe0\xcd\x02\x76\x68\x9d\xb1\x0d\xa4\x40\x2f\x51\x49\xad\x4f\x51\x47\xd6\xda\xbd\x56\xaf\xc5\xc2\x37\x66\xec\x41\x45\xc8\xb4\x8c\xd0\x4a\x6d\xe0\x4c\x95\x9e\x09\xcf\xe7\xdf\x00\x00\x00\xff\xff\xd2\xdb\x1b\x65\xe9\x01\x00\x00")

func keysTestAccount1StatusChainPkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount1StatusChainPk,
		"keys/test-account1-status-chain.pk",
	)
}

func keysTestAccount1StatusChainPk() (*asset, error) {
	bytes, err := keysTestAccount1StatusChainPkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account1-status-chain.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1599559877, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xba, 0x35, 0x1, 0x2b, 0x9d, 0xad, 0xf0, 0x2d, 0x3c, 0x4d, 0x6, 0xb5, 0x22, 0x2, 0x47, 0xd4, 0x1c, 0xf4, 0x31, 0x2f, 0xb, 0x5b, 0x27, 0x5d, 0x43, 0x97, 0x58, 0x2d, 0xf0, 0xe1, 0xbe}}
	return a, nil
}

var _keysTestAccount1Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4b\x8e\x24\x3b\x08\x45\xf7\xc2\x38\x42\xb2\x31\xd8\xd8\xf3\x57\xfb\xc0\x80\xf5\x52\xf5\x4b\x45\xa4\x4a\xdd\x2a\xd5\xde\x5b\x91\x83\xee\x19\x20\x74\xee\x3d\xdf\xa0\xee\x47\x9c\x27\x0c\x78\x29\xfc\x5f\x2a\xc8\xae\x2e\x2d\xb0\xd6\x6c\x14\x2f\x9d\xb3\xb3\x34\x6c\x51\x9d\xa5\x38\x1b\x6c\x60\xc7\xef\xfb\xe3\x13\xc6\x37\xd8\xed\xfe\x7f\x1c\x30\x40\xe3\xdc\x33\xca\x6e\x8f\xe3\x7a\x78\x9e\x1f\xf1\xeb\x01\x03\x48\x02\x7d\x89\xb7\xb4\x64\xae\x42\xea\x1a\x9c\x66\x9a\x29\x4a\x96\xa4\xa5\x63\xd0\x9c\xb9\x89\x66\xa5\x82\xe4\x66\x92\x08\x5b\x4c\x6a\x95\xd6\x5f\xde\x5d\x0f\x7d\x3f\xaf\xd8\xdb\xd7\xc5\x2d\xc4\xa6\xb4\xb0\xd8\xcc\x19\xbb\xf6\x9e\x5b\x0e\xe9\x5a\x3b\xb2\x24\xf8\xd9\xe0\xd5\x17\x0c\x38\x9f\x85\xe1\xb9\xfe\x83\xf8\xeb\x5b\x7c\xc0\x28\xb8\xc1\x07\x0c\xac\x98\x89\x36\xb8\xc3\xc8\x1b\x1c\x30\x64\x83\x53\xdf\x2e\x81\xdc\x99\xb1\xc9\x9c\x46\xab\x68\x22\xb1\xa4\xe2\xad\x79\x70\xca\x54\x8b\xa1\x08\xf6\x59\x9e\xb3\x06\xad\x1e\xc8\x68\x58\xda\xc2\xa9\xd6\xae\x22\xef\x6a\x30\xa0\xa3\x97\x60\xd2\xde\x22\xbc\x74\xcf\x8b\x6a\xc3\xb6\x12\x13\x55\x26\x4c\xcb\x78\x95\x6c\x6d\x51\xb4\x14\x42\x55\xa7\x75\x76\x5b\x2e\x53\xf0\x49\xba\x39\x0c\x98\x35\x11\x59\x95\xbd\x74\xa3\x9d\xaa\xfb\x2e\x39\xe3\x8e\x16\x8c\xd9\x19\x6d\x31\x6c\xf0\x15\xc7\x79\xfb\xbc\x24\x7f\xfe\x04\x00\x00\xff\xff\x0d\x85\xaf\xaf\xeb\x01\x00\x00")

func keysTestAccount1PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount1Pk,
		"keys/test-account1.pk",
	)
}

func keysTestAccount1Pk() (*asset, error) {
	bytes, err := keysTestAccount1PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account1.pk", size: 491, mode: os.FileMode(0644), modTime: time.Unix(1599559877, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x43, 0xc2, 0xf4, 0x8c, 0xc6, 0x64, 0x25, 0x8c, 0x7, 0x8c, 0xa8, 0x89, 0x2b, 0x7b, 0x9b, 0x4f, 0x81, 0xcb, 0xce, 0x3d, 0xef, 0x82, 0x9c, 0x27, 0x27, 0xa9, 0xc5, 0x46, 0x70, 0x30, 0x38}}
	return a, nil
}

var _keysTestAccount2StatusChainPk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xdb\x8a\x1c\x41\x08\x80\xe1\x77\xf1\xba\x1b\x2c\xb5\x8e\x6f\x63\xa9\x45\x86\x3d\x0d\xdd\xc3\x92\xb0\xcc\xbb\x87\xde\x10\xf6\xd2\x8b\xff\x43\xfd\x82\xcf\x38\xce\xdb\xc7\x3b\x0c\xde\xe0\xe6\x30\x60\x9a\x69\xa3\x4c\xfb\x4a\x9a\x76\x59\xa1\xbb\xd6\x25\x3b\x17\x12\x49\x94\x8c\xd0\x60\x03\x75\x3f\xe2\x3c\x61\x00\x61\xd6\xec\x18\x95\xd6\x2a\x19\x6b\x5f\xa6\x73\x8a\x16\x0e\x66\xa7\xa6\x5a\x3c\x16\x5d\x91\x1d\x7f\xee\x8f\x0f\x18\x5f\x60\xb7\xfb\xaf\x38\x1e\xf1\xfb\x01\x03\xa4\xf6\x5c\x3d\x2c\xa8\xba\x4a\x11\x66\x77\xf4\x9c\x27\x77\x5f\x69\x61\xd7\xe0\x1e\x5c\x98\xe6\x42\xed\xc6\xce\x4b\x71\x52\x42\xd1\xa6\x34\x2f\xf9\xdb\xbb\xeb\xa1\x6f\xe7\xe5\xdf\x3e\x61\x80\x75\xae\x91\x7b\x23\x69\xa4\x8e\x3d\x73\x2f\x09\xb5\xf6\x98\xdd\x4a\x15\x78\xfe\x0f\x61\x80\xc6\xb9\x27\x6a\xbb\x3d\x0e\xd8\xe0\xc5\x17\x0c\x38\xbf\x17\xfe\x37\xfe\xd8\xfe\xf2\x1a\xd7\xc3\x68\x83\x53\x5f\xaf\x03\xd8\xb4\x18\xb7\x94\x5b\xc9\x92\x75\x22\x1b\x49\x14\x94\x42\x86\xc9\xc9\x5b\x53\xa9\xc2\x5c\xb4\x7a\x12\xd4\xa6\x4b\x94\x32\x16\x66\xce\x15\x61\x83\x77\x18\x2d\x75\xda\xe0\x80\xd1\x36\xb8\xc3\x48\xcf\x0d\xde\xd4\x60\x00\x56\x47\x67\x6a\xd6\xb1\x36\x2b\xd1\x66\x89\x55\x72\xe5\x54\xa8\xab\x72\x4c\x6a\xd1\x91\x49\x1a\x2f\xa1\x99\x45\xcd\x94\x85\x5c\x22\xb1\x34\x78\x3e\xff\x06\x00\x00\xff\xff\x4e\x39\x80\x7d\xe9\x01\x00\x00")

func keysTestAccount2StatusChainPkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount2StatusChainPk,
		"keys/test-account2-status-chain.pk",
	)
}

func keysTestAccount2StatusChainPk() (*asset, error) {
	bytes, err := keysTestAccount2StatusChainPkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account2-status-chain.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1599559877, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xf8, 0x5c, 0xe9, 0x92, 0x96, 0x2d, 0x88, 0x2b, 0x8e, 0x42, 0x3f, 0xa4, 0x93, 0x6c, 0xad, 0xe9, 0xc0, 0x1b, 0x8a, 0x8, 0x8c, 0x5e, 0x7a, 0x84, 0xa2, 0xf, 0x9f, 0x77, 0x58, 0x2c, 0x2c}}
	return a, nil
}

var _keysTestAccount2Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4d\x8a\x1c\x3d\x0c\x40\xef\xa2\x75\x15\xd8\xb2\x6c\x4b\xde\x7d\x7c\xe4\x20\xb2\x24\x93\x66\xfe\x9a\xaa\x66\x48\x18\xe6\xee\xa1\x7a\x91\x2c\x25\xc4\xd3\x7b\x5f\xa0\xee\x47\x9c\x27\x0c\xf8\x2f\x69\x16\xc4\x8c\x8d\x5d\x8a\x58\x51\xe9\x38\x57\xa5\x96\xfd\xff\x9c\x56\x17\x4e\x3f\x38\x13\x6c\x60\xc7\xef\xfb\xe3\x03\xc6\x17\xd8\xed\xfe\x33\x0e\x18\xa0\x71\xee\x19\x79\xb7\xc7\x71\x1d\x3c\xd7\x8f\xf8\xf5\x80\x01\xac\x2b\xc9\x5c\x9a\x50\x69\xf5\xa8\x2b\x17\x2d\xcc\x33\x8a\x64\xb7\x95\xc4\x6a\x36\xa6\x65\x2c\xc8\x84\x19\x31\x45\xea\xd6\x72\x4b\x84\x75\xf1\x5f\xde\x5d\x0f\x7d\x3b\xaf\xb7\xb7\x4f\x18\xd0\x75\x56\xd1\xa0\x2e\xb9\xf6\x1e\x1d\x3d\x9a\xd7\xe9\xac\x14\x48\xa1\xf0\xbd\xc1\x8b\x2f\x18\x70\x3e\x85\xe1\x39\xfe\x83\xf8\xcb\x6b\xbc\xc3\x28\xb8\xc1\x3b\x0c\x6c\x98\x89\x36\xb8\xc3\xc8\x1b\x1c\x30\x78\x83\x53\x5f\xaf\x00\xec\xd1\x6c\x72\xe4\x10\x4f\xd6\xdb\x9a\x73\x39\x91\x99\x22\xd5\xd2\x92\x2f\xa1\x24\xd3\x4c\xd4\x68\x51\x10\xdb\xa5\x35\xeb\x72\x9e\x49\xfa\x25\xf2\xa6\x76\x29\x2f\xf7\x59\x44\x3a\x7a\xcf\xb8\x26\x8a\x52\x59\x39\x72\xd4\x92\x4a\xe4\xc2\x1e\x26\x66\xa8\x2b\x66\xc2\xda\x82\xb5\xa7\x8a\xae\x54\xa4\x5b\xbb\x48\x37\x87\x01\x93\x51\xba\x4a\xde\x25\x05\xed\x24\x5e\x77\x6d\x4b\x76\xb6\x92\x2a\xf5\xc9\xd1\x14\x36\xf8\x8c\xe3\xbc\x7d\x5c\x91\xdf\x7f\x02\x00\x00\xff\xff\x80\x42\xa2\x5c\xeb\x01\x00\x00")

func keysTestAccount2PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount2Pk,
		"keys/test-account2.pk",
	)
}

func keysTestAccount2Pk() (*asset, error) {
	bytes, err := keysTestAccount2PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account2.pk", size: 491, mode: os.FileMode(0644), modTime: time.Unix(1599559877, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x72, 0xd5, 0x95, 0x5c, 0x5a, 0x99, 0x9d, 0x2f, 0x21, 0x83, 0xd7, 0x10, 0x17, 0x4a, 0x3d, 0x65, 0xc9, 0x26, 0x1a, 0x2c, 0x9d, 0x65, 0x63, 0xd2, 0xa0, 0xfc, 0x7c, 0x0, 0x87, 0x38, 0x9f}}
	return a, nil
}

var _keysTestAccount3BeforeEip55Pk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xdb\x8a\x1c\x31\x0c\x44\xff\x45\xcf\xdd\x20\x4b\xbe\xc8\xfe\x1b\x59\x96\xc8\xb0\xb7\xa1\x7b\x58\x12\x96\xf9\xf7\xd0\x59\xc2\x3e\xd6\x43\x1d\x4e\xd5\x17\x7c\xfa\x71\xde\x3e\xde\x61\xf0\x06\xb7\x05\x03\xd0\x96\xb9\x85\xed\x46\x61\x7b\x26\x4d\xbb\xf8\x2a\x7b\x26\x33\xec\xd4\x16\x2f\x81\x0d\x74\xad\xc3\xcf\x13\x06\xb0\x2e\xce\x5e\xbb\xac\x2c\x58\x35\x16\xca\xe4\xd2\x67\x27\x8c\x62\x75\x56\x9a\x55\xdc\x33\x6c\x60\xc7\x9f\xfb\xe3\x03\xc6\x17\xd8\xed\xfe\xcb\x8f\x87\xff\x7e\xc0\x00\xa2\xd2\xbb\x98\x77\x56\x2d\x93\x5a\x6a\xa5\x60\xc9\x9c\xd2\x52\x31\x6b\x53\xa8\x24\x6a\x2b\x23\x5a\xa7\x16\xca\xc2\x0d\x3d\x27\xa6\x4e\x66\x97\xce\x37\xef\xae\x87\xbe\x9d\x17\xff\xf6\x09\x03\xa4\x27\x6a\xd9\x49\x5b\xa3\xb6\x34\xd9\xd2\xb4\xc8\x6c\x12\xfb\x94\x89\xf0\xfc\x5f\x84\x01\xea\xe7\x9e\x48\x76\x7b\x1c\xb0\xc1\xcb\x0a\x18\x70\xfe\x13\xfe\x8e\x3f\xec\xf5\xf2\xea\xd7\x61\xb4\xc1\xa9\xaf\xd7\x80\x45\x93\x50\xb5\xd5\x2c\x11\xd8\xc9\x98\x51\x1a\x51\xc6\xf0\x5c\x83\xc2\xd8\x53\x66\xa6\xc9\x42\x9a\x05\x25\x6a\xc1\xc9\x56\xa5\x4b\x2d\x13\x36\x78\x87\x21\xa9\xd3\x06\x07\x0c\xd9\xe0\x0e\x23\x3d\x37\x78\x53\xbb\xd4\x10\x33\x63\x13\x89\xd5\x66\xa0\x93\xbb\xd7\x48\x5c\x4a\xcb\xa5\x27\x8e\xe2\x14\x25\x65\xaa\x1a\x9d\x58\x8a\x22\xba\x9b\xa6\x28\xd6\x98\x12\x3c\x9f\x7f\x03\x00\x00\xff\xff\x4c\x6d\xd5\xbe\xe9\x01\x00\x00")

func keysTestAccount3BeforeEip55PkBytes() ([]byte, error) {
	return bindataRead(
		_keysTestAccount3BeforeEip55Pk,
		"keys/test-account3-before-eip55.pk",
	)
}

func keysTestAccount3BeforeEip55Pk() (*asset, error) {
	bytes, err := keysTestAccount3BeforeEip55PkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/test-account3-before-eip55.pk", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1599559877, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x40, 0x56, 0xc1, 0x5e, 0x10, 0x6e, 0x28, 0x15, 0x3, 0x4e, 0xc4, 0xc4, 0x71, 0x4d, 0x16, 0x99, 0xcc, 0x1b, 0x63, 0xee, 0x10, 0x20, 0xe4, 0x59, 0x52, 0x3f, 0xc0, 0xad, 0x15, 0x13, 0x72}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../config/README.md": ConfigReadmeMd,

	"../config/cli/fleet-eth.prod.json": ConfigCliFleetEthProdJson,

	"../config/cli/fleet-eth.staging.json": ConfigCliFleetEthStagingJson,

	"../config/cli/fleet-eth.test.json": ConfigCliFleetEthTestJson,

	"../config/cli/les-enabled.json": ConfigCliLesEnabledJson,

	"../config/cli/mailserver-enabled.json": ConfigCliMailserverEnabledJson,

	"../config/status-chain-genesis.json": ConfigStatusChainGenesisJson,

	"keys/bootnode.key": keysBootnodeKey,

	"keys/firebaseauthkey": keysFirebaseauthkey,

	"keys/test-account1-status-chain.pk": keysTestAccount1StatusChainPk,

	"keys/test-account1.pk": keysTestAccount1Pk,

	"keys/test-account2-status-chain.pk": keysTestAccount2StatusChainPk,

	"keys/test-account2.pk": keysTestAccount2Pk,

	"keys/test-account3-before-eip55.pk": keysTestAccount3BeforeEip55Pk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"README.md": &bintree{ConfigReadmeMd, map[string]*bintree{}},
			"cli": &bintree{nil, map[string]*bintree{
				"fleet-eth.prod.json":     &bintree{ConfigCliFleetEthProdJson, map[string]*bintree{}},
				"fleet-eth.staging.json":  &bintree{ConfigCliFleetEthStagingJson, map[string]*bintree{}},
				"fleet-eth.test.json":     &bintree{ConfigCliFleetEthTestJson, map[string]*bintree{}},
				"les-enabled.json":        &bintree{ConfigCliLesEnabledJson, map[string]*bintree{}},
				"mailserver-enabled.json": &bintree{ConfigCliMailserverEnabledJson, map[string]*bintree{}},
			}},
			"status-chain-genesis.json": &bintree{ConfigStatusChainGenesisJson, map[string]*bintree{}},
		}},
	}},
	"keys": &bintree{nil, map[string]*bintree{
		"bootnode.key":                  &bintree{keysBootnodeKey, map[string]*bintree{}},
		"firebaseauthkey":               &bintree{keysFirebaseauthkey, map[string]*bintree{}},
		"test-account1-status-chain.pk": &bintree{keysTestAccount1StatusChainPk, map[string]*bintree{}},
		"test-account1.pk":              &bintree{keysTestAccount1Pk, map[string]*bintree{}},
		"test-account2-status-chain.pk": &bintree{keysTestAccount2StatusChainPk, map[string]*bintree{}},
		"test-account2.pk":              &bintree{keysTestAccount2Pk, map[string]*bintree{}},
		"test-account3-before-eip55.pk": &bintree{keysTestAccount3BeforeEip55Pk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
