// Code generated by MockGen. DO NOT EDIT.
// Source: geth/notification/client_interface.go

// Package notification is a generated GoMock package.
package notification

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddDevices mocks base method
func (m *MockClient) AddDevices(deviceIDs []string, body interface{}) {
	m.ctrl.Call(m, "AddDevices", deviceIDs, body)
}

// AddDevices indicates an expected call of AddDevices
func (mr *MockClientMockRecorder) AddDevices(deviceIDs, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDevices", reflect.TypeOf((*MockClient)(nil).AddDevices), deviceIDs, body)
}

// Send mocks base method
func (m *MockClient) Send(payload *Payload) (*Response, error) {
	ret := m.ctrl.Call(m, "Send", payload)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockClientMockRecorder) Send(payload interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), payload)
}
