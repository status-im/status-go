// Code generated by MockGen. DO NOT EDIT.
// Source: geth/mailservice/mailservice.go

// Package mailservice is a generated GoMock package.
package mailservice

import (
	p2p "github.com/ethereum/go-ethereum/p2p"
	whisperv5 "github.com/ethereum/go-ethereum/whisper/whisperv5"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServiceProvider is a mock of ServiceProvider interface
type MockServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProviderMockRecorder
}

// MockServiceProviderMockRecorder is the mock recorder for MockServiceProvider
type MockServiceProviderMockRecorder struct {
	mock *MockServiceProvider
}

// NewMockServiceProvider creates a new mock instance
func NewMockServiceProvider(ctrl *gomock.Controller) *MockServiceProvider {
	mock := &MockServiceProvider{ctrl: ctrl}
	mock.recorder = &MockServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProvider) EXPECT() *MockServiceProviderMockRecorder {
	return m.recorder
}

// Server mocks base method
func (m *MockServiceProvider) Server() (*p2p.Server, error) {
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(*p2p.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Server indicates an expected call of Server
func (mr *MockServiceProviderMockRecorder) Server() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockServiceProvider)(nil).Server))
}

// WhisperService mocks base method
func (m *MockServiceProvider) WhisperService() (*whisperv5.Whisper, error) {
	ret := m.ctrl.Call(m, "WhisperService")
	ret0, _ := ret[0].(*whisperv5.Whisper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhisperService indicates an expected call of WhisperService
func (mr *MockServiceProviderMockRecorder) WhisperService() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhisperService", reflect.TypeOf((*MockServiceProvider)(nil).WhisperService))
}
