// Code generated by MockGen. DO NOT EDIT.
// Source: geth/common/services/whisper.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	ecdsa "crypto/ecdsa"
	hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	p2p "github.com/ethereum/go-ethereum/p2p"
	rpc "github.com/ethereum/go-ethereum/rpc"
	whisperv5 "github.com/ethereum/go-ethereum/whisper/whisperv5"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWhisper is a mock of Whisper interface
type MockWhisper struct {
	ctrl     *gomock.Controller
	recorder *MockWhisperMockRecorder
}

// MockWhisperMockRecorder is the mock recorder for MockWhisper
type MockWhisperMockRecorder struct {
	mock *MockWhisper
}

// NewMockWhisper creates a new mock instance
func NewMockWhisper(ctrl *gomock.Controller) *MockWhisper {
	mock := &MockWhisper{ctrl: ctrl}
	mock.recorder = &MockWhisperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWhisper) EXPECT() *MockWhisperMockRecorder {
	return m.recorder
}

// MinPow mocks base method
func (m *MockWhisper) MinPow() float64 {
	ret := m.ctrl.Call(m, "MinPow")
	ret0, _ := ret[0].(float64)
	return ret0
}

// MinPow indicates an expected call of MinPow
func (mr *MockWhisperMockRecorder) MinPow() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinPow", reflect.TypeOf((*MockWhisper)(nil).MinPow))
}

// MaxMessageSize mocks base method
func (m *MockWhisper) MaxMessageSize() uint32 {
	ret := m.ctrl.Call(m, "MaxMessageSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// MaxMessageSize indicates an expected call of MaxMessageSize
func (mr *MockWhisperMockRecorder) MaxMessageSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxMessageSize", reflect.TypeOf((*MockWhisper)(nil).MaxMessageSize))
}

// Overflow mocks base method
func (m *MockWhisper) Overflow() bool {
	ret := m.ctrl.Call(m, "Overflow")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Overflow indicates an expected call of Overflow
func (mr *MockWhisperMockRecorder) Overflow() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Overflow", reflect.TypeOf((*MockWhisper)(nil).Overflow))
}

// APIs mocks base method
func (m *MockWhisper) APIs() []rpc.API {
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs
func (mr *MockWhisperMockRecorder) APIs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockWhisper)(nil).APIs))
}

// RegisterServer mocks base method
func (m *MockWhisper) RegisterServer(server whisperv5.MailServer) {
	m.ctrl.Call(m, "RegisterServer", server)
}

// RegisterServer indicates an expected call of RegisterServer
func (mr *MockWhisperMockRecorder) RegisterServer(server interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterServer", reflect.TypeOf((*MockWhisper)(nil).RegisterServer), server)
}

// RegisterNotificationServer mocks base method
func (m *MockWhisper) RegisterNotificationServer(server whisperv5.NotificationServer) {
	m.ctrl.Call(m, "RegisterNotificationServer", server)
}

// RegisterNotificationServer indicates an expected call of RegisterNotificationServer
func (mr *MockWhisperMockRecorder) RegisterNotificationServer(server interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNotificationServer", reflect.TypeOf((*MockWhisper)(nil).RegisterNotificationServer), server)
}

// Protocols mocks base method
func (m *MockWhisper) Protocols() []p2p.Protocol {
	ret := m.ctrl.Call(m, "Protocols")
	ret0, _ := ret[0].([]p2p.Protocol)
	return ret0
}

// Protocols indicates an expected call of Protocols
func (mr *MockWhisperMockRecorder) Protocols() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocols", reflect.TypeOf((*MockWhisper)(nil).Protocols))
}

// Version mocks base method
func (m *MockWhisper) Version() uint {
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(uint)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockWhisperMockRecorder) Version() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockWhisper)(nil).Version))
}

// SetMaxMessageSize mocks base method
func (m *MockWhisper) SetMaxMessageSize(size uint32) error {
	ret := m.ctrl.Call(m, "SetMaxMessageSize", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaxMessageSize indicates an expected call of SetMaxMessageSize
func (mr *MockWhisperMockRecorder) SetMaxMessageSize(size interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxMessageSize", reflect.TypeOf((*MockWhisper)(nil).SetMaxMessageSize), size)
}

// SetMinimumPoW mocks base method
func (m *MockWhisper) SetMinimumPoW(val float64) error {
	ret := m.ctrl.Call(m, "SetMinimumPoW", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMinimumPoW indicates an expected call of SetMinimumPoW
func (mr *MockWhisperMockRecorder) SetMinimumPoW(val interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMinimumPoW", reflect.TypeOf((*MockWhisper)(nil).SetMinimumPoW), val)
}

// AllowP2PMessagesFromPeer mocks base method
func (m *MockWhisper) AllowP2PMessagesFromPeer(peerID []byte) error {
	ret := m.ctrl.Call(m, "AllowP2PMessagesFromPeer", peerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllowP2PMessagesFromPeer indicates an expected call of AllowP2PMessagesFromPeer
func (mr *MockWhisperMockRecorder) AllowP2PMessagesFromPeer(peerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowP2PMessagesFromPeer", reflect.TypeOf((*MockWhisper)(nil).AllowP2PMessagesFromPeer), peerID)
}

// RequestHistoricMessages mocks base method
func (m *MockWhisper) RequestHistoricMessages(peerID []byte, envelope *whisperv5.Envelope) error {
	ret := m.ctrl.Call(m, "RequestHistoricMessages", peerID, envelope)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestHistoricMessages indicates an expected call of RequestHistoricMessages
func (mr *MockWhisperMockRecorder) RequestHistoricMessages(peerID, envelope interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHistoricMessages", reflect.TypeOf((*MockWhisper)(nil).RequestHistoricMessages), peerID, envelope)
}

// SendP2PMessage mocks base method
func (m *MockWhisper) SendP2PMessage(peerID []byte, envelope *whisperv5.Envelope) error {
	ret := m.ctrl.Call(m, "SendP2PMessage", peerID, envelope)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendP2PMessage indicates an expected call of SendP2PMessage
func (mr *MockWhisperMockRecorder) SendP2PMessage(peerID, envelope interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendP2PMessage", reflect.TypeOf((*MockWhisper)(nil).SendP2PMessage), peerID, envelope)
}

// SendP2PDirect mocks base method
func (m *MockWhisper) SendP2PDirect(peer *whisperv5.Peer, envelope *whisperv5.Envelope) error {
	ret := m.ctrl.Call(m, "SendP2PDirect", peer, envelope)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendP2PDirect indicates an expected call of SendP2PDirect
func (mr *MockWhisperMockRecorder) SendP2PDirect(peer, envelope interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendP2PDirect", reflect.TypeOf((*MockWhisper)(nil).SendP2PDirect), peer, envelope)
}

// NewKeyPair mocks base method
func (m *MockWhisper) NewKeyPair() (string, error) {
	ret := m.ctrl.Call(m, "NewKeyPair")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewKeyPair indicates an expected call of NewKeyPair
func (mr *MockWhisperMockRecorder) NewKeyPair() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewKeyPair", reflect.TypeOf((*MockWhisper)(nil).NewKeyPair))
}

// AddKeyPair mocks base method
func (m *MockWhisper) AddKeyPair(key *ecdsa.PrivateKey) (string, error) {
	ret := m.ctrl.Call(m, "AddKeyPair", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddKeyPair indicates an expected call of AddKeyPair
func (mr *MockWhisperMockRecorder) AddKeyPair(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKeyPair", reflect.TypeOf((*MockWhisper)(nil).AddKeyPair), key)
}

// SelectKeyPair mocks base method
func (m *MockWhisper) SelectKeyPair(key *ecdsa.PrivateKey) error {
	ret := m.ctrl.Call(m, "SelectKeyPair", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectKeyPair indicates an expected call of SelectKeyPair
func (mr *MockWhisperMockRecorder) SelectKeyPair(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectKeyPair", reflect.TypeOf((*MockWhisper)(nil).SelectKeyPair), key)
}

// DeleteKeyPairs mocks base method
func (m *MockWhisper) DeleteKeyPairs() error {
	ret := m.ctrl.Call(m, "DeleteKeyPairs")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyPairs indicates an expected call of DeleteKeyPairs
func (mr *MockWhisperMockRecorder) DeleteKeyPairs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPairs", reflect.TypeOf((*MockWhisper)(nil).DeleteKeyPairs))
}

// DeleteKeyPair mocks base method
func (m *MockWhisper) DeleteKeyPair(id string) bool {
	ret := m.ctrl.Call(m, "DeleteKeyPair", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteKeyPair indicates an expected call of DeleteKeyPair
func (mr *MockWhisperMockRecorder) DeleteKeyPair(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPair", reflect.TypeOf((*MockWhisper)(nil).DeleteKeyPair), id)
}

// HasKeyPair mocks base method
func (m *MockWhisper) HasKeyPair(id string) bool {
	ret := m.ctrl.Call(m, "HasKeyPair", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasKeyPair indicates an expected call of HasKeyPair
func (mr *MockWhisperMockRecorder) HasKeyPair(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasKeyPair", reflect.TypeOf((*MockWhisper)(nil).HasKeyPair), id)
}

// GetPrivateKey mocks base method
func (m *MockWhisper) GetPrivateKey(id string) (*ecdsa.PrivateKey, error) {
	ret := m.ctrl.Call(m, "GetPrivateKey", id)
	ret0, _ := ret[0].(*ecdsa.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateKey indicates an expected call of GetPrivateKey
func (mr *MockWhisperMockRecorder) GetPrivateKey(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockWhisper)(nil).GetPrivateKey), id)
}

// GenerateSymKey mocks base method
func (m *MockWhisper) GenerateSymKey() (string, error) {
	ret := m.ctrl.Call(m, "GenerateSymKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSymKey indicates an expected call of GenerateSymKey
func (mr *MockWhisperMockRecorder) GenerateSymKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSymKey", reflect.TypeOf((*MockWhisper)(nil).GenerateSymKey))
}

// AddSymKey mocks base method
func (m *MockWhisper) AddSymKey(id string, key []byte) (string, error) {
	ret := m.ctrl.Call(m, "AddSymKey", id, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSymKey indicates an expected call of AddSymKey
func (mr *MockWhisperMockRecorder) AddSymKey(id, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSymKey", reflect.TypeOf((*MockWhisper)(nil).AddSymKey), id, key)
}

// AddSymKeyDirect mocks base method
func (m *MockWhisper) AddSymKeyDirect(key []byte) (string, error) {
	ret := m.ctrl.Call(m, "AddSymKeyDirect", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSymKeyDirect indicates an expected call of AddSymKeyDirect
func (mr *MockWhisperMockRecorder) AddSymKeyDirect(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSymKeyDirect", reflect.TypeOf((*MockWhisper)(nil).AddSymKeyDirect), key)
}

// AddSymKeyFromPassword mocks base method
func (m *MockWhisper) AddSymKeyFromPassword(password string) (string, error) {
	ret := m.ctrl.Call(m, "AddSymKeyFromPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSymKeyFromPassword indicates an expected call of AddSymKeyFromPassword
func (mr *MockWhisperMockRecorder) AddSymKeyFromPassword(password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSymKeyFromPassword", reflect.TypeOf((*MockWhisper)(nil).AddSymKeyFromPassword), password)
}

// HasSymKey mocks base method
func (m *MockWhisper) HasSymKey(id string) bool {
	ret := m.ctrl.Call(m, "HasSymKey", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSymKey indicates an expected call of HasSymKey
func (mr *MockWhisperMockRecorder) HasSymKey(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSymKey", reflect.TypeOf((*MockWhisper)(nil).HasSymKey), id)
}

// DeleteSymKey mocks base method
func (m *MockWhisper) DeleteSymKey(id string) bool {
	ret := m.ctrl.Call(m, "DeleteSymKey", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteSymKey indicates an expected call of DeleteSymKey
func (mr *MockWhisperMockRecorder) DeleteSymKey(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSymKey", reflect.TypeOf((*MockWhisper)(nil).DeleteSymKey), id)
}

// GetSymKey mocks base method
func (m *MockWhisper) GetSymKey(id string) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetSymKey", id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymKey indicates an expected call of GetSymKey
func (mr *MockWhisperMockRecorder) GetSymKey(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymKey", reflect.TypeOf((*MockWhisper)(nil).GetSymKey), id)
}

// Subscribe mocks base method
func (m *MockWhisper) Subscribe(f *whisperv5.Filter) (string, error) {
	ret := m.ctrl.Call(m, "Subscribe", f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockWhisperMockRecorder) Subscribe(f interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWhisper)(nil).Subscribe), f)
}

// GetFilter mocks base method
func (m *MockWhisper) GetFilter(id string) *whisperv5.Filter {
	ret := m.ctrl.Call(m, "GetFilter", id)
	ret0, _ := ret[0].(*whisperv5.Filter)
	return ret0
}

// GetFilter indicates an expected call of GetFilter
func (mr *MockWhisperMockRecorder) GetFilter(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilter", reflect.TypeOf((*MockWhisper)(nil).GetFilter), id)
}

// Unsubscribe mocks base method
func (m *MockWhisper) Unsubscribe(id string) error {
	ret := m.ctrl.Call(m, "Unsubscribe", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockWhisperMockRecorder) Unsubscribe(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockWhisper)(nil).Unsubscribe), id)
}

// Send mocks base method
func (m *MockWhisper) Send(envelope *whisperv5.Envelope) error {
	ret := m.ctrl.Call(m, "Send", envelope)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockWhisperMockRecorder) Send(envelope interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWhisper)(nil).Send), envelope)
}

// Start mocks base method
func (m *MockWhisper) Start(stack *p2p.Server) error {
	ret := m.ctrl.Call(m, "Start", stack)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockWhisperMockRecorder) Start(stack interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWhisper)(nil).Start), stack)
}

// Stop mocks base method
func (m *MockWhisper) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockWhisperMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWhisper)(nil).Stop))
}

// HandlePeer mocks base method
func (m *MockWhisper) HandlePeer(peer *p2p.Peer, rw p2p.MsgReadWriter) error {
	ret := m.ctrl.Call(m, "HandlePeer", peer, rw)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePeer indicates an expected call of HandlePeer
func (mr *MockWhisperMockRecorder) HandlePeer(peer, rw interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePeer", reflect.TypeOf((*MockWhisper)(nil).HandlePeer), peer, rw)
}

// Stats mocks base method
func (m *MockWhisper) Stats() whisperv5.Statistics {
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(whisperv5.Statistics)
	return ret0
}

// Stats indicates an expected call of Stats
func (mr *MockWhisperMockRecorder) Stats() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockWhisper)(nil).Stats))
}

// Envelopes mocks base method
func (m *MockWhisper) Envelopes() []*whisperv5.Envelope {
	ret := m.ctrl.Call(m, "Envelopes")
	ret0, _ := ret[0].([]*whisperv5.Envelope)
	return ret0
}

// Envelopes indicates an expected call of Envelopes
func (mr *MockWhisperMockRecorder) Envelopes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Envelopes", reflect.TypeOf((*MockWhisper)(nil).Envelopes))
}

// Messages mocks base method
func (m *MockWhisper) Messages(id string) []*whisperv5.ReceivedMessage {
	ret := m.ctrl.Call(m, "Messages", id)
	ret0, _ := ret[0].([]*whisperv5.ReceivedMessage)
	return ret0
}

// Messages indicates an expected call of Messages
func (mr *MockWhisperMockRecorder) Messages(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockWhisper)(nil).Messages), id)
}

// MockWhisperAPI is a mock of WhisperAPI interface
type MockWhisperAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWhisperAPIMockRecorder
}

// MockWhisperAPIMockRecorder is the mock recorder for MockWhisperAPI
type MockWhisperAPIMockRecorder struct {
	mock *MockWhisperAPI
}

// NewMockWhisperAPI creates a new mock instance
func NewMockWhisperAPI(ctrl *gomock.Controller) *MockWhisperAPI {
	mock := &MockWhisperAPI{ctrl: ctrl}
	mock.recorder = &MockWhisperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWhisperAPI) EXPECT() *MockWhisperAPIMockRecorder {
	return m.recorder
}

// Version mocks base method
func (m *MockWhisperAPI) Version(ctx context.Context) string {
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockWhisperAPIMockRecorder) Version(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockWhisperAPI)(nil).Version), ctx)
}

// Info mocks base method
func (m *MockWhisperAPI) Info(ctx context.Context) whisperv5.Info {
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(whisperv5.Info)
	return ret0
}

// Info indicates an expected call of Info
func (mr *MockWhisperAPIMockRecorder) Info(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockWhisperAPI)(nil).Info), ctx)
}

// SetMaxMessageSize mocks base method
func (m *MockWhisperAPI) SetMaxMessageSize(ctx context.Context, size uint32) (bool, error) {
	ret := m.ctrl.Call(m, "SetMaxMessageSize", ctx, size)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMaxMessageSize indicates an expected call of SetMaxMessageSize
func (mr *MockWhisperAPIMockRecorder) SetMaxMessageSize(ctx, size interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxMessageSize", reflect.TypeOf((*MockWhisperAPI)(nil).SetMaxMessageSize), ctx, size)
}

// SetMinPoW mocks base method
func (m *MockWhisperAPI) SetMinPoW(ctx context.Context, pow float64) (bool, error) {
	ret := m.ctrl.Call(m, "SetMinPoW", ctx, pow)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMinPoW indicates an expected call of SetMinPoW
func (mr *MockWhisperAPIMockRecorder) SetMinPoW(ctx, pow interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMinPoW", reflect.TypeOf((*MockWhisperAPI)(nil).SetMinPoW), ctx, pow)
}

// MarkTrustedPeer mocks base method
func (m *MockWhisperAPI) MarkTrustedPeer(ctx context.Context, enode string) (bool, error) {
	ret := m.ctrl.Call(m, "MarkTrustedPeer", ctx, enode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkTrustedPeer indicates an expected call of MarkTrustedPeer
func (mr *MockWhisperAPIMockRecorder) MarkTrustedPeer(ctx, enode interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTrustedPeer", reflect.TypeOf((*MockWhisperAPI)(nil).MarkTrustedPeer), ctx, enode)
}

// NewKeyPair mocks base method
func (m *MockWhisperAPI) NewKeyPair(ctx context.Context) (string, error) {
	ret := m.ctrl.Call(m, "NewKeyPair", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewKeyPair indicates an expected call of NewKeyPair
func (mr *MockWhisperAPIMockRecorder) NewKeyPair(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewKeyPair", reflect.TypeOf((*MockWhisperAPI)(nil).NewKeyPair), ctx)
}

// AddPrivateKey mocks base method
func (m *MockWhisperAPI) AddPrivateKey(ctx context.Context, privateKey hexutil.Bytes) (string, error) {
	ret := m.ctrl.Call(m, "AddPrivateKey", ctx, privateKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPrivateKey indicates an expected call of AddPrivateKey
func (mr *MockWhisperAPIMockRecorder) AddPrivateKey(ctx, privateKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrivateKey", reflect.TypeOf((*MockWhisperAPI)(nil).AddPrivateKey), ctx, privateKey)
}

// DeleteKeyPair mocks base method
func (m *MockWhisperAPI) DeleteKeyPair(ctx context.Context, key string) (bool, error) {
	ret := m.ctrl.Call(m, "DeleteKeyPair", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyPair indicates an expected call of DeleteKeyPair
func (mr *MockWhisperAPIMockRecorder) DeleteKeyPair(ctx, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPair", reflect.TypeOf((*MockWhisperAPI)(nil).DeleteKeyPair), ctx, key)
}

// HasKeyPair mocks base method
func (m *MockWhisperAPI) HasKeyPair(ctx context.Context, id string) bool {
	ret := m.ctrl.Call(m, "HasKeyPair", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasKeyPair indicates an expected call of HasKeyPair
func (mr *MockWhisperAPIMockRecorder) HasKeyPair(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasKeyPair", reflect.TypeOf((*MockWhisperAPI)(nil).HasKeyPair), ctx, id)
}

// GetPublicKey mocks base method
func (m *MockWhisperAPI) GetPublicKey(ctx context.Context, id string) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetPublicKey", ctx, id)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockWhisperAPIMockRecorder) GetPublicKey(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockWhisperAPI)(nil).GetPublicKey), ctx, id)
}

// GetPrivateKey mocks base method
func (m *MockWhisperAPI) GetPrivateKey(ctx context.Context, id string) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetPrivateKey", ctx, id)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateKey indicates an expected call of GetPrivateKey
func (mr *MockWhisperAPIMockRecorder) GetPrivateKey(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockWhisperAPI)(nil).GetPrivateKey), ctx, id)
}

// NewSymKey mocks base method
func (m *MockWhisperAPI) NewSymKey(ctx context.Context) (string, error) {
	ret := m.ctrl.Call(m, "NewSymKey", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSymKey indicates an expected call of NewSymKey
func (mr *MockWhisperAPIMockRecorder) NewSymKey(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSymKey", reflect.TypeOf((*MockWhisperAPI)(nil).NewSymKey), ctx)
}

// AddSymKey mocks base method
func (m *MockWhisperAPI) AddSymKey(ctx context.Context, key hexutil.Bytes) (string, error) {
	ret := m.ctrl.Call(m, "AddSymKey", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSymKey indicates an expected call of AddSymKey
func (mr *MockWhisperAPIMockRecorder) AddSymKey(ctx, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSymKey", reflect.TypeOf((*MockWhisperAPI)(nil).AddSymKey), ctx, key)
}

// GenerateSymKeyFromPassword mocks base method
func (m *MockWhisperAPI) GenerateSymKeyFromPassword(ctx context.Context, passwd string) (string, error) {
	ret := m.ctrl.Call(m, "GenerateSymKeyFromPassword", ctx, passwd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSymKeyFromPassword indicates an expected call of GenerateSymKeyFromPassword
func (mr *MockWhisperAPIMockRecorder) GenerateSymKeyFromPassword(ctx, passwd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSymKeyFromPassword", reflect.TypeOf((*MockWhisperAPI)(nil).GenerateSymKeyFromPassword), ctx, passwd)
}

// HasSymKey mocks base method
func (m *MockWhisperAPI) HasSymKey(ctx context.Context, id string) bool {
	ret := m.ctrl.Call(m, "HasSymKey", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSymKey indicates an expected call of HasSymKey
func (mr *MockWhisperAPIMockRecorder) HasSymKey(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSymKey", reflect.TypeOf((*MockWhisperAPI)(nil).HasSymKey), ctx, id)
}

// GetSymKey mocks base method
func (m *MockWhisperAPI) GetSymKey(ctx context.Context, id string) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetSymKey", ctx, id)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymKey indicates an expected call of GetSymKey
func (mr *MockWhisperAPIMockRecorder) GetSymKey(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymKey", reflect.TypeOf((*MockWhisperAPI)(nil).GetSymKey), ctx, id)
}

// DeleteSymKey mocks base method
func (m *MockWhisperAPI) DeleteSymKey(ctx context.Context, id string) bool {
	ret := m.ctrl.Call(m, "DeleteSymKey", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteSymKey indicates an expected call of DeleteSymKey
func (mr *MockWhisperAPIMockRecorder) DeleteSymKey(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSymKey", reflect.TypeOf((*MockWhisperAPI)(nil).DeleteSymKey), ctx, id)
}

// Post mocks base method
func (m *MockWhisperAPI) Post(ctx context.Context, req whisperv5.NewMessage) (bool, error) {
	ret := m.ctrl.Call(m, "Post", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockWhisperAPIMockRecorder) Post(ctx, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockWhisperAPI)(nil).Post), ctx, req)
}

// UninstallFilter mocks base method
func (m *MockWhisperAPI) UninstallFilter(id string) {
	m.ctrl.Call(m, "UninstallFilter", id)
}

// UninstallFilter indicates an expected call of UninstallFilter
func (mr *MockWhisperAPIMockRecorder) UninstallFilter(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallFilter", reflect.TypeOf((*MockWhisperAPI)(nil).UninstallFilter), id)
}

// Unsubscribe mocks base method
func (m *MockWhisperAPI) Unsubscribe(id string) {
	m.ctrl.Call(m, "Unsubscribe", id)
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockWhisperAPIMockRecorder) Unsubscribe(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockWhisperAPI)(nil).Unsubscribe), id)
}

// Messages mocks base method
func (m *MockWhisperAPI) Messages(ctx context.Context, crit whisperv5.Criteria) (*rpc.Subscription, error) {
	ret := m.ctrl.Call(m, "Messages", ctx, crit)
	ret0, _ := ret[0].(*rpc.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Messages indicates an expected call of Messages
func (mr *MockWhisperAPIMockRecorder) Messages(ctx, crit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockWhisperAPI)(nil).Messages), ctx, crit)
}

// GetFilterMessages mocks base method
func (m *MockWhisperAPI) GetFilterMessages(id string) ([]*whisperv5.Message, error) {
	ret := m.ctrl.Call(m, "GetFilterMessages", id)
	ret0, _ := ret[0].([]*whisperv5.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilterMessages indicates an expected call of GetFilterMessages
func (mr *MockWhisperAPIMockRecorder) GetFilterMessages(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilterMessages", reflect.TypeOf((*MockWhisperAPI)(nil).GetFilterMessages), id)
}

// DeleteMessageFilter mocks base method
func (m *MockWhisperAPI) DeleteMessageFilter(id string) (bool, error) {
	ret := m.ctrl.Call(m, "DeleteMessageFilter", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessageFilter indicates an expected call of DeleteMessageFilter
func (mr *MockWhisperAPIMockRecorder) DeleteMessageFilter(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageFilter", reflect.TypeOf((*MockWhisperAPI)(nil).DeleteMessageFilter), id)
}

// NewMessageFilter mocks base method
func (m *MockWhisperAPI) NewMessageFilter(req whisperv5.Criteria) (string, error) {
	ret := m.ctrl.Call(m, "NewMessageFilter", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMessageFilter indicates an expected call of NewMessageFilter
func (mr *MockWhisperAPIMockRecorder) NewMessageFilter(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageFilter", reflect.TypeOf((*MockWhisperAPI)(nil).NewMessageFilter), req)
}
