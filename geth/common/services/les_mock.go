// Code generated by MockGen. DO NOT EDIT.
// Source: geth/common/services/les.go

// Package services is a generated GoMock package.
package services

import (
	consensus "github.com/ethereum/go-ethereum/consensus"
	types "github.com/ethereum/go-ethereum/core/types"
	downloader "github.com/ethereum/go-ethereum/eth/downloader"
	event "github.com/ethereum/go-ethereum/event"
	light "github.com/ethereum/go-ethereum/light"
	p2p "github.com/ethereum/go-ethereum/p2p"
	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLesService is a mock of LesService interface
type MockLesService struct {
	ctrl     *gomock.Controller
	recorder *MockLesServiceMockRecorder
}

// MockLesServiceMockRecorder is the mock recorder for MockLesService
type MockLesServiceMockRecorder struct {
	mock *MockLesService
}

// NewMockLesService creates a new mock instance
func NewMockLesService(ctrl *gomock.Controller) *MockLesService {
	mock := &MockLesService{ctrl: ctrl}
	mock.recorder = &MockLesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLesService) EXPECT() *MockLesServiceMockRecorder {
	return m.recorder
}

// APIs mocks base method
func (m *MockLesService) APIs() []rpc.API {
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs
func (mr *MockLesServiceMockRecorder) APIs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockLesService)(nil).APIs))
}

// ResetWithGenesisBlock mocks base method
func (m *MockLesService) ResetWithGenesisBlock(arg0 *types.Block) {
	m.ctrl.Call(m, "ResetWithGenesisBlock", arg0)
}

// ResetWithGenesisBlock indicates an expected call of ResetWithGenesisBlock
func (mr *MockLesServiceMockRecorder) ResetWithGenesisBlock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetWithGenesisBlock", reflect.TypeOf((*MockLesService)(nil).ResetWithGenesisBlock), arg0)
}

// BlockChain mocks base method
func (m *MockLesService) BlockChain() *light.LightChain {
	ret := m.ctrl.Call(m, "BlockChain")
	ret0, _ := ret[0].(*light.LightChain)
	return ret0
}

// BlockChain indicates an expected call of BlockChain
func (mr *MockLesServiceMockRecorder) BlockChain() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockChain", reflect.TypeOf((*MockLesService)(nil).BlockChain))
}

// TxPool mocks base method
func (m *MockLesService) TxPool() *light.TxPool {
	ret := m.ctrl.Call(m, "TxPool")
	ret0, _ := ret[0].(*light.TxPool)
	return ret0
}

// TxPool indicates an expected call of TxPool
func (mr *MockLesServiceMockRecorder) TxPool() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPool", reflect.TypeOf((*MockLesService)(nil).TxPool))
}

// Engine mocks base method
func (m *MockLesService) Engine() consensus.Engine {
	ret := m.ctrl.Call(m, "Engine")
	ret0, _ := ret[0].(consensus.Engine)
	return ret0
}

// Engine indicates an expected call of Engine
func (mr *MockLesServiceMockRecorder) Engine() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Engine", reflect.TypeOf((*MockLesService)(nil).Engine))
}

// LesVersion mocks base method
func (m *MockLesService) LesVersion() int {
	ret := m.ctrl.Call(m, "LesVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// LesVersion indicates an expected call of LesVersion
func (mr *MockLesServiceMockRecorder) LesVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LesVersion", reflect.TypeOf((*MockLesService)(nil).LesVersion))
}

// Downloader mocks base method
func (m *MockLesService) Downloader() *downloader.Downloader {
	ret := m.ctrl.Call(m, "Downloader")
	ret0, _ := ret[0].(*downloader.Downloader)
	return ret0
}

// Downloader indicates an expected call of Downloader
func (mr *MockLesServiceMockRecorder) Downloader() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Downloader", reflect.TypeOf((*MockLesService)(nil).Downloader))
}

// EventMux mocks base method
func (m *MockLesService) EventMux() *event.TypeMux {
	ret := m.ctrl.Call(m, "EventMux")
	ret0, _ := ret[0].(*event.TypeMux)
	return ret0
}

// EventMux indicates an expected call of EventMux
func (mr *MockLesServiceMockRecorder) EventMux() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventMux", reflect.TypeOf((*MockLesService)(nil).EventMux))
}

// Protocols mocks base method
func (m *MockLesService) Protocols() []p2p.Protocol {
	ret := m.ctrl.Call(m, "Protocols")
	ret0, _ := ret[0].([]p2p.Protocol)
	return ret0
}

// Protocols indicates an expected call of Protocols
func (mr *MockLesServiceMockRecorder) Protocols() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocols", reflect.TypeOf((*MockLesService)(nil).Protocols))
}

// Start mocks base method
func (m *MockLesService) Start(arg0 *p2p.Server) error {
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockLesServiceMockRecorder) Start(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLesService)(nil).Start), arg0)
}

// Stop mocks base method
func (m *MockLesService) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockLesServiceMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockLesService)(nil).Stop))
}

// WriteTrustedCht mocks base method
func (m *MockLesService) WriteTrustedCht(arg0 light.TrustedCht) {
	m.ctrl.Call(m, "WriteTrustedCht", arg0)
}

// WriteTrustedCht indicates an expected call of WriteTrustedCht
func (mr *MockLesServiceMockRecorder) WriteTrustedCht(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTrustedCht", reflect.TypeOf((*MockLesService)(nil).WriteTrustedCht), arg0)
}
