// Code generated by MockGen. DO NOT EDIT.
// Source: geth/common/geth/rpc_client.go

// Package geth is a generated GoMock package.
package geth

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	rpc "github.com/status-im/status-go/geth/rpc"
	reflect "reflect"
)

// MockRPCClient is a mock of RPCClient interface
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockRPCClient) Call(result interface{}, method string, args ...interface{}) error {
	varargs := []interface{}{result, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call
func (mr *MockRPCClientMockRecorder) Call(result, method interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{result, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockRPCClient)(nil).Call), varargs...)
}

// CallRaw mocks base method
func (m *MockRPCClient) CallRaw(body string) string {
	ret := m.ctrl.Call(m, "CallRaw", body)
	ret0, _ := ret[0].(string)
	return ret0
}

// CallRaw indicates an expected call of CallRaw
func (mr *MockRPCClientMockRecorder) CallRaw(body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallRaw", reflect.TypeOf((*MockRPCClient)(nil).CallRaw), body)
}

// CallContext mocks base method
func (m *MockRPCClient) CallContext(ctx context.Context, result interface{}, method string, args ...interface{}) error {
	varargs := []interface{}{ctx, result, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CallContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallContext indicates an expected call of CallContext
func (mr *MockRPCClientMockRecorder) CallContext(ctx, result, method interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, result, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContext", reflect.TypeOf((*MockRPCClient)(nil).CallContext), varargs...)
}

// RegisterHandler mocks base method
func (m *MockRPCClient) RegisterHandler(method string, handler rpc.Handler) {
	m.ctrl.Call(m, "RegisterHandler", method, handler)
}

// RegisterHandler indicates an expected call of RegisterHandler
func (mr *MockRPCClientMockRecorder) RegisterHandler(method, handler interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockRPCClient)(nil).RegisterHandler), method, handler)
}
