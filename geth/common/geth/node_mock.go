// Code generated by MockGen. DO NOT EDIT.
// Source: geth/common/geth/node.go

// Package geth is a generated GoMock package.
package geth

import (
	accounts "github.com/ethereum/go-ethereum/accounts"
	ethdb "github.com/ethereum/go-ethereum/ethdb"
	event "github.com/ethereum/go-ethereum/event"
	node "github.com/ethereum/go-ethereum/node"
	p2p "github.com/ethereum/go-ethereum/p2p"
	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNode is a mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockNode) Register(constructor node.ServiceConstructor) error {
	ret := m.ctrl.Call(m, "Register", constructor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockNodeMockRecorder) Register(constructor interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockNode)(nil).Register), constructor)
}

// Start mocks base method
func (m *MockNode) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockNodeMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNode)(nil).Start))
}

// Stop mocks base method
func (m *MockNode) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockNodeMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNode)(nil).Stop))
}

// Wait mocks base method
func (m *MockNode) Wait() {
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait
func (mr *MockNodeMockRecorder) Wait() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockNode)(nil).Wait))
}

// Restart mocks base method
func (m *MockNode) Restart() error {
	ret := m.ctrl.Call(m, "Restart")
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart
func (mr *MockNodeMockRecorder) Restart() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockNode)(nil).Restart))
}

// Attach mocks base method
func (m *MockNode) Attach() (*rpc.Client, error) {
	ret := m.ctrl.Call(m, "Attach")
	ret0, _ := ret[0].(*rpc.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attach indicates an expected call of Attach
func (mr *MockNodeMockRecorder) Attach() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockNode)(nil).Attach))
}

// Server mocks base method
func (m *MockNode) Server() *p2p.Server {
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(*p2p.Server)
	return ret0
}

// Server indicates an expected call of Server
func (mr *MockNodeMockRecorder) Server() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockNode)(nil).Server))
}

// Service mocks base method
func (m *MockNode) Service(service interface{}) error {
	ret := m.ctrl.Call(m, "Service", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Service indicates an expected call of Service
func (mr *MockNodeMockRecorder) Service(service interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockNode)(nil).Service), service)
}

// DataDir mocks base method
func (m *MockNode) DataDir() string {
	ret := m.ctrl.Call(m, "DataDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// DataDir indicates an expected call of DataDir
func (mr *MockNodeMockRecorder) DataDir() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataDir", reflect.TypeOf((*MockNode)(nil).DataDir))
}

// InstanceDir mocks base method
func (m *MockNode) InstanceDir() string {
	ret := m.ctrl.Call(m, "InstanceDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// InstanceDir indicates an expected call of InstanceDir
func (mr *MockNodeMockRecorder) InstanceDir() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceDir", reflect.TypeOf((*MockNode)(nil).InstanceDir))
}

// AccountManager mocks base method
func (m *MockNode) AccountManager() *accounts.Manager {
	ret := m.ctrl.Call(m, "AccountManager")
	ret0, _ := ret[0].(*accounts.Manager)
	return ret0
}

// AccountManager indicates an expected call of AccountManager
func (mr *MockNodeMockRecorder) AccountManager() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountManager", reflect.TypeOf((*MockNode)(nil).AccountManager))
}

// IPCEndpoint mocks base method
func (m *MockNode) IPCEndpoint() string {
	ret := m.ctrl.Call(m, "IPCEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// IPCEndpoint indicates an expected call of IPCEndpoint
func (mr *MockNodeMockRecorder) IPCEndpoint() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPCEndpoint", reflect.TypeOf((*MockNode)(nil).IPCEndpoint))
}

// HTTPEndpoint mocks base method
func (m *MockNode) HTTPEndpoint() string {
	ret := m.ctrl.Call(m, "HTTPEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// HTTPEndpoint indicates an expected call of HTTPEndpoint
func (mr *MockNodeMockRecorder) HTTPEndpoint() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPEndpoint", reflect.TypeOf((*MockNode)(nil).HTTPEndpoint))
}

// WSEndpoint mocks base method
func (m *MockNode) WSEndpoint() string {
	ret := m.ctrl.Call(m, "WSEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// WSEndpoint indicates an expected call of WSEndpoint
func (mr *MockNodeMockRecorder) WSEndpoint() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WSEndpoint", reflect.TypeOf((*MockNode)(nil).WSEndpoint))
}

// EventMux mocks base method
func (m *MockNode) EventMux() *event.TypeMux {
	ret := m.ctrl.Call(m, "EventMux")
	ret0, _ := ret[0].(*event.TypeMux)
	return ret0
}

// EventMux indicates an expected call of EventMux
func (mr *MockNodeMockRecorder) EventMux() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventMux", reflect.TypeOf((*MockNode)(nil).EventMux))
}

// OpenDatabase mocks base method
func (m *MockNode) OpenDatabase(name string, cache, handles int) (ethdb.Database, error) {
	ret := m.ctrl.Call(m, "OpenDatabase", name, cache, handles)
	ret0, _ := ret[0].(ethdb.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDatabase indicates an expected call of OpenDatabase
func (mr *MockNodeMockRecorder) OpenDatabase(name, cache, handles interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDatabase", reflect.TypeOf((*MockNode)(nil).OpenDatabase), name, cache, handles)
}

// ResolvePath mocks base method
func (m *MockNode) ResolvePath(x string) string {
	ret := m.ctrl.Call(m, "ResolvePath", x)
	ret0, _ := ret[0].(string)
	return ret0
}

// ResolvePath indicates an expected call of ResolvePath
func (mr *MockNodeMockRecorder) ResolvePath(x interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolvePath", reflect.TypeOf((*MockNode)(nil).ResolvePath), x)
}
