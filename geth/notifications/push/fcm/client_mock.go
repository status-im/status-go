// Code generated by MockGen. DO NOT EDIT.
// Source: geth/notification/fcm/client.go

// Package fcm is a generated GoMock package.
package fcm

import (
	go_fcm "github.com/NaySoftware/go-fcm"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockfirebaseClient is a mock of firebaseClient interface
type MockfirebaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockfirebaseClientMockRecorder
}

// MockfirebaseClientMockRecorder is the mock recorder for MockfirebaseClient
type MockfirebaseClientMockRecorder struct {
	mock *MockfirebaseClient
}

// NewMockfirebaseClient creates a new mock instance
func NewMockfirebaseClient(ctrl *gomock.Controller) *MockfirebaseClient {
	mock := &MockfirebaseClient{ctrl: ctrl}
	mock.recorder = &MockfirebaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockfirebaseClient) EXPECT() *MockfirebaseClientMockRecorder {
	return m.recorder
}

// NewFcmRegIdsMsg mocks base method
func (m *MockfirebaseClient) NewFcmRegIdsMsg(tokens []string, body interface{}) *go_fcm.FcmClient {
	ret := m.ctrl.Call(m, "NewFcmRegIdsMsg", tokens, body)
	ret0, _ := ret[0].(*go_fcm.FcmClient)
	return ret0
}

// NewFcmRegIdsMsg indicates an expected call of NewFcmRegIdsMsg
func (mr *MockfirebaseClientMockRecorder) NewFcmRegIdsMsg(tokens, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFcmRegIdsMsg", reflect.TypeOf((*MockfirebaseClient)(nil).NewFcmRegIdsMsg), tokens, body)
}

// Send mocks base method
func (m *MockfirebaseClient) Send() (*go_fcm.FcmResponseStatus, error) {
	ret := m.ctrl.Call(m, "Send")
	ret0, _ := ret[0].(*go_fcm.FcmResponseStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockfirebaseClientMockRecorder) Send() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockfirebaseClient)(nil).Send))
}

// SetNotificationPayload mocks base method
func (m *MockfirebaseClient) SetNotificationPayload(payload *go_fcm.NotificationPayload) *go_fcm.FcmClient {
	ret := m.ctrl.Call(m, "SetNotificationPayload", payload)
	ret0, _ := ret[0].(*go_fcm.FcmClient)
	return ret0
}

// SetNotificationPayload indicates an expected call of SetNotificationPayload
func (mr *MockfirebaseClientMockRecorder) SetNotificationPayload(payload interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotificationPayload", reflect.TypeOf((*MockfirebaseClient)(nil).SetNotificationPayload), payload)
}
