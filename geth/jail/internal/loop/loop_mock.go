// Code generated by MockGen. DO NOT EDIT.
// Source: loop.go

// Package loop is a generated GoMock package.
package loop

import (
	gomock "github.com/golang/mock/gomock"
	vm "github.com/status-im/status-go/geth/jail/internal/vm"
	reflect "reflect"
)

// MockTask is a mock of Task interface
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// SetID mocks base method
func (m *MockTask) SetID(id int64) {
	m.ctrl.Call(m, "SetID", id)
}

// SetID indicates an expected call of SetID
func (mr *MockTaskMockRecorder) SetID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockTask)(nil).SetID), id)
}

// GetID mocks base method
func (m *MockTask) GetID() int64 {
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockTaskMockRecorder) GetID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockTask)(nil).GetID))
}

// Execute mocks base method
func (m *MockTask) Execute(vm *vm.VM, l *Loop) error {
	ret := m.ctrl.Call(m, "Execute", vm, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockTaskMockRecorder) Execute(vm, l interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTask)(nil).Execute), vm, l)
}

// Cancel mocks base method
func (m *MockTask) Cancel() {
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel
func (mr *MockTaskMockRecorder) Cancel() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockTask)(nil).Cancel))
}
