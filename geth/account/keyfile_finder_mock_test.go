// Code generated by MockGen. DO NOT EDIT.
// Source: geth/account/keyfile_finder.go

// Package account is a generated GoMock package.
package account

import (
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockkeyFileFinder is a mock of keyFileFinder interface
type MockkeyFileFinder struct {
	ctrl     *gomock.Controller
	recorder *MockkeyFileFinderMockRecorder
}

// MockkeyFileFinderMockRecorder is the mock recorder for MockkeyFileFinder
type MockkeyFileFinderMockRecorder struct {
	mock *MockkeyFileFinder
}

// NewMockkeyFileFinder creates a new mock instance
func NewMockkeyFileFinder(ctrl *gomock.Controller) *MockkeyFileFinder {
	mock := &MockkeyFileFinder{ctrl: ctrl}
	mock.recorder = &MockkeyFileFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockkeyFileFinder) EXPECT() *MockkeyFileFinderMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockkeyFileFinder) Find(keyStoreDir string, addressObj common.Address) ([]byte, error) {
	ret := m.ctrl.Call(m, "Find", keyStoreDir, addressObj)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockkeyFileFinderMockRecorder) Find(keyStoreDir, addressObj interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockkeyFileFinder)(nil).Find), keyStoreDir, addressObj)
}
