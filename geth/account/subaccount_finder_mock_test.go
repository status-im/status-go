// Code generated by MockGen. DO NOT EDIT.
// Source: geth/account/subaccount_finder.go

// Package account is a generated GoMock package.
package account

import (
	accounts "github.com/ethereum/go-ethereum/accounts"
	gomock "github.com/golang/mock/gomock"
	extkeys "github.com/status-im/status-go/extkeys"
	reflect "reflect"
)

// MocksubAccountFinder is a mock of subAccountFinder interface
type MocksubAccountFinder struct {
	ctrl     *gomock.Controller
	recorder *MocksubAccountFinderMockRecorder
}

// MocksubAccountFinderMockRecorder is the mock recorder for MocksubAccountFinder
type MocksubAccountFinderMockRecorder struct {
	mock *MocksubAccountFinder
}

// NewMocksubAccountFinder creates a new mock instance
func NewMocksubAccountFinder(ctrl *gomock.Controller) *MocksubAccountFinder {
	mock := &MocksubAccountFinder{ctrl: ctrl}
	mock.recorder = &MocksubAccountFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksubAccountFinder) EXPECT() *MocksubAccountFinderMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MocksubAccountFinder) Find(keyStore accountKeyStorer, extKey *extkeys.ExtendedKey, subAccountIndex uint32) ([]accounts.Account, error) {
	ret := m.ctrl.Call(m, "Find", keyStore, extKey, subAccountIndex)
	ret0, _ := ret[0].([]accounts.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MocksubAccountFinderMockRecorder) Find(keyStore, extKey, subAccountIndex interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MocksubAccountFinder)(nil).Find), keyStore, extKey, subAccountIndex)
}
