// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/contracts.go
//
// Generated by this command:
//
//	mockgen -package=mock_contracts -destination=contracts/mock/contracts.go -source=contracts/contracts.go
//

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	common "github.com/ethereum/go-ethereum/common"
	ethscan "github.com/status-im/status-go/contracts/ethscan"
	ierc20 "github.com/status-im/status-go/contracts/ierc20"
)

// MockContractMakerIface is a mock of ContractMakerIface interface.
type MockContractMakerIface struct {
	ctrl     *gomock.Controller
	recorder *MockContractMakerIfaceMockRecorder
}

// MockContractMakerIfaceMockRecorder is the mock recorder for MockContractMakerIface.
type MockContractMakerIfaceMockRecorder struct {
	mock *MockContractMakerIface
}

// NewMockContractMakerIface creates a new mock instance.
func NewMockContractMakerIface(ctrl *gomock.Controller) *MockContractMakerIface {
	mock := &MockContractMakerIface{ctrl: ctrl}
	mock.recorder = &MockContractMakerIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractMakerIface) EXPECT() *MockContractMakerIfaceMockRecorder {
	return m.recorder
}

// NewERC20 mocks base method.
func (m *MockContractMakerIface) NewERC20(chainID uint64, contractAddr common.Address) (ierc20.IERC20Iface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewERC20", chainID, contractAddr)
	ret0, _ := ret[0].(ierc20.IERC20Iface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewERC20 indicates an expected call of NewERC20.
func (mr *MockContractMakerIfaceMockRecorder) NewERC20(chainID, contractAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewERC20", reflect.TypeOf((*MockContractMakerIface)(nil).NewERC20), chainID, contractAddr)
}

// NewERC20Caller mocks base method.
func (m *MockContractMakerIface) NewERC20Caller(chainID uint64, contractAddr common.Address) (ierc20.IERC20CallerIface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewERC20Caller", chainID, contractAddr)
	ret0, _ := ret[0].(ierc20.IERC20CallerIface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewERC20Caller indicates an expected call of NewERC20Caller.
func (mr *MockContractMakerIfaceMockRecorder) NewERC20Caller(chainID, contractAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewERC20Caller", reflect.TypeOf((*MockContractMakerIface)(nil).NewERC20Caller), chainID, contractAddr)
}

// NewEthScan mocks base method.
func (m *MockContractMakerIface) NewEthScan(chainID uint64) (ethscan.BalanceScannerIface, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEthScan", chainID)
	ret0, _ := ret[0].(ethscan.BalanceScannerIface)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewEthScan indicates an expected call of NewEthScan.
func (mr *MockContractMakerIfaceMockRecorder) NewEthScan(chainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEthScan", reflect.TypeOf((*MockContractMakerIface)(nil).NewEthScan), chainID)
}
