// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package collectibles

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CollectiblesMetaData contains all meta data concerning the Collectibles contract.
var CollectiblesMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_remoteBurnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_transferable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ownerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BaseToken_MaxSupplyLowerThanTotalSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseToken_MaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseToken_NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseToken_NotRemoteBurnable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseToken_NotTransferable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseToken_ReceiversAndIdsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommunityOwnable_InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommunityOwnable_NotAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StatusMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"remoteBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remoteBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101006040523480156200001257600080fd5b506040516200300a3803806200300a8339810160408190526200003591620001d8565b87878787878787878181898960006200004f83826200034d565b5060016200005e82826200034d565b5050506001600160a01b03808316608081905290821660a0521580156200008e575060a0516001600160a01b0316155b15620000ad5760405163c9d8a9b360e01b815260040160405180910390fd5b5050600b86905584151560c05283151560e052600c620000ce84826200034d565b505050505050505050505050505050505062000419565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200010d57600080fd5b81516001600160401b03808211156200012a576200012a620000e5565b604051601f8301601f19908116603f01168101908282118183101715620001555762000155620000e5565b816040528381526020925086838588010111156200017257600080fd5b600091505b8382101562000196578582018301518183018401529082019062000177565b600093810190920192909252949350505050565b80518015158114620001bb57600080fd5b919050565b80516001600160a01b0381168114620001bb57600080fd5b600080600080600080600080610100898b031215620001f657600080fd5b88516001600160401b03808211156200020e57600080fd5b6200021c8c838d01620000fb565b995060208b01519150808211156200023357600080fd5b620002418c838d01620000fb565b985060408b015197506200025860608c01620001aa565b96506200026860808c01620001aa565b955060a08b01519150808211156200027f57600080fd5b506200028e8b828c01620000fb565b9350506200029f60c08a01620001c0565b9150620002af60e08a01620001c0565b90509295985092959890939650565b600181811c90821680620002d357607f821691505b602082108103620002f457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200034857600081815260208120601f850160051c81016020861015620003235750805b601f850160051c820191505b8181101562000344578281556001016200032f565b5050505b505050565b81516001600160401b03811115620003695762000369620000e5565b62000381816200037a8454620002be565b84620002fa565b602080601f831160018114620003b95760008415620003a05750858301515b600019600386901b1c1916600185901b17855562000344565b600085815260208120601f198616915b82811015620003ea57888601518255948401946001909101908401620003c9565b5085821015620004095787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e051612b55620004b5600039600081816103720152611bc30152600081816102400152610a6101526000818161028c01528181610954015281816109b301528181610c3e01528181610c9d01528181611017015261107601526000818161032501528181610877015281816108d601528181610b6101528181610bc001528181610f3a0152610f990152612b556000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636352211e116100f9578063b88d4fde11610097578063cf721b1511610071578063cf721b15146103e8578063d547cfb7146103f0578063d5abeb01146103f8578063e985e9c51461040157600080fd5b8063b88d4fde146103af578063c87b56dd146103c2578063ce7c8b49146103d557600080fd5b806370a08231116100d357806370a082311461035a57806392ff0d311461036d57806395d89b4114610394578063a22cb4651461039c57600080fd5b80636352211e1461030d57806365371883146103205780636f8b44b01461034757600080fd5b806323b872dd11610166578063335de38a11610140578063335de38a146102c157806342842e0e146102d45780634f6ccce7146102e75780634fb95e02146102fa57600080fd5b806323b872dd146102745780632bb5e31e146102875780632f745c59146102ae57600080fd5b8063095ea7b311610197578063095ea7b314610226578063101639f51461023b57806318160ddd1461026257600080fd5b806301ffc9a7146101be57806306fdde03146101e6578063081812fc146101fb575b600080fd5b6101d16101cc3660046123fc565b61043d565b60405190151581526020015b60405180910390f35b6101ee61044e565b6040516101dd9190612487565b61020e61020936600461249a565b6104e0565b6040516001600160a01b0390911681526020016101dd565b6102396102343660046124cf565b610507565b005b6101d17f000000000000000000000000000000000000000000000000000000000000000081565b6008545b6040519081526020016101dd565b6102396102823660046124f9565b61063d565b61020e7f000000000000000000000000000000000000000000000000000000000000000081565b6102666102bc3660046124cf565b6106c4565b6102396102cf36600461268d565b61076c565b6102396102e23660046124f9565b6107b6565b6102666102f536600461249a565b6107d1565b610239610308366004612754565b610875565b61020e61031b36600461249a565b610afa565b61020e7f000000000000000000000000000000000000000000000000000000000000000081565b61023961035536600461249a565b610b5f565b6102666103683660046127ea565b610d8f565b6101d17f000000000000000000000000000000000000000000000000000000000000000081565b6101ee610e29565b6102396103aa366004612805565b610e38565b6102396103bd366004612841565b610e43565b6101ee6103d036600461249a565b610ed1565b6102396103e33660046128a9565b610f38565b61026661117d565b6101ee61118d565b610266600b5481565b6101d161040f366004612936565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006104488261121b565b92915050565b60606000805461045d90612969565b80601f016020809104026020016040519081016040528092919081815260200182805461048990612969565b80156104d65780601f106104ab576101008083540402835291602001916104d6565b820191906000526020600020905b8154815290600101906020018083116104b957829003601f168201915b5050505050905090565b60006104eb82611271565b506000908152600460205260409020546001600160a01b031690565b600061051282610afa565b9050806001600160a01b0316836001600160a01b0316036105a05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806105bc57506105bc813361040f565b61062e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610597565b61063883836112d5565b505050565b610647338261135b565b6106b95760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610597565b6106388383836113da565b60006106cf83610d8f565b82106107435760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610597565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6107ae86868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250879150869050611646565b505050505050565b61063883838360405180602001604052806000815250610e43565b60006107dc60085490565b82106108505760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610597565b60088281548110610863576108636129bc565b90600052602060002001549050919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161580159061094b57506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094991906129eb565b155b8015610a2857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615801590610a2857506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2691906129eb565b155b15610a5f576040517f7cea464e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610ab6576040517f98209e6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8151811015610af657610ae4828281518110610ad757610ad76129bc565b60200260200101516116d8565b80610aee81612a33565b915050610ab9565b5050565b6000818152600260205260408120546001600160a01b0316806104485760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610597565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615801590610c3557506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3391906129eb565b155b8015610d1257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615801590610d1257506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1091906129eb565b155b15610d49576040517f7cea464e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d5161117d565b811015610d8a576040517fad8783d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b55565b60006001600160a01b038216610e0d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610597565b506001600160a01b031660009081526003602052604090205490565b60606001805461045d90612969565b610af63383836117b1565b610e4d338361135b565b610ebf5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610597565b610ecb8484848461189d565b50505050565b6060610edc82611271565b6000610ee6611926565b90506000815111610f065760405180602001604052806000815250610f31565b80610f1084611935565b604051602001610f21929190612a6b565b6040516020818303038152906040525b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161580159061100e57506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c91906129eb565b155b80156110eb57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316158015906110eb57506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e991906129eb565b155b15611122576040517f7cea464e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b54815161112f61117d565b6111399190612a9a565b1115611171576040517f23d6539900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61117a816119f3565b50565b6000611188600a5490565b905090565b600c805461119a90612969565b80601f01602080910402602001604051908101604052809291908181526020018280546111c690612969565b80156112135780601f106111e857610100808354040283529160200191611213565b820191906000526020600020905b8154815290600101906020018083116111f657829003601f168201915b505050505081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d63000000000000000000000000000000000000000000000000000000001480610448575061044882611ab7565b6000818152600260205260409020546001600160a01b031661117a5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610597565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416908117909155819061132282610afa565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061136783610afa565b9050806001600160a01b0316846001600160a01b031614806113ae57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113d25750836001600160a01b03166113c7846104e0565b6001600160a01b0316145b949350505050565b826001600160a01b03166113ed82610afa565b6001600160a01b0316146114695760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610597565b6001600160a01b0382166114e45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610597565b6114f18383836001611b9a565b826001600160a01b031661150482610afa565b6001600160a01b0316146115805760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610597565b600081815260046020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b038781168086526003855283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b83518214611680576040517fbd999e0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b828110156107ae576116c8868683815181106116a1576116a16129bc565b60200260200101518686858181106116bb576116bb6129bc565b9050602002013585610e43565b6116d181612a33565b9050611683565b60006116e382610afa565b90506116f3816000846001611b9a565b6116fc82610afa565b600083815260046020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b0385168085526003845282852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b0316036118125760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610597565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6118a88484846113da565b6118b484848484611c27565b610ecb5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610597565b6060600c805461045d90612969565b6060600061194283611de6565b600101905060008167ffffffffffffffff81111561196257611962612581565b6040519080825280601f01601f19166020018201604052801561198c576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461199657509392505050565b60005b8151811015610af657611a3a828281518110611a1457611a146129bc565b6020026020010151611a25600a5490565b60405180602001604052806000815250611ec8565b600a54828281518110611a4f57611a4f6129bc565b60200260200101516001600160a01b031660006001600160a01b03167f28c427b0611d99da5c4f7368abe57e86b045b483c4689ae93e90745802335b8760405160405180910390a4611aa5600a80546001019055565b80611aaf81612a33565b9150506119f6565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611b4a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061044857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610448565b6001600160a01b03841615801590611bba57506001600160a01b03831615155b8015611be457507f0000000000000000000000000000000000000000000000000000000000000000155b15611c1b576040517f6b2b9e5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ecb84848484611f51565b60006001600160a01b0384163b15611ddb576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611c84903390899088908890600401612aad565b6020604051808303816000875af1925050508015611cdd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611cda91810190612ae9565b60015b611d90573d808015611d0b576040519150601f19603f3d011682016040523d82523d6000602084013e611d10565b606091505b508051600003611d885760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610597565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506113d2565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611e2f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611e5b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611e7957662386f26fc10000830492506010015b6305f5e1008310611e91576305f5e100830492506008015b6127108310611ea557612710830492506004015b60648310611eb7576064830492506002015b600a83106104485760010192915050565b611ed2838361208d565b611edf6000848484611c27565b6106385760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610597565b6001811115611fc85760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610597565b816001600160a01b0385166120245761201f81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612047565b836001600160a01b0316856001600160a01b03161461204757612047858261223e565b6001600160a01b0384166120635761205e816122db565b612086565b846001600160a01b0316846001600160a01b03161461208657612086848261238a565b5050505050565b6001600160a01b0382166120e35760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610597565b6000818152600260205260409020546001600160a01b0316156121485760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610597565b612156600083836001611b9a565b6000818152600260205260409020546001600160a01b0316156121bb5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610597565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000600161224b84610d8f565b6122559190612b06565b6000838152600760205260409020549091508082146122a8576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906122ed90600190612b06565b60008381526009602052604081205460088054939450909284908110612315576123156129bc565b906000526020600020015490508060088381548110612336576123366129bc565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061236e5761236e612b19565b6001900381819060005260206000200160009055905550505050565b600061239583610d8f565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461117a57600080fd5b60006020828403121561240e57600080fd5b8135610f31816123ce565b60005b8381101561243457818101518382015260200161241c565b50506000910152565b60008151808452612455816020860160208601612419565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610f31602083018461243d565b6000602082840312156124ac57600080fd5b5035919050565b80356001600160a01b03811681146124ca57600080fd5b919050565b600080604083850312156124e257600080fd5b6124eb836124b3565b946020939093013593505050565b60008060006060848603121561250e57600080fd5b612517846124b3565b9250612525602085016124b3565b9150604084013590509250925092565b60008083601f84011261254757600080fd5b50813567ffffffffffffffff81111561255f57600080fd5b6020830191508360208260051b850101111561257a57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156125f7576125f7612581565b604052919050565b600082601f83011261261057600080fd5b813567ffffffffffffffff81111561262a5761262a612581565b61265b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016125b0565b81815284602083860101111561267057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080608087890312156126a657600080fd5b6126af876124b3565b9550602087013567ffffffffffffffff808211156126cc57600080fd5b6126d88a838b01612535565b909750955060408901359150808211156126f157600080fd5b6126fd8a838b01612535565b9095509350606089013591508082111561271657600080fd5b5061272389828a016125ff565b9150509295509295509295565b600067ffffffffffffffff82111561274a5761274a612581565b5060051b60200190565b6000602080838503121561276757600080fd5b823567ffffffffffffffff81111561277e57600080fd5b8301601f8101851361278f57600080fd5b80356127a261279d82612730565b6125b0565b81815260059190911b820183019083810190878311156127c157600080fd5b928401925b828410156127df578335825292840192908401906127c6565b979650505050505050565b6000602082840312156127fc57600080fd5b610f31826124b3565b6000806040838503121561281857600080fd5b612821836124b3565b91506020830135801515811461283657600080fd5b809150509250929050565b6000806000806080858703121561285757600080fd5b612860856124b3565b935061286e602086016124b3565b925060408501359150606085013567ffffffffffffffff81111561289157600080fd5b61289d878288016125ff565b91505092959194509250565b600060208083850312156128bc57600080fd5b823567ffffffffffffffff8111156128d357600080fd5b8301601f810185136128e457600080fd5b80356128f261279d82612730565b81815260059190911b8201830190838101908783111561291157600080fd5b928401925b828410156127df57612927846124b3565b82529284019290840190612916565b6000806040838503121561294957600080fd5b612952836124b3565b9150612960602084016124b3565b90509250929050565b600181811c9082168061297d57607f821691505b6020821081036129b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156129fd57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a6457612a64612a04565b5060010190565b60008351612a7d818460208801612419565b835190830190612a91818360208801612419565b01949350505050565b8082018082111561044857610448612a04565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612adf608083018461243d565b9695505050505050565b600060208284031215612afb57600080fd5b8151610f31816123ce565b8181038181111561044857610448612a04565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c6343000811000a",
}

// CollectiblesABI is the input ABI used to generate the binding from.
// Deprecated: Use CollectiblesMetaData.ABI instead.
var CollectiblesABI = CollectiblesMetaData.ABI

// CollectiblesBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CollectiblesMetaData.Bin instead.
var CollectiblesBin = CollectiblesMetaData.Bin

// DeployCollectibles deploys a new Ethereum contract, binding an instance of Collectibles to it.
func DeployCollectibles(auth *bind.TransactOpts, backend bind.ContractBackend, _name string, _symbol string, _maxSupply *big.Int, _remoteBurnable bool, _transferable bool, _baseTokenURI string, _ownerToken common.Address, _masterToken common.Address) (common.Address, *types.Transaction, *Collectibles, error) {
	parsed, err := CollectiblesMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CollectiblesBin), backend, _name, _symbol, _maxSupply, _remoteBurnable, _transferable, _baseTokenURI, _ownerToken, _masterToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Collectibles{CollectiblesCaller: CollectiblesCaller{contract: contract}, CollectiblesTransactor: CollectiblesTransactor{contract: contract}, CollectiblesFilterer: CollectiblesFilterer{contract: contract}}, nil
}

// Collectibles is an auto generated Go binding around an Ethereum contract.
type Collectibles struct {
	CollectiblesCaller     // Read-only binding to the contract
	CollectiblesTransactor // Write-only binding to the contract
	CollectiblesFilterer   // Log filterer for contract events
}

// CollectiblesCaller is an auto generated read-only Go binding around an Ethereum contract.
type CollectiblesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CollectiblesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CollectiblesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CollectiblesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CollectiblesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CollectiblesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CollectiblesSession struct {
	Contract     *Collectibles     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CollectiblesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CollectiblesCallerSession struct {
	Contract *CollectiblesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// CollectiblesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CollectiblesTransactorSession struct {
	Contract     *CollectiblesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// CollectiblesRaw is an auto generated low-level Go binding around an Ethereum contract.
type CollectiblesRaw struct {
	Contract *Collectibles // Generic contract binding to access the raw methods on
}

// CollectiblesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CollectiblesCallerRaw struct {
	Contract *CollectiblesCaller // Generic read-only contract binding to access the raw methods on
}

// CollectiblesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CollectiblesTransactorRaw struct {
	Contract *CollectiblesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCollectibles creates a new instance of Collectibles, bound to a specific deployed contract.
func NewCollectibles(address common.Address, backend bind.ContractBackend) (*Collectibles, error) {
	contract, err := bindCollectibles(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Collectibles{CollectiblesCaller: CollectiblesCaller{contract: contract}, CollectiblesTransactor: CollectiblesTransactor{contract: contract}, CollectiblesFilterer: CollectiblesFilterer{contract: contract}}, nil
}

// NewCollectiblesCaller creates a new read-only instance of Collectibles, bound to a specific deployed contract.
func NewCollectiblesCaller(address common.Address, caller bind.ContractCaller) (*CollectiblesCaller, error) {
	contract, err := bindCollectibles(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CollectiblesCaller{contract: contract}, nil
}

// NewCollectiblesTransactor creates a new write-only instance of Collectibles, bound to a specific deployed contract.
func NewCollectiblesTransactor(address common.Address, transactor bind.ContractTransactor) (*CollectiblesTransactor, error) {
	contract, err := bindCollectibles(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CollectiblesTransactor{contract: contract}, nil
}

// NewCollectiblesFilterer creates a new log filterer instance of Collectibles, bound to a specific deployed contract.
func NewCollectiblesFilterer(address common.Address, filterer bind.ContractFilterer) (*CollectiblesFilterer, error) {
	contract, err := bindCollectibles(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CollectiblesFilterer{contract: contract}, nil
}

// bindCollectibles binds a generic wrapper to an already deployed contract.
func bindCollectibles(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CollectiblesMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Collectibles *CollectiblesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Collectibles.Contract.CollectiblesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Collectibles *CollectiblesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Collectibles.Contract.CollectiblesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Collectibles *CollectiblesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Collectibles.Contract.CollectiblesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Collectibles *CollectiblesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Collectibles.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Collectibles *CollectiblesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Collectibles.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Collectibles *CollectiblesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Collectibles.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Collectibles *CollectiblesCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Collectibles *CollectiblesSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Collectibles.Contract.BalanceOf(&_Collectibles.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Collectibles *CollectiblesCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Collectibles.Contract.BalanceOf(&_Collectibles.CallOpts, owner)
}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_Collectibles *CollectiblesCaller) BaseTokenURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "baseTokenURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_Collectibles *CollectiblesSession) BaseTokenURI() (string, error) {
	return _Collectibles.Contract.BaseTokenURI(&_Collectibles.CallOpts)
}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_Collectibles *CollectiblesCallerSession) BaseTokenURI() (string, error) {
	return _Collectibles.Contract.BaseTokenURI(&_Collectibles.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Collectibles *CollectiblesCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Collectibles *CollectiblesSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Collectibles.Contract.GetApproved(&_Collectibles.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Collectibles *CollectiblesCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Collectibles.Contract.GetApproved(&_Collectibles.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Collectibles *CollectiblesCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Collectibles *CollectiblesSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Collectibles.Contract.IsApprovedForAll(&_Collectibles.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Collectibles *CollectiblesCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Collectibles.Contract.IsApprovedForAll(&_Collectibles.CallOpts, owner, operator)
}

// MasterToken is a free data retrieval call binding the contract method 0x2bb5e31e.
//
// Solidity: function masterToken() view returns(address)
func (_Collectibles *CollectiblesCaller) MasterToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "masterToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MasterToken is a free data retrieval call binding the contract method 0x2bb5e31e.
//
// Solidity: function masterToken() view returns(address)
func (_Collectibles *CollectiblesSession) MasterToken() (common.Address, error) {
	return _Collectibles.Contract.MasterToken(&_Collectibles.CallOpts)
}

// MasterToken is a free data retrieval call binding the contract method 0x2bb5e31e.
//
// Solidity: function masterToken() view returns(address)
func (_Collectibles *CollectiblesCallerSession) MasterToken() (common.Address, error) {
	return _Collectibles.Contract.MasterToken(&_Collectibles.CallOpts)
}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_Collectibles *CollectiblesCaller) MaxSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "maxSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_Collectibles *CollectiblesSession) MaxSupply() (*big.Int, error) {
	return _Collectibles.Contract.MaxSupply(&_Collectibles.CallOpts)
}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_Collectibles *CollectiblesCallerSession) MaxSupply() (*big.Int, error) {
	return _Collectibles.Contract.MaxSupply(&_Collectibles.CallOpts)
}

// MintedCount is a free data retrieval call binding the contract method 0xcf721b15.
//
// Solidity: function mintedCount() view returns(uint256)
func (_Collectibles *CollectiblesCaller) MintedCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "mintedCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MintedCount is a free data retrieval call binding the contract method 0xcf721b15.
//
// Solidity: function mintedCount() view returns(uint256)
func (_Collectibles *CollectiblesSession) MintedCount() (*big.Int, error) {
	return _Collectibles.Contract.MintedCount(&_Collectibles.CallOpts)
}

// MintedCount is a free data retrieval call binding the contract method 0xcf721b15.
//
// Solidity: function mintedCount() view returns(uint256)
func (_Collectibles *CollectiblesCallerSession) MintedCount() (*big.Int, error) {
	return _Collectibles.Contract.MintedCount(&_Collectibles.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Collectibles *CollectiblesCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Collectibles *CollectiblesSession) Name() (string, error) {
	return _Collectibles.Contract.Name(&_Collectibles.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Collectibles *CollectiblesCallerSession) Name() (string, error) {
	return _Collectibles.Contract.Name(&_Collectibles.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Collectibles *CollectiblesCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Collectibles *CollectiblesSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Collectibles.Contract.OwnerOf(&_Collectibles.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Collectibles *CollectiblesCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Collectibles.Contract.OwnerOf(&_Collectibles.CallOpts, tokenId)
}

// OwnerToken is a free data retrieval call binding the contract method 0x65371883.
//
// Solidity: function ownerToken() view returns(address)
func (_Collectibles *CollectiblesCaller) OwnerToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "ownerToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerToken is a free data retrieval call binding the contract method 0x65371883.
//
// Solidity: function ownerToken() view returns(address)
func (_Collectibles *CollectiblesSession) OwnerToken() (common.Address, error) {
	return _Collectibles.Contract.OwnerToken(&_Collectibles.CallOpts)
}

// OwnerToken is a free data retrieval call binding the contract method 0x65371883.
//
// Solidity: function ownerToken() view returns(address)
func (_Collectibles *CollectiblesCallerSession) OwnerToken() (common.Address, error) {
	return _Collectibles.Contract.OwnerToken(&_Collectibles.CallOpts)
}

// RemoteBurnable is a free data retrieval call binding the contract method 0x101639f5.
//
// Solidity: function remoteBurnable() view returns(bool)
func (_Collectibles *CollectiblesCaller) RemoteBurnable(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "remoteBurnable")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RemoteBurnable is a free data retrieval call binding the contract method 0x101639f5.
//
// Solidity: function remoteBurnable() view returns(bool)
func (_Collectibles *CollectiblesSession) RemoteBurnable() (bool, error) {
	return _Collectibles.Contract.RemoteBurnable(&_Collectibles.CallOpts)
}

// RemoteBurnable is a free data retrieval call binding the contract method 0x101639f5.
//
// Solidity: function remoteBurnable() view returns(bool)
func (_Collectibles *CollectiblesCallerSession) RemoteBurnable() (bool, error) {
	return _Collectibles.Contract.RemoteBurnable(&_Collectibles.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Collectibles *CollectiblesCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Collectibles *CollectiblesSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Collectibles.Contract.SupportsInterface(&_Collectibles.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Collectibles *CollectiblesCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Collectibles.Contract.SupportsInterface(&_Collectibles.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Collectibles *CollectiblesCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Collectibles *CollectiblesSession) Symbol() (string, error) {
	return _Collectibles.Contract.Symbol(&_Collectibles.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Collectibles *CollectiblesCallerSession) Symbol() (string, error) {
	return _Collectibles.Contract.Symbol(&_Collectibles.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Collectibles *CollectiblesCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Collectibles *CollectiblesSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Collectibles.Contract.TokenByIndex(&_Collectibles.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Collectibles *CollectiblesCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Collectibles.Contract.TokenByIndex(&_Collectibles.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Collectibles *CollectiblesCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Collectibles *CollectiblesSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Collectibles.Contract.TokenOfOwnerByIndex(&_Collectibles.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Collectibles *CollectiblesCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Collectibles.Contract.TokenOfOwnerByIndex(&_Collectibles.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Collectibles *CollectiblesCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Collectibles *CollectiblesSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Collectibles.Contract.TokenURI(&_Collectibles.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Collectibles *CollectiblesCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Collectibles.Contract.TokenURI(&_Collectibles.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Collectibles *CollectiblesCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Collectibles *CollectiblesSession) TotalSupply() (*big.Int, error) {
	return _Collectibles.Contract.TotalSupply(&_Collectibles.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Collectibles *CollectiblesCallerSession) TotalSupply() (*big.Int, error) {
	return _Collectibles.Contract.TotalSupply(&_Collectibles.CallOpts)
}

// Transferable is a free data retrieval call binding the contract method 0x92ff0d31.
//
// Solidity: function transferable() view returns(bool)
func (_Collectibles *CollectiblesCaller) Transferable(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Collectibles.contract.Call(opts, &out, "transferable")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Transferable is a free data retrieval call binding the contract method 0x92ff0d31.
//
// Solidity: function transferable() view returns(bool)
func (_Collectibles *CollectiblesSession) Transferable() (bool, error) {
	return _Collectibles.Contract.Transferable(&_Collectibles.CallOpts)
}

// Transferable is a free data retrieval call binding the contract method 0x92ff0d31.
//
// Solidity: function transferable() view returns(bool)
func (_Collectibles *CollectiblesCallerSession) Transferable() (bool, error) {
	return _Collectibles.Contract.Transferable(&_Collectibles.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Collectibles *CollectiblesTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Collectibles.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Collectibles *CollectiblesSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Collectibles.Contract.Approve(&_Collectibles.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Collectibles *CollectiblesTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Collectibles.Contract.Approve(&_Collectibles.TransactOpts, to, tokenId)
}

// MintTo is a paid mutator transaction binding the contract method 0xce7c8b49.
//
// Solidity: function mintTo(address[] addresses) returns()
func (_Collectibles *CollectiblesTransactor) MintTo(opts *bind.TransactOpts, addresses []common.Address) (*types.Transaction, error) {
	return _Collectibles.contract.Transact(opts, "mintTo", addresses)
}

// MintTo is a paid mutator transaction binding the contract method 0xce7c8b49.
//
// Solidity: function mintTo(address[] addresses) returns()
func (_Collectibles *CollectiblesSession) MintTo(addresses []common.Address) (*types.Transaction, error) {
	return _Collectibles.Contract.MintTo(&_Collectibles.TransactOpts, addresses)
}

// MintTo is a paid mutator transaction binding the contract method 0xce7c8b49.
//
// Solidity: function mintTo(address[] addresses) returns()
func (_Collectibles *CollectiblesTransactorSession) MintTo(addresses []common.Address) (*types.Transaction, error) {
	return _Collectibles.Contract.MintTo(&_Collectibles.TransactOpts, addresses)
}

// RemoteBurn is a paid mutator transaction binding the contract method 0x4fb95e02.
//
// Solidity: function remoteBurn(uint256[] tokenIds) returns()
func (_Collectibles *CollectiblesTransactor) RemoteBurn(opts *bind.TransactOpts, tokenIds []*big.Int) (*types.Transaction, error) {
	return _Collectibles.contract.Transact(opts, "remoteBurn", tokenIds)
}

// RemoteBurn is a paid mutator transaction binding the contract method 0x4fb95e02.
//
// Solidity: function remoteBurn(uint256[] tokenIds) returns()
func (_Collectibles *CollectiblesSession) RemoteBurn(tokenIds []*big.Int) (*types.Transaction, error) {
	return _Collectibles.Contract.RemoteBurn(&_Collectibles.TransactOpts, tokenIds)
}

// RemoteBurn is a paid mutator transaction binding the contract method 0x4fb95e02.
//
// Solidity: function remoteBurn(uint256[] tokenIds) returns()
func (_Collectibles *CollectiblesTransactorSession) RemoteBurn(tokenIds []*big.Int) (*types.Transaction, error) {
	return _Collectibles.Contract.RemoteBurn(&_Collectibles.TransactOpts, tokenIds)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x335de38a.
//
// Solidity: function safeBatchTransferFrom(address from, address[] receivers, uint256[] ids, bytes data) returns()
func (_Collectibles *CollectiblesTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, receivers []common.Address, ids []*big.Int, data []byte) (*types.Transaction, error) {
	return _Collectibles.contract.Transact(opts, "safeBatchTransferFrom", from, receivers, ids, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x335de38a.
//
// Solidity: function safeBatchTransferFrom(address from, address[] receivers, uint256[] ids, bytes data) returns()
func (_Collectibles *CollectiblesSession) SafeBatchTransferFrom(from common.Address, receivers []common.Address, ids []*big.Int, data []byte) (*types.Transaction, error) {
	return _Collectibles.Contract.SafeBatchTransferFrom(&_Collectibles.TransactOpts, from, receivers, ids, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x335de38a.
//
// Solidity: function safeBatchTransferFrom(address from, address[] receivers, uint256[] ids, bytes data) returns()
func (_Collectibles *CollectiblesTransactorSession) SafeBatchTransferFrom(from common.Address, receivers []common.Address, ids []*big.Int, data []byte) (*types.Transaction, error) {
	return _Collectibles.Contract.SafeBatchTransferFrom(&_Collectibles.TransactOpts, from, receivers, ids, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Collectibles *CollectiblesTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Collectibles.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Collectibles *CollectiblesSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Collectibles.Contract.SafeTransferFrom(&_Collectibles.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Collectibles *CollectiblesTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Collectibles.Contract.SafeTransferFrom(&_Collectibles.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Collectibles *CollectiblesTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Collectibles.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Collectibles *CollectiblesSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Collectibles.Contract.SafeTransferFrom0(&_Collectibles.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Collectibles *CollectiblesTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Collectibles.Contract.SafeTransferFrom0(&_Collectibles.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Collectibles *CollectiblesTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Collectibles.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Collectibles *CollectiblesSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Collectibles.Contract.SetApprovalForAll(&_Collectibles.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Collectibles *CollectiblesTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Collectibles.Contract.SetApprovalForAll(&_Collectibles.TransactOpts, operator, approved)
}

// SetMaxSupply is a paid mutator transaction binding the contract method 0x6f8b44b0.
//
// Solidity: function setMaxSupply(uint256 newMaxSupply) returns()
func (_Collectibles *CollectiblesTransactor) SetMaxSupply(opts *bind.TransactOpts, newMaxSupply *big.Int) (*types.Transaction, error) {
	return _Collectibles.contract.Transact(opts, "setMaxSupply", newMaxSupply)
}

// SetMaxSupply is a paid mutator transaction binding the contract method 0x6f8b44b0.
//
// Solidity: function setMaxSupply(uint256 newMaxSupply) returns()
func (_Collectibles *CollectiblesSession) SetMaxSupply(newMaxSupply *big.Int) (*types.Transaction, error) {
	return _Collectibles.Contract.SetMaxSupply(&_Collectibles.TransactOpts, newMaxSupply)
}

// SetMaxSupply is a paid mutator transaction binding the contract method 0x6f8b44b0.
//
// Solidity: function setMaxSupply(uint256 newMaxSupply) returns()
func (_Collectibles *CollectiblesTransactorSession) SetMaxSupply(newMaxSupply *big.Int) (*types.Transaction, error) {
	return _Collectibles.Contract.SetMaxSupply(&_Collectibles.TransactOpts, newMaxSupply)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Collectibles *CollectiblesTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Collectibles.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Collectibles *CollectiblesSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Collectibles.Contract.TransferFrom(&_Collectibles.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Collectibles *CollectiblesTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Collectibles.Contract.TransferFrom(&_Collectibles.TransactOpts, from, to, tokenId)
}

// CollectiblesApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Collectibles contract.
type CollectiblesApprovalIterator struct {
	Event *CollectiblesApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollectiblesApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollectiblesApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollectiblesApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollectiblesApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollectiblesApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollectiblesApproval represents a Approval event raised by the Collectibles contract.
type CollectiblesApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Collectibles *CollectiblesFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*CollectiblesApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Collectibles.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CollectiblesApprovalIterator{contract: _Collectibles.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Collectibles *CollectiblesFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CollectiblesApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Collectibles.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollectiblesApproval)
				if err := _Collectibles.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Collectibles *CollectiblesFilterer) ParseApproval(log types.Log) (*CollectiblesApproval, error) {
	event := new(CollectiblesApproval)
	if err := _Collectibles.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollectiblesApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Collectibles contract.
type CollectiblesApprovalForAllIterator struct {
	Event *CollectiblesApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollectiblesApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollectiblesApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollectiblesApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollectiblesApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollectiblesApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollectiblesApprovalForAll represents a ApprovalForAll event raised by the Collectibles contract.
type CollectiblesApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Collectibles *CollectiblesFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*CollectiblesApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Collectibles.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CollectiblesApprovalForAllIterator{contract: _Collectibles.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Collectibles *CollectiblesFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CollectiblesApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Collectibles.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollectiblesApprovalForAll)
				if err := _Collectibles.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Collectibles *CollectiblesFilterer) ParseApprovalForAll(log types.Log) (*CollectiblesApprovalForAll, error) {
	event := new(CollectiblesApprovalForAll)
	if err := _Collectibles.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollectiblesStatusMintIterator is returned from FilterStatusMint and is used to iterate over the raw logs and unpacked data for StatusMint events raised by the Collectibles contract.
type CollectiblesStatusMintIterator struct {
	Event *CollectiblesStatusMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollectiblesStatusMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollectiblesStatusMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollectiblesStatusMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollectiblesStatusMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollectiblesStatusMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollectiblesStatusMint represents a StatusMint event raised by the Collectibles contract.
type CollectiblesStatusMint struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStatusMint is a free log retrieval operation binding the contract event 0x28c427b0611d99da5c4f7368abe57e86b045b483c4689ae93e90745802335b87.
//
// Solidity: event StatusMint(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Collectibles *CollectiblesFilterer) FilterStatusMint(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CollectiblesStatusMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Collectibles.contract.FilterLogs(opts, "StatusMint", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CollectiblesStatusMintIterator{contract: _Collectibles.contract, event: "StatusMint", logs: logs, sub: sub}, nil
}

// WatchStatusMint is a free log subscription operation binding the contract event 0x28c427b0611d99da5c4f7368abe57e86b045b483c4689ae93e90745802335b87.
//
// Solidity: event StatusMint(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Collectibles *CollectiblesFilterer) WatchStatusMint(opts *bind.WatchOpts, sink chan<- *CollectiblesStatusMint, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Collectibles.contract.WatchLogs(opts, "StatusMint", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollectiblesStatusMint)
				if err := _Collectibles.contract.UnpackLog(event, "StatusMint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStatusMint is a log parse operation binding the contract event 0x28c427b0611d99da5c4f7368abe57e86b045b483c4689ae93e90745802335b87.
//
// Solidity: event StatusMint(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Collectibles *CollectiblesFilterer) ParseStatusMint(log types.Log) (*CollectiblesStatusMint, error) {
	event := new(CollectiblesStatusMint)
	if err := _Collectibles.contract.UnpackLog(event, "StatusMint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollectiblesTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Collectibles contract.
type CollectiblesTransferIterator struct {
	Event *CollectiblesTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollectiblesTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollectiblesTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollectiblesTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollectiblesTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollectiblesTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollectiblesTransfer represents a Transfer event raised by the Collectibles contract.
type CollectiblesTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Collectibles *CollectiblesFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CollectiblesTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Collectibles.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CollectiblesTransferIterator{contract: _Collectibles.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Collectibles *CollectiblesFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CollectiblesTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Collectibles.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollectiblesTransfer)
				if err := _Collectibles.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Collectibles *CollectiblesFilterer) ParseTransfer(log types.Log) (*CollectiblesTransfer, error) {
	event := new(CollectiblesTransfer)
	if err := _Collectibles.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
