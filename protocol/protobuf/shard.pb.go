// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shard.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Shard struct {
	Cluster              int32    `protobuf:"varint,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Index                int32    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shard) Reset()         { *m = Shard{} }
func (m *Shard) String() string { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()    {}
func (*Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{0}
}

func (m *Shard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Shard.Unmarshal(m, b)
}
func (m *Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Shard.Marshal(b, m, deterministic)
}
func (m *Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shard.Merge(m, src)
}
func (m *Shard) XXX_Size() int {
	return xxx_messageInfo_Shard.Size(m)
}
func (m *Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_Shard proto.InternalMessageInfo

func (m *Shard) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *Shard) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type CommunityShardInfo struct {
	// shard info of the community
	Shard *Shard `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	// chain id of minted community smart contract
	// used to get the owner from the smart contract
	ChainId              uint64   `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommunityShardInfo) Reset()         { *m = CommunityShardInfo{} }
func (m *CommunityShardInfo) String() string { return proto.CompactTextString(m) }
func (*CommunityShardInfo) ProtoMessage()    {}
func (*CommunityShardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{1}
}

func (m *CommunityShardInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommunityShardInfo.Unmarshal(m, b)
}
func (m *CommunityShardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommunityShardInfo.Marshal(b, m, deterministic)
}
func (m *CommunityShardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityShardInfo.Merge(m, src)
}
func (m *CommunityShardInfo) XXX_Size() int {
	return xxx_messageInfo_CommunityShardInfo.Size(m)
}
func (m *CommunityShardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityShardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityShardInfo proto.InternalMessageInfo

func (m *CommunityShardInfo) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *CommunityShardInfo) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type CommunityPublicShardInfo struct {
	// Signature of the payload field
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// Marshaled PublicCommunityShardInfo
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Community ID of public shard info
	CommunityId          []byte   `protobuf:"bytes,3,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommunityPublicShardInfo) Reset()         { *m = CommunityPublicShardInfo{} }
func (m *CommunityPublicShardInfo) String() string { return proto.CompactTextString(m) }
func (*CommunityPublicShardInfo) ProtoMessage()    {}
func (*CommunityPublicShardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{2}
}

func (m *CommunityPublicShardInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommunityPublicShardInfo.Unmarshal(m, b)
}
func (m *CommunityPublicShardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommunityPublicShardInfo.Marshal(b, m, deterministic)
}
func (m *CommunityPublicShardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityPublicShardInfo.Merge(m, src)
}
func (m *CommunityPublicShardInfo) XXX_Size() int {
	return xxx_messageInfo_CommunityPublicShardInfo.Size(m)
}
func (m *CommunityPublicShardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityPublicShardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityPublicShardInfo proto.InternalMessageInfo

func (m *CommunityPublicShardInfo) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CommunityPublicShardInfo) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CommunityPublicShardInfo) GetCommunityId() []byte {
	if m != nil {
		return m.CommunityId
	}
	return nil
}

func init() {
	proto.RegisterType((*Shard)(nil), "protobuf.Shard")
	proto.RegisterType((*CommunityShardInfo)(nil), "protobuf.CommunityShardInfo")
	proto.RegisterType((*CommunityPublicShardInfo)(nil), "protobuf.CommunityPublicShardInfo")
}

func init() {
	proto.RegisterFile("shard.proto", fileDescriptor_319ea41e44cdc364)
}

var fileDescriptor_319ea41e44cdc364 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8e, 0xbf, 0x4b, 0xc5, 0x30,
	0x14, 0x85, 0xa9, 0x1a, 0x7f, 0xdc, 0x54, 0x84, 0xe0, 0x90, 0xc1, 0x41, 0x0b, 0x82, 0x53, 0x04,
	0x1d, 0x1c, 0xdc, 0x74, 0xea, 0x26, 0x11, 0x17, 0x17, 0x49, 0x9b, 0xd6, 0x06, 0xda, 0xa4, 0xa4,
	0x09, 0xbc, 0xfe, 0xf7, 0x8f, 0xde, 0x92, 0x76, 0x4a, 0xce, 0x39, 0xe1, 0xfb, 0x02, 0x74, 0xea,
	0x94, 0xd7, 0x62, 0xf4, 0x2e, 0x38, 0x76, 0x89, 0x47, 0x15, 0xdb, 0xe2, 0x0d, 0xc8, 0xf7, 0x32,
	0x30, 0x0e, 0x17, 0x75, 0x1f, 0xa7, 0xd0, 0x78, 0x9e, 0xdd, 0x67, 0x4f, 0x44, 0xa6, 0xc8, 0x6e,
	0x81, 0x18, 0xab, 0x9b, 0x03, 0x3f, 0xc1, 0x7e, 0x0d, 0xc5, 0x0f, 0xb0, 0x4f, 0x37, 0x0c, 0xd1,
	0x9a, 0x30, 0x23, 0xa1, 0xb4, 0xad, 0x63, 0x8f, 0x40, 0xd0, 0x83, 0x0c, 0xfa, 0x72, 0x23, 0x92,
	0x48, 0xe0, 0x1b, 0xb9, 0xae, 0x28, 0xeb, 0x94, 0xb1, 0xa5, 0x46, 0xe8, 0x99, 0x4c, 0xb1, 0x88,
	0xc0, 0x37, 0xec, 0x57, 0xac, 0x7a, 0x53, 0xef, 0xf0, 0x3b, 0xb8, 0x9a, 0xcc, 0xbf, 0x55, 0x21,
	0xfa, 0x06, 0x05, 0xb9, 0xdc, 0x8b, 0x85, 0x39, 0xaa, 0xb9, 0x77, 0x6a, 0x65, 0xe6, 0x32, 0x45,
	0xf6, 0x00, 0x79, 0x9d, 0x98, 0x7f, 0x46, 0xf3, 0x53, 0x9c, 0xe9, 0xd6, 0x95, 0xfa, 0xe3, 0xfa,
	0x97, 0x8a, 0xe7, 0xf7, 0xf4, 0xd9, 0xea, 0x1c, 0x6f, 0xaf, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x98, 0xcd, 0x27, 0x50, 0x35, 0x01, 0x00, 0x00,
}
