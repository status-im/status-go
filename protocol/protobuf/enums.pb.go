// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enums.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	MessageType_UNKNOWN_MESSAGE_TYPE MessageType = 0
	MessageType_ONE_TO_ONE           MessageType = 1
	MessageType_PUBLIC_GROUP         MessageType = 2
	MessageType_PRIVATE_GROUP        MessageType = 3
	// Only local
	MessageType_SYSTEM_MESSAGE_PRIVATE_GROUP MessageType = 4
	MessageType_COMMUNITY_CHAT               MessageType = 5
	// Only local
	MessageType_SYSTEM_MESSAGE_GAP MessageType = 6
)

var MessageType_name = map[int32]string{
	0: "UNKNOWN_MESSAGE_TYPE",
	1: "ONE_TO_ONE",
	2: "PUBLIC_GROUP",
	3: "PRIVATE_GROUP",
	4: "SYSTEM_MESSAGE_PRIVATE_GROUP",
	5: "COMMUNITY_CHAT",
	6: "SYSTEM_MESSAGE_GAP",
}

var MessageType_value = map[string]int32{
	"UNKNOWN_MESSAGE_TYPE":         0,
	"ONE_TO_ONE":                   1,
	"PUBLIC_GROUP":                 2,
	"PRIVATE_GROUP":                3,
	"SYSTEM_MESSAGE_PRIVATE_GROUP": 4,
	"COMMUNITY_CHAT":               5,
	"SYSTEM_MESSAGE_GAP":           6,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_888b6bd9597961ff, []int{0}
}

type ImageType int32

const (
	ImageType_UNKNOWN_IMAGE_TYPE ImageType = 0
	// Raster image files is payload data that can be read as a raster image
	ImageType_PNG  ImageType = 1
	ImageType_JPEG ImageType = 2
	ImageType_WEBP ImageType = 3
	ImageType_GIF  ImageType = 4
)

var ImageType_name = map[int32]string{
	0: "UNKNOWN_IMAGE_TYPE",
	1: "PNG",
	2: "JPEG",
	3: "WEBP",
	4: "GIF",
}

var ImageType_value = map[string]int32{
	"UNKNOWN_IMAGE_TYPE": 0,
	"PNG":                1,
	"JPEG":               2,
	"WEBP":               3,
	"GIF":                4,
}

func (x ImageType) String() string {
	return proto.EnumName(ImageType_name, int32(x))
}

func (ImageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_888b6bd9597961ff, []int{1}
}

type CommunityTokenType int32

const (
	CommunityTokenType_UNKNOWN_TOKEN_TYPE CommunityTokenType = 0
	CommunityTokenType_ERC20              CommunityTokenType = 1
	CommunityTokenType_ERC721             CommunityTokenType = 2
	CommunityTokenType_ENS                CommunityTokenType = 3
)

var CommunityTokenType_name = map[int32]string{
	0: "UNKNOWN_TOKEN_TYPE",
	1: "ERC20",
	2: "ERC721",
	3: "ENS",
}

var CommunityTokenType_value = map[string]int32{
	"UNKNOWN_TOKEN_TYPE": 0,
	"ERC20":              1,
	"ERC721":             2,
	"ENS":                3,
}

func (x CommunityTokenType) String() string {
	return proto.EnumName(CommunityTokenType_name, int32(x))
}

func (CommunityTokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_888b6bd9597961ff, []int{2}
}

func init() {
	proto.RegisterEnum("protobuf.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("protobuf.ImageType", ImageType_name, ImageType_value)
	proto.RegisterEnum("protobuf.CommunityTokenType", CommunityTokenType_name, CommunityTokenType_value)
}

func init() {
	proto.RegisterFile("enums.proto", fileDescriptor_888b6bd9597961ff)
}

var fileDescriptor_888b6bd9597961ff = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x86, 0x2d, 0xe5, 0x73, 0x10, 0x32, 0x4e, 0x0c, 0xf1, 0xe0, 0xc1, 0x33, 0x07, 0x54, 0x3c,
	0x78, 0xf0, 0x54, 0x9a, 0xb1, 0xae, 0xb0, 0x1f, 0x69, 0xb7, 0x12, 0xbc, 0x6c, 0x24, 0xa9, 0xc6,
	0x98, 0x52, 0x22, 0x70, 0xe0, 0x2f, 0xf9, 0x2b, 0x0d, 0xc4, 0x1a, 0xe5, 0x34, 0x6f, 0x26, 0x33,
	0x4f, 0x9e, 0xbc, 0xd0, 0xce, 0x16, 0x9b, 0x7c, 0x35, 0x58, 0x7e, 0x16, 0xeb, 0x82, 0x9a, 0xfb,
	0x31, 0xdf, 0xbc, 0xf6, 0xbf, 0x3c, 0x68, 0xcb, 0x6c, 0xb5, 0x7a, 0x79, 0xcb, 0xec, 0x76, 0x99,
	0xd1, 0x19, 0x9c, 0xa6, 0x6a, 0xac, 0xf4, 0x54, 0x39, 0xc9, 0x49, 0x12, 0x44, 0xec, 0xec, 0xcc,
	0x30, 0x1e, 0x51, 0x17, 0x40, 0x2b, 0x76, 0x56, 0x3b, 0xad, 0x18, 0x3d, 0x42, 0x38, 0x36, 0xe9,
	0x68, 0x22, 0x42, 0x17, 0xc5, 0x3a, 0x35, 0x58, 0xa1, 0x13, 0xe8, 0x98, 0x58, 0x3c, 0x05, 0x96,
	0x7f, 0x56, 0x3e, 0x5d, 0xc0, 0x79, 0x32, 0x4b, 0x2c, 0xcb, 0x5f, 0xda, 0xff, 0x8b, 0x2a, 0x11,
	0x74, 0x43, 0x2d, 0x65, 0xaa, 0x84, 0x9d, 0xb9, 0xf0, 0x21, 0xb0, 0x58, 0xa3, 0x1e, 0xd0, 0xc1,
	0x57, 0x14, 0x18, 0xac, 0xf7, 0x05, 0xb4, 0x44, 0x5e, 0x9a, 0xf6, 0x80, 0x4a, 0x53, 0x21, 0xff,
	0x78, 0x36, 0xc0, 0x37, 0x2a, 0x42, 0x8f, 0x9a, 0x50, 0x7d, 0x34, 0x1c, 0x61, 0x65, 0x97, 0xa6,
	0x3c, 0xda, 0xf9, 0x34, 0xc0, 0x8f, 0xc4, 0x3d, 0x56, 0xfb, 0x13, 0xa0, 0xb0, 0xc8, 0xf3, 0xcd,
	0xe2, 0x7d, 0xbd, 0xb5, 0xc5, 0x47, 0xb6, 0x38, 0x64, 0x5a, 0x3d, 0x66, 0x55, 0x32, 0x5b, 0x50,
	0xe3, 0x38, 0x1c, 0x5e, 0xa1, 0x47, 0x00, 0x75, 0x8e, 0xc3, 0xdb, 0xe1, 0x35, 0x56, 0x76, 0x34,
	0x56, 0x09, 0xfa, 0xa3, 0xce, 0x73, 0x7b, 0x70, 0x79, 0x57, 0x96, 0x3a, 0xaf, 0xef, 0xd3, 0xcd,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0xd8, 0x58, 0xde, 0x74, 0x01, 0x00, 0x00,
}
